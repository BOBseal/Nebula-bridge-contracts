{
	"id": "8428a8d21798cbd9681cc3948d366713",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"BRIDGE_PARTNERSHIP/src/CCTPBase.sol": {
				"content": "pragma solidity ^0.8.13;\r\n\r\nimport \"./interfaces/IWormholeReceiver.sol\";\r\nimport \"./interfaces/IWormholeRelayer.sol\";\r\nimport {IERC20} from \"./interfaces/IERC20.sol\";\r\nimport \"./interfaces/CCTPInterfaces/ITokenMessenger.sol\";\r\nimport \"./interfaces/CCTPInterfaces/IMessageTransmitter.sol\";\r\n\r\nimport \"./Utils.sol\";\r\nimport \"./Base.sol\";\r\n\r\nlibrary CCTPMessageLib {\r\n    // The second standardized key type is a CCTP Key\r\n    // representing a CCTP transfer of USDC\r\n    // (on the IWormholeRelayer interface)\r\n\r\n    // Note - the default delivery provider only will relay CCTP transfers that were sent\r\n    // in the same transaction that this message was emitted!\r\n    // (This will always be the case if 'CCTPSender' is used)\r\n\r\n    uint8 constant CCTP_KEY_TYPE = 2;\r\n\r\n    // encoded using abi.encodePacked(domain, nonce)\r\n    struct CCTPKey {\r\n        uint32 domain;\r\n        uint64 nonce;\r\n    }\r\n\r\n    // encoded using abi.encode(message, signature)\r\n    struct CCTPMessage {\r\n        bytes message;\r\n        bytes signature;\r\n    }\r\n}\r\n\r\nabstract contract CCTPBase is Base {\r\n    ITokenMessenger circleTokenMessenger;\r\n    IMessageTransmitter circleMessageTransmitter;\r\n    address USDC;\r\n    address cctpConfigurationOwner;\r\n\r\n    function _initCCTPBase(\r\n        address _wormholeRelayer,\r\n        address _wormhole,\r\n        address _circleMessageTransmitter,\r\n        address _circleTokenMessenger,\r\n        address _USDC\r\n    ) internal{\r\n        _initBase(_wormholeRelayer , _wormhole);\r\n        circleTokenMessenger = ITokenMessenger(_circleTokenMessenger);\r\n        circleMessageTransmitter = IMessageTransmitter(\r\n            _circleMessageTransmitter\r\n        );\r\n        USDC = _USDC;\r\n        cctpConfigurationOwner = msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract CCTPSender is CCTPBase {\r\n    uint8 internal constant CONSISTENCY_LEVEL_FINALIZED = 15;\r\n\r\n    using CCTPMessageLib for *;\r\n\r\n    mapping(uint16 => uint32) public chainIdToCCTPDomain;\r\n\r\n    /**\r\n     * Sets the CCTP Domain corresponding to chain 'chain' to be 'cctpDomain'\r\n     * So that transfers of USDC to chain 'chain' use the target CCTP domain 'cctpDomain'\r\n     *\r\n     * This action can only be performed by 'cctpConfigurationOwner', who is set to be the deployer\r\n     *\r\n     * Currently, cctp domains are:\r\n     * Ethereum: Wormhole chain id 2, cctp domain 0\r\n     * Avalanche: Wormhole chain id 6, cctp domain 1\r\n     * Optimism: Wormhole chain id 24, cctp domain 2\r\n     * Arbitrum: Wormhole chain id 23, cctp domain 3\r\n     * Base: Wormhole chain id 30, cctp domain 6\r\n     *\r\n     * These can be set via:\r\n     * setCCTPDomain(2, 0);\r\n     * setCCTPDomain(6, 1);\r\n     * setCCTPDomain(24, 2);\r\n     * setCCTPDomain(23, 3);\r\n     * setCCTPDomain(30, 6);\r\n     */\r\n    function setCCTPDomain(uint16 chain, uint32 cctpDomain) public {\r\n        require(\r\n            msg.sender == cctpConfigurationOwner,\r\n            \"Not allowed to set CCTP Domain\"\r\n        );\r\n        chainIdToCCTPDomain[chain] = cctpDomain;\r\n    }\r\n\r\n    function getCCTPDomain(uint16 chain) internal view returns (uint32) {\r\n        return chainIdToCCTPDomain[chain];\r\n    }\r\n\r\n    /**\r\n     * transferUSDC wraps common boilerplate for sending tokens to another chain using IWormholeRelayer\r\n     * - approves the Circle TokenMessenger contract to spend 'amount' of USDC\r\n     * - calls Circle's 'depositForBurnWithCaller'\r\n     * - returns key for inclusion in WormholeRelayer `additionalVaas` argument\r\n     *\r\n     * Note: this requires that only the targetAddress can redeem transfers.\r\n     *\r\n     */\r\n\r\n    function transferUSDC(\r\n        uint256 amount,\r\n        uint16 targetChain,\r\n        address targetAddress\r\n    ) internal returns (MessageKey memory) {\r\n        IERC20(USDC).approve(address(circleTokenMessenger), amount);\r\n        bytes32 targetAddressBytes32 = addressToBytes32CCTP(targetAddress);\r\n        uint64 nonce = circleTokenMessenger.depositForBurnWithCaller(\r\n            amount,\r\n            getCCTPDomain(targetChain),\r\n            targetAddressBytes32,\r\n            USDC,\r\n            targetAddressBytes32\r\n        );\r\n        return\r\n            MessageKey(\r\n                CCTPMessageLib.CCTP_KEY_TYPE,\r\n                abi.encodePacked(getCCTPDomain(wormhole.chainId()), nonce)\r\n            );\r\n    }\r\n\r\n    // Publishes a CCTP transfer of 'amount' of USDC\r\n    // and requests a delivery of the transfer along with 'payload' to 'targetAddress' on 'targetChain'\r\n    //\r\n    // The second step is done by publishing a wormhole message representing a request\r\n    // to call 'receiveWormholeMessages' on the address 'targetAddress' on chain 'targetChain'\r\n    // with the payload 'abi.encode(amount, payload)'\r\n    // (and we encode the amount so it can be checked on the target chain)\r\n    function sendUSDCWithPayloadToEvm(\r\n        uint16 targetChain,\r\n        address targetAddress,\r\n        bytes memory payload,\r\n        uint256 receiverValue,\r\n        uint256 gasLimit,\r\n        uint256 amount\r\n    ) internal returns (uint64 sequence) {\r\n        MessageKey[] memory messageKeys = new MessageKey[](1);\r\n        messageKeys[0] = transferUSDC(amount, targetChain, targetAddress);\r\n\r\n        bytes memory userPayload = abi.encode(amount, payload);\r\n        address defaultDeliveryProvider = wormholeRelayer\r\n            .getDefaultDeliveryProvider();\r\n\r\n        (uint256 cost, ) = wormholeRelayer.quoteEVMDeliveryPrice(\r\n            targetChain,\r\n            receiverValue,\r\n            gasLimit\r\n        );\r\n\r\n        sequence = wormholeRelayer.sendToEvm{value: cost}(\r\n            targetChain,\r\n            targetAddress,\r\n            userPayload,\r\n            receiverValue,\r\n            0,\r\n            gasLimit,\r\n            targetChain,\r\n            address(0x0),\r\n            defaultDeliveryProvider,\r\n            messageKeys,\r\n            CONSISTENCY_LEVEL_FINALIZED\r\n        );\r\n    }\r\n}\r\n\r\nabstract contract CCTPReceiver is CCTPBase {\r\n    function redeemUSDC(\r\n        bytes memory cctpMessage\r\n    ) internal returns (uint256 amount) {\r\n        (bytes memory message, bytes memory signature) = abi.decode(\r\n            cctpMessage,\r\n            (bytes, bytes)\r\n        );\r\n        uint256 beforeBalance = IERC20(USDC).balanceOf(address(this));\r\n        circleMessageTransmitter.receiveMessage(message, signature);\r\n        return IERC20(USDC).balanceOf(address(this)) - beforeBalance;\r\n    }\r\n\r\n    function receiveWormholeMessages(\r\n        bytes memory payload,\r\n        bytes[] memory additionalMessages,\r\n        bytes32 sourceAddress,\r\n        uint16 sourceChain,\r\n        bytes32 deliveryHash\r\n    ) external payable {\r\n        // Currently, 'sendUSDCWithPayloadToEVM' only sends one CCTP transfer\r\n        // That can be modified if the integrator desires to send multiple CCTP transfers\r\n        // in which case the following code would have to be modified to support\r\n        // redeeming these multiple transfers and checking that their 'amount's are accurate\r\n        require(\r\n            additionalMessages.length <= 1,\r\n            \"CCTP: At most one Message is supported\"\r\n        );\r\n\r\n        uint256 amountUSDCReceived;\r\n        if (additionalMessages.length == 1) {\r\n            amountUSDCReceived = redeemUSDC(additionalMessages[0]);\r\n        }\r\n\r\n        (uint256 amount, bytes memory userPayload) = abi.decode(\r\n            payload,\r\n            (uint256, bytes)\r\n        );\r\n\r\n        // Check that the correct amount was received\r\n        // It is important to verify that the 'USDC' sent in by the relayer is the same amount\r\n        // that the sender sent in on the source chain\r\n        require(amount == amountUSDCReceived, \"Wrong amount received\");\r\n\r\n        receivePayloadAndUSDC(\r\n            userPayload,\r\n            amountUSDCReceived,\r\n            sourceAddress,\r\n            sourceChain,\r\n            deliveryHash\r\n        );\r\n    }\r\n\r\n    // Implement this function to handle in-bound deliveries that include a CCTP transfer\r\n    function receivePayloadAndUSDC(\r\n        bytes memory payload,\r\n        uint256 amountUSDCReceived,\r\n        bytes32 sourceAddress,\r\n        uint16 sourceChain,\r\n        bytes32 deliveryHash\r\n    ) internal virtual {}\r\n}\r\n"
			},
			"BRIDGE_PARTNERSHIP/src/Base.sol": {
				"content": "pragma solidity ^0.8.13;\r\n\r\nimport \"./interfaces/IWormholeReceiver.sol\";\r\nimport \"./interfaces/IWormholeRelayer.sol\";\r\nimport \"./interfaces/IWormhole.sol\";\r\nimport \"./Utils.sol\";\r\n\r\nabstract contract Base {\r\n    IWormholeRelayer public wormholeRelayer;\r\n    IWormhole public wormhole;\r\n\r\n    address registrationOwner;\r\n    mapping(uint16 => bytes32) registeredSenders;\r\n\r\n    function _initBase(address _wormholeRelayer,address _wormhole) internal{\r\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\r\n        wormhole = IWormhole(_wormhole);\r\n        registrationOwner = msg.sender;\r\n    }\r\n\r\n    modifier onlyWormholeRelayer() {\r\n        require(\r\n            msg.sender == address(wormholeRelayer),\r\n            \"Msg.sender is not Wormhole Relayer\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isRegisteredSender(uint16 sourceChain, bytes32 sourceAddress) {\r\n        require(\r\n            registeredSenders[sourceChain] == sourceAddress,\r\n            \"Not registered sender\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Sets the registered address for 'sourceChain' to 'sourceAddress'\r\n     * So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid\r\n     *\r\n     * Assumes only one sender per chain is valid\r\n     * Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)\r\n     */\r\n    function setRegisteredSender(\r\n        uint16 sourceChain,\r\n        bytes32 sourceAddress\r\n    ) public {\r\n        require(\r\n            msg.sender == registrationOwner,\r\n            \"Not allowed to set registered sender\"\r\n        );\r\n        registeredSenders[sourceChain] = sourceAddress;\r\n    }\r\n}\r\n"
			},
			"BRIDGE_PARTNERSHIP/src/Utils.sol": {
				"content": "\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./interfaces/IWormholeRelayer.sol\";\r\n\r\nfunction toWormholeFormat(address addr) pure returns (bytes32) {\r\n    return bytes32(uint256(uint160(addr)));\r\n}\r\n\r\nfunction fromWormholeFormat(bytes32 whFormatAddress) pure returns (address) {\r\n    if (uint256(whFormatAddress) >> 160 != 0) {\r\n        revert NotAnEvmAddress(whFormatAddress);\r\n    }\r\n    return address(uint160(uint256(whFormatAddress)));\r\n}\r\n\r\nfunction addressToBytes32CCTP(address addr) pure returns (bytes32) {\r\n        return toWormholeFormat(addr);\r\n}"
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol": {
				"content": "/*\r\n * Copyright (c) 2022, Circle Internet Financial Limited.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IRelayer.sol\";\r\nimport \"./IReceiver.sol\";\r\n\r\n/**\r\n * @title IMessageTransmitter\r\n * @notice Interface for message transmitters, which both relay and receive messages.\r\n */\r\ninterface IMessageTransmitter is IRelayer, IReceiver {\r\n\r\n}\r\n"
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol": {
				"content": "\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITokenMessenger {\r\n   /**\r\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\r\n     * on the destination domain must be called by `destinationCaller`.\r\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\r\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\r\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\r\n     * Emits a `DepositForBurn` event.\r\n     * @dev reverts if:\r\n     * - given destinationCaller is zero address\r\n     * - given burnToken is not supported\r\n     * - given destinationDomain has no TokenMessenger registered\r\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\r\n     * to this contract is less than `amount`.\r\n     * - burn() reverts. For example, if `amount` is 0.\r\n     * - MessageTransmitter returns false or reverts.\r\n     * @param amount amount of tokens to burn\r\n     * @param destinationDomain destination domain\r\n     * @param mintRecipient address of mint recipient on destination domain\r\n     * @param burnToken address of contract to burn deposited tokens, on local domain\r\n     * @param destinationCaller caller on the destination domain, as bytes32\r\n     * @return nonce unique nonce reserved by message\r\n     */\r\n    function depositForBurnWithCaller(\r\n        uint256 amount,\r\n        uint32 destinationDomain,\r\n        bytes32 mintRecipient,\r\n        address burnToken,\r\n        bytes32 destinationCaller\r\n    ) external returns (uint64 nonce);\r\n}\r\n"
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n"
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol": {
				"content": "// SPDX-License-Identifier: Apache 2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title WormholeRelayer\r\n * @author\r\n * @notice This project allows developers to build cross-chain applications powered by Wormhole without needing to\r\n * write and run their own relaying infrastructure\r\n *\r\n * We implement the IWormholeRelayer interface that allows users to request a delivery provider to relay a payload (and/or additional messages)\r\n * to a chain and address of their choice.\r\n */\r\n\r\n/**\r\n * @notice VaaKey identifies a wormhole message\r\n *\r\n * @custom:member chainId Wormhole chain ID of the chain where this VAA was emitted from\r\n * @custom:member emitterAddress Address of the emitter of the VAA, in Wormhole bytes32 format\r\n * @custom:member sequence Sequence number of the VAA\r\n */\r\nstruct VaaKey {\r\n    uint16 chainId;\r\n    bytes32 emitterAddress;\r\n    uint64 sequence;\r\n}\r\n\r\n// 0-127 are reserved for standardized KeyTypes, 128-255 are for custom use\r\nuint8 constant VAA_KEY_TYPE = 1;\r\n\r\nstruct MessageKey {\r\n    uint8 keyType; // 0-127 are reserved for standardized KeyTypes, 128-255 are for custom use\r\n    bytes encodedKey;\r\n}\r\n\r\ninterface IWormholeRelayerBase {\r\n    event SendEvent(\r\n        uint64 indexed sequence,\r\n        uint256 deliveryQuote,\r\n        uint256 paymentForExtraReceiverValue\r\n    );\r\n\r\n    function getRegisteredWormholeRelayerContract(\r\n        uint16 chainId\r\n    ) external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice Returns true if a delivery has been attempted for the given deliveryHash\r\n     * Note: invalid deliveries where the tx reverts are not considered attempted\r\n     */\r\n    function deliveryAttempted(\r\n        bytes32 deliveryHash\r\n    ) external view returns (bool attempted);\r\n\r\n    /**\r\n     * @notice block number at which a delivery was successfully executed\r\n     */\r\n    function deliverySuccessBlock(\r\n        bytes32 deliveryHash\r\n    ) external view returns (uint256 blockNumber);\r\n\r\n    /**\r\n     * @notice block number of the latest attempt to execute a delivery that failed\r\n     */\r\n    function deliveryFailureBlock(\r\n        bytes32 deliveryHash\r\n    ) external view returns (uint256 blockNumber);\r\n}\r\n\r\n/**\r\n * @title IWormholeRelayerSend\r\n * @notice The interface to request deliveries\r\n */\r\ninterface IWormholeRelayerSend is IWormholeRelayerBase {\r\n    /**\r\n     * @notice Publishes an instruction for the default delivery provider\r\n     * to relay a payload to the address `targetAddress` on chain `targetChain`\r\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\r\n     *\r\n     * `targetAddress` must implement the IWormholeReceiver interface\r\n     *\r\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\r\n     *\r\n     * Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function\r\n     * with `refundChain` and `refundAddress` as parameters\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\r\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param gasLimit gas limit with which to call `targetAddress`.\r\n     * @return sequence sequence number of published VAA containing delivery instructions\r\n     */\r\n    function sendPayloadToEvm(\r\n        uint16 targetChain,\r\n        address targetAddress,\r\n        bytes memory payload,\r\n        uint256 receiverValue,\r\n        uint256 gasLimit\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Publishes an instruction for the default delivery provider\r\n     * to relay a payload to the address `targetAddress` on chain `targetChain`\r\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\r\n     *\r\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\r\n     * `targetAddress` must implement the IWormholeReceiver interface\r\n     *\r\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\r\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\r\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\r\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\r\n     * @param refundAddress The address on `refundChain` to deliver any refund to\r\n     * @return sequence sequence number of published VAA containing delivery instructions\r\n     */\r\n    function sendPayloadToEvm(\r\n        uint16 targetChain,\r\n        address targetAddress,\r\n        bytes memory payload,\r\n        uint256 receiverValue,\r\n        uint256 gasLimit,\r\n        uint16 refundChain,\r\n        address refundAddress\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Publishes an instruction for the default delivery provider\r\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\r\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\r\n     *\r\n     * `targetAddress` must implement the IWormholeReceiver interface\r\n     *\r\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\r\n     *\r\n     * Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function\r\n     * with `refundChain` and `refundAddress` as parameters\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\r\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param gasLimit gas limit with which to call `targetAddress`.\r\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\r\n     * @return sequence sequence number of published VAA containing delivery instructions\r\n     */\r\n    function sendVaasToEvm(\r\n        uint16 targetChain,\r\n        address targetAddress,\r\n        bytes memory payload,\r\n        uint256 receiverValue,\r\n        uint256 gasLimit,\r\n        VaaKey[] memory vaaKeys\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Publishes an instruction for the default delivery provider\r\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\r\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\r\n     *\r\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\r\n     * `targetAddress` must implement the IWormholeReceiver interface\r\n     *\r\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\r\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\r\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\r\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\r\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\r\n     * @param refundAddress The address on `refundChain` to deliver any refund to\r\n     * @return sequence sequence number of published VAA containing delivery instructions\r\n     */\r\n    function sendVaasToEvm(\r\n        uint16 targetChain,\r\n        address targetAddress,\r\n        bytes memory payload,\r\n        uint256 receiverValue,\r\n        uint256 gasLimit,\r\n        VaaKey[] memory vaaKeys,\r\n        uint16 refundChain,\r\n        address refundAddress\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\r\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\r\n     * with gas limit `gasLimit` and `msg.value` equal to\r\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\r\n     *\r\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\r\n     * `targetAddress` must implement the IWormholeReceiver interface\r\n     *\r\n     * This function must be called with `msg.value` equal to\r\n     * quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\r\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\r\n     *        (in addition to the `receiverValue` specified)\r\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\r\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\r\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\r\n     * @param refundAddress The address on `refundChain` to deliver any refund to\r\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\r\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\r\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\r\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\r\n     * @return sequence sequence number of published VAA containing delivery instructions\r\n     */\r\n    function sendToEvm(\r\n        uint16 targetChain,\r\n        address targetAddress,\r\n        bytes memory payload,\r\n        uint256 receiverValue,\r\n        uint256 paymentForExtraReceiverValue,\r\n        uint256 gasLimit,\r\n        uint16 refundChain,\r\n        address refundAddress,\r\n        address deliveryProviderAddress,\r\n        VaaKey[] memory vaaKeys,\r\n        uint8 consistencyLevel\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\r\n     * to relay a payload and external messages specified by `messageKeys` to the address `targetAddress` on chain `targetChain`\r\n     * with gas limit `gasLimit` and `msg.value` equal to\r\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\r\n     *\r\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\r\n     * `targetAddress` must implement the IWormholeReceiver interface\r\n     *\r\n     * This function must be called with `msg.value` equal to\r\n     * quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue\r\n     *\r\n     * Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected\r\n     * DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\r\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\r\n     *        (in addition to the `receiverValue` specified)\r\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\r\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\r\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\r\n     * @param refundAddress The address on `refundChain` to deliver any refund to\r\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\r\n     * @param messageKeys Additional messagess to pass in as parameter in call to `targetAddress`\r\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\r\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\r\n     * @return sequence sequence number of published VAA containing delivery instructions\r\n     */\r\n    function sendToEvm(\r\n        uint16 targetChain,\r\n        address targetAddress,\r\n        bytes memory payload,\r\n        uint256 receiverValue,\r\n        uint256 paymentForExtraReceiverValue,\r\n        uint256 gasLimit,\r\n        uint16 refundChain,\r\n        address refundAddress,\r\n        address deliveryProviderAddress,\r\n        MessageKey[] memory messageKeys,\r\n        uint8 consistencyLevel\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\r\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\r\n     * with `msg.value` equal to\r\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\r\n     *\r\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\r\n     * `targetAddress` must implement the IWormholeReceiver interface\r\n     *\r\n     * This function must be called with `msg.value` equal to\r\n     * quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\r\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\r\n     *        (in addition to the `receiverValue` specified)\r\n     * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\r\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\r\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\r\n     * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\r\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\r\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\r\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\r\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\r\n     * @return sequence sequence number of published VAA containing delivery instructions\r\n     */\r\n    function send(\r\n        uint16 targetChain,\r\n        bytes32 targetAddress,\r\n        bytes memory payload,\r\n        uint256 receiverValue,\r\n        uint256 paymentForExtraReceiverValue,\r\n        bytes memory encodedExecutionParameters,\r\n        uint16 refundChain,\r\n        bytes32 refundAddress,\r\n        address deliveryProviderAddress,\r\n        VaaKey[] memory vaaKeys,\r\n        uint8 consistencyLevel\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\r\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\r\n     * with `msg.value` equal to\r\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\r\n     *\r\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\r\n     * `targetAddress` must implement the IWormholeReceiver interface\r\n     *\r\n     * This function must be called with `msg.value` equal to\r\n     * quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue\r\n     *\r\n     * Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected\r\n     * DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\r\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\r\n     *        (in addition to the `receiverValue` specified)\r\n     * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\r\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\r\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\r\n     * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\r\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\r\n     * @param messageKeys Additional messagess to pass in as parameter in call to `targetAddress`\r\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\r\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\r\n     * @return sequence sequence number of published VAA containing delivery instructions\r\n     */\r\n    function send(\r\n        uint16 targetChain,\r\n        bytes32 targetAddress,\r\n        bytes memory payload,\r\n        uint256 receiverValue,\r\n        uint256 paymentForExtraReceiverValue,\r\n        bytes memory encodedExecutionParameters,\r\n        uint16 refundChain,\r\n        bytes32 refundAddress,\r\n        address deliveryProviderAddress,\r\n        MessageKey[] memory messageKeys,\r\n        uint8 consistencyLevel\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Requests a previously published delivery instruction to be redelivered\r\n     * (e.g. with a different delivery provider)\r\n     *\r\n     * This function must be called with `msg.value` equal to\r\n     * quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)\r\n     *\r\n     *  @notice *** This will only be able to succeed if the following is true **\r\n     *         - newGasLimit >= gas limit of the old instruction\r\n     *         - newReceiverValue >= receiver value of the old instruction\r\n     *         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\r\n     *\r\n     * @param deliveryVaaKey VaaKey identifying the wormhole message containing the\r\n     *        previously published delivery instructions\r\n     * @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\r\n     * @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param newGasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\r\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request\r\n     * @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\r\n     * @return sequence sequence number of published VAA containing redelivery instructions\r\n     *\r\n     * @notice *** This will only be able to succeed if the following is true **\r\n     *         - newGasLimit >= gas limit of the old instruction\r\n     *         - newReceiverValue >= receiver value of the old instruction\r\n     */\r\n    function resendToEvm(\r\n        VaaKey memory deliveryVaaKey,\r\n        uint16 targetChain,\r\n        uint256 newReceiverValue,\r\n        uint256 newGasLimit,\r\n        address newDeliveryProviderAddress\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Requests a previously published delivery instruction to be redelivered\r\n     *\r\n     *\r\n     * This function must be called with `msg.value` equal to\r\n     * quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)\r\n     *\r\n     * @param deliveryVaaKey VaaKey identifying the wormhole message containing the\r\n     *        previously published delivery instructions\r\n     * @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\r\n     * @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param newEncodedExecutionParameters new encoded information on how to execute delivery that may impact pricing\r\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\r\n     * @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\r\n     * @return sequence sequence number of published VAA containing redelivery instructions\r\n     *\r\n     *  @notice *** This will only be able to succeed if the following is true **\r\n     *         - (For EVM_V1) newGasLimit >= gas limit of the old instruction\r\n     *         - newReceiverValue >= receiver value of the old instruction\r\n     *         - (For EVM_V1) newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\r\n     */\r\n    function resend(\r\n        VaaKey memory deliveryVaaKey,\r\n        uint16 targetChain,\r\n        uint256 newReceiverValue,\r\n        bytes memory newEncodedExecutionParameters,\r\n        address newDeliveryProviderAddress\r\n    ) external payable returns (uint64 sequence);\r\n\r\n    /**\r\n     * @notice Returns the price to request a relay to chain `targetChain`, using the default delivery provider\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param gasLimit gas limit with which to call `targetAddress`.\r\n     * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\r\n     * @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\r\n     *         if a refundAddress is specified.\r\n     *         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a\r\n     *         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.\r\n     *         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain.\r\n     */\r\n    function quoteEVMDeliveryPrice(\r\n        uint16 targetChain,\r\n        uint256 receiverValue,\r\n        uint256 gasLimit\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 nativePriceQuote,\r\n            uint256 targetChainRefundPerGasUnused\r\n        );\r\n\r\n    /**\r\n     * @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param gasLimit gas limit with which to call `targetAddress`.\r\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\r\n     * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\r\n     * @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\r\n     *         if a refundAddress is specified\r\n     *         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a\r\n     *         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.\r\n     *         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain.\r\n     */\r\n    function quoteEVMDeliveryPrice(\r\n        uint16 targetChain,\r\n        uint256 receiverValue,\r\n        uint256 gasLimit,\r\n        address deliveryProviderAddress\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 nativePriceQuote,\r\n            uint256 targetChainRefundPerGasUnused\r\n        );\r\n\r\n    /**\r\n     * @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\r\n     * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\r\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\r\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\r\n     * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\r\n     * @return encodedExecutionInfo encoded information on how the delivery will be executed\r\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`\r\n     *             (which is the amount of target chain currency that will be refunded per unit of gas unused,\r\n     *              if a refundAddress is specified)\r\n     */\r\n    function quoteDeliveryPrice(\r\n        uint16 targetChain,\r\n        uint256 receiverValue,\r\n        bytes memory encodedExecutionParameters,\r\n        address deliveryProviderAddress\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 nativePriceQuote, bytes memory encodedExecutionInfo);\r\n\r\n    /**\r\n     * @notice Returns the (extra) amount of target chain currency that `targetAddress`\r\n     * will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`\r\n     *\r\n     * @param targetChain in Wormhole Chain ID format\r\n     * @param currentChainAmount The value that `paymentForExtraReceiverValue` will be set to\r\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\r\n     * @return targetChainAmount The amount such that if `targetAddress` will be called with `msg.value` equal to\r\n     *         receiverValue + targetChainAmount\r\n     */\r\n    function quoteNativeForChain(\r\n        uint16 targetChain,\r\n        uint256 currentChainAmount,\r\n        address deliveryProviderAddress\r\n    ) external view returns (uint256 targetChainAmount);\r\n\r\n    /**\r\n     * @notice Returns the address of the current default delivery provider\r\n     * @return deliveryProvider The address of (the default delivery provider)'s contract on this source\r\n     *   chain. This must be a contract that implements IDeliveryProvider.\r\n     */\r\n    function getDefaultDeliveryProvider()\r\n        external\r\n        view\r\n        returns (address deliveryProvider);\r\n}\r\n\r\n/**\r\n * @title IWormholeRelayerDelivery\r\n * @notice The interface to execute deliveries. Only relevant for Delivery Providers\r\n */\r\ninterface IWormholeRelayerDelivery is IWormholeRelayerBase {\r\n    enum DeliveryStatus {\r\n        SUCCESS,\r\n        RECEIVER_FAILURE\r\n    }\r\n\r\n    enum RefundStatus {\r\n        REFUND_SENT,\r\n        REFUND_FAIL,\r\n        CROSS_CHAIN_REFUND_SENT,\r\n        CROSS_CHAIN_REFUND_FAIL_PROVIDER_NOT_SUPPORTED,\r\n        CROSS_CHAIN_REFUND_FAIL_NOT_ENOUGH,\r\n        NO_REFUND_REQUESTED\r\n    }\r\n\r\n    /**\r\n     * @custom:member recipientContract - The target contract address\r\n     * @custom:member sourceChain - The chain which this delivery was requested from (in wormhole\r\n     *     ChainID format)\r\n     * @custom:member sequence - The wormhole sequence number of the delivery VAA on the source chain\r\n     *     corresponding to this delivery request\r\n     * @custom:member deliveryVaaHash - The hash of the delivery VAA corresponding to this delivery\r\n     *     request\r\n     * @custom:member gasUsed - The amount of gas that was used to call your target contract\r\n     * @custom:member status:\r\n     *   - RECEIVER_FAILURE, if the target contract reverts\r\n     *   - SUCCESS, if the target contract doesn't revert\r\n     * @custom:member additionalStatusInfo:\r\n     *   - If status is SUCCESS, then this is empty.\r\n     *   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the\r\n     *       return data (i.e. potentially truncated revert reason information).\r\n     * @custom:member refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for\r\n     *     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,\r\n     *     where a cross chain refund is necessary, or if the default code path is used where no refund is requested (NO_REFUND_REQUESTED)\r\n     * @custom:member overridesInfo:\r\n     *   - If not an override: empty bytes array\r\n     *   - Otherwise: An encoded `DeliveryOverride`\r\n     */\r\n    event Delivery(\r\n        address indexed recipientContract,\r\n        uint16 indexed sourceChain,\r\n        uint64 indexed sequence,\r\n        bytes32 deliveryVaaHash,\r\n        DeliveryStatus status,\r\n        uint256 gasUsed,\r\n        RefundStatus refundStatus,\r\n        bytes additionalStatusInfo,\r\n        bytes overridesInfo\r\n    );\r\n\r\n    /**\r\n     * @notice The delivery provider calls `deliver` to relay messages as described by one delivery instruction\r\n     *\r\n     * The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain\r\n     * as well as the signed wormhole message with the delivery instructions (the delivery VAA)\r\n     *\r\n     * The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met:\r\n     * - the delivery VAA has a valid signature\r\n     * - the delivery VAA's emitter is one of these WormholeRelayer contracts\r\n     * - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund)\r\n     * - the instruction's target chain is this chain\r\n     * - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)\r\n     *\r\n     * @param encodedVMs - An array of signed wormhole messages (all from the same source chain\r\n     *     transaction)\r\n     * @param encodedDeliveryVAA - Signed wormhole message from the source chain's WormholeRelayer\r\n     *     contract with payload being the encoded delivery instruction container\r\n     * @param relayerRefundAddress - The address to which any refunds to the delivery provider\r\n     *     should be sent\r\n     * @param deliveryOverrides - Optional overrides field which must be either an empty bytes array or\r\n     *     an encoded DeliveryOverride struct\r\n     */\r\n    function deliver(\r\n        bytes[] memory encodedVMs,\r\n        bytes memory encodedDeliveryVAA,\r\n        address payable relayerRefundAddress,\r\n        bytes memory deliveryOverrides\r\n    ) external payable;\r\n}\r\n\r\ninterface IWormholeRelayer is IWormholeRelayerDelivery, IWormholeRelayerSend {}\r\n\r\n/*\r\n *  Errors thrown by IWormholeRelayer contract\r\n */\r\n\r\n// Bound chosen by the following formula: `memoryWord * 4 + selectorSize`.\r\n// This means that an error identifier plus four fixed size arguments should be available to developers.\r\n// In the case of a `require` revert with error message, this should provide 2 memory word's worth of data.\r\nuint256 constant RETURNDATA_TRUNCATION_THRESHOLD = 132;\r\n\r\n//When msg.value was not equal to `delivery provider's quoted delivery price` + `paymentForExtraReceiverValue`\r\nerror InvalidMsgValue(uint256 msgValue, uint256 totalFee);\r\n\r\nerror RequestedGasLimitTooLow();\r\n\r\nerror DeliveryProviderDoesNotSupportTargetChain(\r\n    address relayer,\r\n    uint16 chainId\r\n);\r\nerror DeliveryProviderCannotReceivePayment();\r\nerror DeliveryProviderDoesNotSupportMessageKeyType(uint8 keyType);\r\n\r\n//When calling `delivery()` a second time even though a delivery is already in progress\r\nerror ReentrantDelivery(address msgSender, address lockedBy);\r\n\r\nerror InvalidPayloadId(uint8 parsed, uint8 expected);\r\nerror InvalidPayloadLength(uint256 received, uint256 expected);\r\nerror InvalidVaaKeyType(uint8 parsed);\r\nerror TooManyMessageKeys(uint256 numMessageKeys);\r\n\r\nerror InvalidDeliveryVaa(string reason);\r\n//When the delivery VAA (signed wormhole message with delivery instructions) was not emitted by the\r\n//  registered WormholeRelayer contract\r\nerror InvalidEmitter(bytes32 emitter, bytes32 registered, uint16 chainId);\r\nerror MessageKeysLengthDoesNotMatchMessagesLength(uint256 keys, uint256 vaas);\r\nerror VaaKeysDoNotMatchVaas(uint8 index);\r\n//When someone tries to call an external function of the WormholeRelayer that is only intended to be\r\n//  called by the WormholeRelayer itself (to allow retroactive reverts for atomicity)\r\nerror RequesterNotWormholeRelayer();\r\n\r\n//When trying to relay a `DeliveryInstruction` to any other chain but the one it was specified for\r\nerror TargetChainIsNotThisChain(uint16 targetChain);\r\n//When a `DeliveryOverride` contains a gas limit that's less than the original\r\nerror InvalidOverrideGasLimit();\r\n//When a `DeliveryOverride` contains a receiver value that's less than the original\r\nerror InvalidOverrideReceiverValue();\r\n//When a `DeliveryOverride` contains a 'refund per unit of gas unused' that's less than the original\r\nerror InvalidOverrideRefundPerGasUnused();\r\n\r\n//When the delivery provider doesn't pass in sufficient funds (i.e. msg.value does not cover the\r\n// maximum possible refund to the user)\r\nerror InsufficientRelayerFunds(uint256 msgValue, uint256 minimum);\r\n\r\n//When a bytes32 field can't be converted into a 20 byte EVM address, because the 12 padding bytes\r\n//  are non-zero (duplicated from Utils.sol)\r\nerror NotAnEvmAddress(bytes32);\r\n"
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol": {
				"content": "// SPDX-License-Identifier: Apache 2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @notice Interface for a contract which can receive Wormhole messages.\r\n */\r\ninterface IWormholeReceiver {\r\n    /**\r\n     * @notice When a `send` is performed with this contract as the target, this function will be\r\n     *     invoked by the WormholeRelayer contract\r\n     *\r\n     * NOTE: This function should be restricted such that only the Wormhole Relayer contract can call it.\r\n     *\r\n     * We also recommend that this function checks that `sourceChain` and `sourceAddress` are indeed who\r\n     *       you expect to have requested the calling of `send` on the source chain\r\n     *\r\n     * The invocation of this function corresponding to the `send` request will have msg.value equal\r\n     *   to the receiverValue specified in the send request.\r\n     *\r\n     * If the invocation of this function reverts or exceeds the gas limit\r\n     *   specified by the send requester, this delivery will result in a `ReceiverFailure`.\r\n     *\r\n     * @param payload - an arbitrary message which was included in the delivery by the\r\n     *     requester. This message's signature will already have been verified (as long as msg.sender is the Wormhole Relayer contract)\r\n     * @param additionalMessages - Additional messages which were requested to be included in this delivery.\r\n     *      Note: There are no contract-level guarantees that the messages in this array are what was requested\r\n     *      so **you should verify any sensitive information given here!**\r\n     *\r\n     *      For example, if a 'VaaKey' was specified on the source chain, then MAKE SURE the corresponding message here\r\n     *      has valid signatures (by calling `parseAndVerifyVM(message)` on the Wormhole core contract)\r\n     *\r\n     *      This field can be used to perform and relay TokenBridge or CCTP transfers, and there are example\r\n     *      usages of this at\r\n     *         https://github.com/wormhole-foundation/hello-token\r\n     *         https://github.com/wormhole-foundation/hello-cctp\r\n     *\r\n     * @param sourceAddress - the (wormhole format) address on the sending chain which requested\r\n     *     this delivery.\r\n     * @param sourceChain - the wormhole chain ID where this delivery was requested.\r\n     * @param deliveryHash - the VAA hash of the deliveryVAA.\r\n     *\r\n     */\r\n    function receiveWormholeMessages(\r\n        bytes memory payload,\r\n        bytes[] memory additionalMessages,\r\n        bytes32 sourceAddress,\r\n        uint16 sourceChain,\r\n        bytes32 deliveryHash\r\n    ) external payable;\r\n}\r\n"
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol": {
				"content": "/*\r\n * Copyright (c) 2022, Circle Internet Financial Limited.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title IReceiver\r\n * @notice Receives messages on destination chain and forwards them to IMessageDestinationHandler\r\n */\r\ninterface IReceiver {\r\n    /**\r\n     * @notice Receives an incoming message, validating the header and passing\r\n     * the body to application-specific handler.\r\n     * @param message The message raw bytes\r\n     * @param signature The message signature\r\n     * @return success bool, true if successful\r\n     */\r\n    function receiveMessage(bytes calldata message, bytes calldata signature)\r\n        external\r\n        returns (bool success);\r\n}\r\n"
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol": {
				"content": "/*\r\n * Copyright (c) 2022, Circle Internet Financial Limited.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title IRelayer\r\n * @notice Sends messages from source domain to destination domain\r\n */\r\ninterface IRelayer {\r\n    /**\r\n     * @notice Sends an outgoing message from the source domain.\r\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\r\n     * @param destinationDomain Domain of destination chain\r\n     * @param recipient Address of message recipient on destination domain as bytes32\r\n     * @param messageBody Raw bytes content of message\r\n     * @return nonce reserved by message\r\n     */\r\n    function sendMessage(\r\n        uint32 destinationDomain,\r\n        bytes32 recipient,\r\n        bytes calldata messageBody\r\n    ) external returns (uint64);\r\n\r\n    /**\r\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\r\n     * destination domain.\r\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\r\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\r\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\r\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\r\n     * @param destinationDomain Domain of destination chain\r\n     * @param recipient Address of message recipient on destination domain as bytes32\r\n     * @param destinationCaller caller on the destination domain, as bytes32\r\n     * @param messageBody Raw bytes content of message\r\n     * @return nonce reserved by message\r\n     */\r\n    function sendMessageWithCaller(\r\n        uint32 destinationDomain,\r\n        bytes32 recipient,\r\n        bytes32 destinationCaller,\r\n        bytes calldata messageBody\r\n    ) external returns (uint64);\r\n\r\n    /**\r\n     * @notice Replace a message with a new message body and/or destination caller.\r\n     * @dev The `originalAttestation` must be a valid attestation of `originalMessage`.\r\n     * @param originalMessage original message to replace\r\n     * @param originalAttestation attestation of `originalMessage`\r\n     * @param newMessageBody new message body of replaced message\r\n     * @param newDestinationCaller the new destination caller\r\n     */\r\n    function replaceMessage(\r\n        bytes calldata originalMessage,\r\n        bytes calldata originalAttestation,\r\n        bytes calldata newMessageBody,\r\n        bytes32 newDestinationCaller\r\n    ) external;\r\n}\r\n"
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol": {
				"content": "// contracts/Messages.sol\r\n// SPDX-License-Identifier: Apache 2\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWormhole {\r\n    struct GuardianSet {\r\n        address[] keys;\r\n        uint32 expirationTime;\r\n    }\r\n\r\n    struct Signature {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        uint8 guardianIndex;\r\n    }\r\n\r\n    struct VM {\r\n        uint8 version;\r\n        uint32 timestamp;\r\n        uint32 nonce;\r\n        uint16 emitterChainId;\r\n        bytes32 emitterAddress;\r\n        uint64 sequence;\r\n        uint8 consistencyLevel;\r\n        bytes payload;\r\n        uint32 guardianSetIndex;\r\n        Signature[] signatures;\r\n        bytes32 hash;\r\n    }\r\n\r\n    struct ContractUpgrade {\r\n        bytes32 module;\r\n        uint8 action;\r\n        uint16 chain;\r\n        address newContract;\r\n    }\r\n\r\n    struct GuardianSetUpgrade {\r\n        bytes32 module;\r\n        uint8 action;\r\n        uint16 chain;\r\n        GuardianSet newGuardianSet;\r\n        uint32 newGuardianSetIndex;\r\n    }\r\n\r\n    struct SetMessageFee {\r\n        bytes32 module;\r\n        uint8 action;\r\n        uint16 chain;\r\n        uint256 messageFee;\r\n    }\r\n\r\n    struct TransferFees {\r\n        bytes32 module;\r\n        uint8 action;\r\n        uint16 chain;\r\n        uint256 amount;\r\n        bytes32 recipient;\r\n    }\r\n\r\n    struct RecoverChainId {\r\n        bytes32 module;\r\n        uint8 action;\r\n        uint256 evmChainId;\r\n        uint16 newChainId;\r\n    }\r\n\r\n    event LogMessagePublished(\r\n        address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel\r\n    );\r\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\r\n    event GuardianSetAdded(uint32 indexed index);\r\n\r\n    function publishMessage(uint32 nonce, bytes memory payload, uint8 consistencyLevel)\r\n        external\r\n        payable\r\n        returns (uint64 sequence);\r\n\r\n    function initialize() external;\r\n\r\n    function parseAndVerifyVM(bytes calldata encodedVM)\r\n        external\r\n        view\r\n        returns (VM memory vm, bool valid, string memory reason);\r\n\r\n    function verifyVM(VM memory vm) external view returns (bool valid, string memory reason);\r\n\r\n    function verifySignatures(bytes32 hash, Signature[] memory signatures, GuardianSet memory guardianSet)\r\n        external\r\n        pure\r\n        returns (bool valid, string memory reason);\r\n\r\n    function parseVM(bytes memory encodedVM) external pure returns (VM memory vm);\r\n\r\n    function quorum(uint256 numGuardians) external pure returns (uint256 numSignaturesRequiredForQuorum);\r\n\r\n    function getGuardianSet(uint32 index) external view returns (GuardianSet memory);\r\n\r\n    function getCurrentGuardianSetIndex() external view returns (uint32);\r\n\r\n    function getGuardianSetExpiry() external view returns (uint32);\r\n\r\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\r\n\r\n    function isInitialized(address impl) external view returns (bool);\r\n\r\n    function chainId() external view returns (uint16);\r\n\r\n    function isFork() external view returns (bool);\r\n\r\n    function governanceChainId() external view returns (uint16);\r\n\r\n    function governanceContract() external view returns (bytes32);\r\n\r\n    function messageFee() external view returns (uint256);\r\n\r\n    function evmChainId() external view returns (uint256);\r\n\r\n    function nextSequence(address emitter) external view returns (uint64);\r\n\r\n    function parseContractUpgrade(bytes memory encodedUpgrade) external pure returns (ContractUpgrade memory cu);\r\n\r\n    function parseGuardianSetUpgrade(bytes memory encodedUpgrade)\r\n        external\r\n        pure\r\n        returns (GuardianSetUpgrade memory gsu);\r\n\r\n    function parseSetMessageFee(bytes memory encodedSetMessageFee) external pure returns (SetMessageFee memory smf);\r\n\r\n    function parseTransferFees(bytes memory encodedTransferFees) external pure returns (TransferFees memory tf);\r\n\r\n    function parseRecoverChainId(bytes memory encodedRecoverChainId)\r\n        external\r\n        pure\r\n        returns (RecoverChainId memory rci);\r\n\r\n    function submitContractUpgrade(bytes memory _vm) external;\r\n\r\n    function submitSetMessageFee(bytes memory _vm) external;\r\n\r\n    function submitNewGuardianSet(bytes memory _vm) external;\r\n\r\n    function submitTransferFees(bytes memory _vm) external;\r\n\r\n    function submitRecoverChainId(bytes memory _vm) external;\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"BRIDGE_PARTNERSHIP/src/Base.sol": {
				"Base": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "sourceChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "sourceAddress",
									"type": "bytes32"
								}
							],
							"name": "setRegisteredSender",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wormhole",
							"outputs": [
								{
									"internalType": "contract IWormhole",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wormholeRelayer",
							"outputs": [
								{
									"internalType": "contract IWormholeRelayer",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"setRegisteredSender(uint16,bytes32)": "dd12d68b",
							"wormhole()": "84acd1bb",
							"wormholeRelayer()": "da25b725"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"}],\"name\":\"setRegisteredSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeRelayer\",\"outputs\":[{\"internalType\":\"contract IWormholeRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRegisteredSender(uint16,bytes32)\":{\"notice\":\"Sets the registered address for 'sourceChain' to 'sourceAddress' So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid Assumes only one sender per chain is valid Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/Base.sol\":\"Base\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/Base.sol\":{\"keccak256\":\"0x249d3dcd47a4f9183fa6aff8f1c75956cf54c217481177725ff2fd93f49c59c3\",\"urls\":[\"bzz-raw://aa0ceb0ac96ace95d5bbfc369577baec10d02ba33b514d10b868b8f48c2e0b0a\",\"dweb:/ipfs/QmWPeQGpcu7SvzHmEnLybwJ6pGwzARKDpQYxVRbopRHK1o\"]},\"BRIDGE_PARTNERSHIP/src/Utils.sol\":{\"keccak256\":\"0x2cfbe9804905a7ed86586add8316eed5b56421ed9d06637638448c19d85a9b0c\",\"urls\":[\"bzz-raw://abf5bf5f020206721a087d5c184fe7184d1f6709f98aca9fd8222e5c73a5d659\",\"dweb:/ipfs/QmdjQPtSXYgvEWRb74C5Tg56961PbmkvRo2NdUFPqLTdBB\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol\":{\"keccak256\":\"0x9256fa479ecc3f4dc17b2860230ce6d658858262bee1dbabd654208381227d0d\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://521d895f44fe73b39cff8183d6e8a6a23e8cc3336fc3e1874ad798b9803b390b\",\"dweb:/ipfs/Qmdcw3Af8FcwgXUEWFcvwFKZ3B4d2dzWosUorrSLAnfN2Y\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol\":{\"keccak256\":\"0x5e492d502a4be6633cab7c4d0f65c1c90fef2f05a4fd591de896ef3c6d7794cf\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://509831b21b066d67c75423cad68420946970f44581e540afa11b6678c68f7d17\",\"dweb:/ipfs/QmaWTnPcSVPq9c44V1ZdsBX8P1a6qjJst3Vy7oNcuAgBs6\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":{\"keccak256\":\"0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af\",\"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "BRIDGE_PARTNERSHIP/src/Base.sol:Base",
								"label": "wormholeRelayer",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(IWormholeRelayer)1484"
							},
							{
								"astId": 11,
								"contract": "BRIDGE_PARTNERSHIP/src/Base.sol:Base",
								"label": "wormhole",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IWormhole)1050"
							},
							{
								"astId": 13,
								"contract": "BRIDGE_PARTNERSHIP/src/Base.sol:Base",
								"label": "registrationOwner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 17,
								"contract": "BRIDGE_PARTNERSHIP/src/Base.sol:Base",
								"label": "registeredSenders",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_uint16,t_bytes32)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(IWormhole)1050": {
								"encoding": "inplace",
								"label": "contract IWormhole",
								"numberOfBytes": "20"
							},
							"t_contract(IWormholeRelayer)1484": {
								"encoding": "inplace",
								"label": "contract IWormholeRelayer",
								"numberOfBytes": "20"
							},
							"t_mapping(t_uint16,t_bytes32)": {
								"encoding": "mapping",
								"key": "t_uint16",
								"label": "mapping(uint16 => bytes32)",
								"numberOfBytes": "32",
								"value": "t_bytes32"
							},
							"t_uint16": {
								"encoding": "inplace",
								"label": "uint16",
								"numberOfBytes": "2"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"setRegisteredSender(uint16,bytes32)": {
								"notice": "Sets the registered address for 'sourceChain' to 'sourceAddress' So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid Assumes only one sender per chain is valid Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)"
							}
						},
						"version": 1
					}
				}
			},
			"BRIDGE_PARTNERSHIP/src/CCTPBase.sol": {
				"CCTPBase": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "sourceChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "sourceAddress",
									"type": "bytes32"
								}
							],
							"name": "setRegisteredSender",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wormhole",
							"outputs": [
								{
									"internalType": "contract IWormhole",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wormholeRelayer",
							"outputs": [
								{
									"internalType": "contract IWormholeRelayer",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"setRegisteredSender(uint16,bytes32)": "dd12d68b",
							"wormhole()": "84acd1bb",
							"wormholeRelayer()": "da25b725"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"}],\"name\":\"setRegisteredSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeRelayer\",\"outputs\":[{\"internalType\":\"contract IWormholeRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRegisteredSender(uint16,bytes32)\":{\"notice\":\"Sets the registered address for 'sourceChain' to 'sourceAddress' So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid Assumes only one sender per chain is valid Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":\"CCTPBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/Base.sol\":{\"keccak256\":\"0x249d3dcd47a4f9183fa6aff8f1c75956cf54c217481177725ff2fd93f49c59c3\",\"urls\":[\"bzz-raw://aa0ceb0ac96ace95d5bbfc369577baec10d02ba33b514d10b868b8f48c2e0b0a\",\"dweb:/ipfs/QmWPeQGpcu7SvzHmEnLybwJ6pGwzARKDpQYxVRbopRHK1o\"]},\"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":{\"keccak256\":\"0xb0cb70d96d3c57421feca6842eab200246abcfcd1da1d53003449c9f517b9b36\",\"urls\":[\"bzz-raw://b12d2fa5425eaf7bfb6d5c7c2f949dbd50c11939f4636a64cd1b440ab4010999\",\"dweb:/ipfs/QmZZoGiQPRTCZtmjxsTzcd55wCkiriPiBPFU911XP3536i\"]},\"BRIDGE_PARTNERSHIP/src/Utils.sol\":{\"keccak256\":\"0x2cfbe9804905a7ed86586add8316eed5b56421ed9d06637638448c19d85a9b0c\",\"urls\":[\"bzz-raw://abf5bf5f020206721a087d5c184fe7184d1f6709f98aca9fd8222e5c73a5d659\",\"dweb:/ipfs/QmdjQPtSXYgvEWRb74C5Tg56961PbmkvRo2NdUFPqLTdBB\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol\":{\"keccak256\":\"0xc1551a0378325853216cc7e5f3ab22954cb0b411b83221a66e92a36c19442c47\",\"urls\":[\"bzz-raw://ff2d7c07ee8da54cdadbac59fcfe959b5409918ff1ed9ff068f35c728d581dc1\",\"dweb:/ipfs/QmYuDBQxHYbwAbUQcGT6kRqTnSfatcAhXEWBXJfm3ghBsg\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol\":{\"keccak256\":\"0xc0e1ae6b294cd6f6b2ce6185f4856a54c3f8b66f07cc0944b923db44efa8b286\",\"urls\":[\"bzz-raw://ac7be5f0311f28a5e830f806bcf69e566e72b18491c5ad126464ceb9fd31dc55\",\"dweb:/ipfs/QmaKSBuABhRzF3t51yHKb9jVzzia9Y5gNFfS4u4reSMkLD\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol\":{\"keccak256\":\"0x5772f5f420a80b366754817089d56e12b504535deeedfad4e7403f3ca508ead0\",\"urls\":[\"bzz-raw://d9aaa08e6fdfd5253000ef7644f5fb7e9ed7a18ebb0989731bf828b4b5b44a1e\",\"dweb:/ipfs/QmNvipZ7DM8XvmYRfr8nD9MyvoqAdQDQjM9wiqfZnDbWtN\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol\":{\"keccak256\":\"0x2ab7696fa8b684863a088ded6251035a87a288737f6621730991a38dc303236c\",\"urls\":[\"bzz-raw://c47386479f378b8da3eb6c5254dd31b6657986c0fb668d27512a9cd8403cf562\",\"dweb:/ipfs/QmUWQ95zVef9LHUfG4iurtjurVfW2TdQB7m41NopaQNNgY\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x206e252911fb60d0d6a54fb657b64344c33fa237ddb8553aa668a24d1856a7c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cb73e8c2fd4ab43f4ed672a19fd7629fc169034dc461524bebd67d9fe9bb000\",\"dweb:/ipfs/Qmd9wCoy5gDduquSq7po6uNFx9W28zS5drXXErDnN24aNZ\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol\":{\"keccak256\":\"0x9256fa479ecc3f4dc17b2860230ce6d658858262bee1dbabd654208381227d0d\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://521d895f44fe73b39cff8183d6e8a6a23e8cc3336fc3e1874ad798b9803b390b\",\"dweb:/ipfs/Qmdcw3Af8FcwgXUEWFcvwFKZ3B4d2dzWosUorrSLAnfN2Y\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol\":{\"keccak256\":\"0x5e492d502a4be6633cab7c4d0f65c1c90fef2f05a4fd591de896ef3c6d7794cf\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://509831b21b066d67c75423cad68420946970f44581e540afa11b6678c68f7d17\",\"dweb:/ipfs/QmaWTnPcSVPq9c44V1ZdsBX8P1a6qjJst3Vy7oNcuAgBs6\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":{\"keccak256\":\"0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af\",\"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPBase",
								"label": "wormholeRelayer",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(IWormholeRelayer)1484"
							},
							{
								"astId": 11,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPBase",
								"label": "wormhole",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IWormhole)1050"
							},
							{
								"astId": 13,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPBase",
								"label": "registrationOwner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 17,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPBase",
								"label": "registeredSenders",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_uint16,t_bytes32)"
							},
							{
								"astId": 127,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPBase",
								"label": "circleTokenMessenger",
								"offset": 0,
								"slot": "4",
								"type": "t_contract(ITokenMessenger)656"
							},
							{
								"astId": 130,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPBase",
								"label": "circleMessageTransmitter",
								"offset": 0,
								"slot": "5",
								"type": "t_contract(IMessageTransmitter)581"
							},
							{
								"astId": 132,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPBase",
								"label": "USDC",
								"offset": 0,
								"slot": "6",
								"type": "t_address"
							},
							{
								"astId": 134,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPBase",
								"label": "cctpConfigurationOwner",
								"offset": 0,
								"slot": "7",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(IMessageTransmitter)581": {
								"encoding": "inplace",
								"label": "contract IMessageTransmitter",
								"numberOfBytes": "20"
							},
							"t_contract(ITokenMessenger)656": {
								"encoding": "inplace",
								"label": "contract ITokenMessenger",
								"numberOfBytes": "20"
							},
							"t_contract(IWormhole)1050": {
								"encoding": "inplace",
								"label": "contract IWormhole",
								"numberOfBytes": "20"
							},
							"t_contract(IWormholeRelayer)1484": {
								"encoding": "inplace",
								"label": "contract IWormholeRelayer",
								"numberOfBytes": "20"
							},
							"t_mapping(t_uint16,t_bytes32)": {
								"encoding": "mapping",
								"key": "t_uint16",
								"label": "mapping(uint16 => bytes32)",
								"numberOfBytes": "32",
								"value": "t_bytes32"
							},
							"t_uint16": {
								"encoding": "inplace",
								"label": "uint16",
								"numberOfBytes": "2"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"setRegisteredSender(uint16,bytes32)": {
								"notice": "Sets the registered address for 'sourceChain' to 'sourceAddress' So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid Assumes only one sender per chain is valid Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)"
							}
						},
						"version": 1
					}
				},
				"CCTPMessageLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":339:1040  library CCTPMessageLib {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":339:1040  library CCTPMessageLib {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220200eab37c312698976ab02c41f3b38fee37e47355e8dc0fbbb67336f7bd2af3a64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220200eab37c312698976ab02c41f3b38fee37e47355e8dc0fbbb67336f7bd2af3a64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 0xE 0xAB CALLDATACOPY 0xC3 SLT PUSH10 0x8976AB02C41F3B38FEE3 PUSH31 0x47355E8DC0FBBB67336F7BD2AF3A64736F6C63430008140033000000000000 ",
							"sourceMap": "339:701:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;339:701:1;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220200eab37c312698976ab02c41f3b38fee37e47355e8dc0fbbb67336f7bd2af3a64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 0xE 0xAB CALLDATACOPY 0xC3 SLT PUSH10 0x8976AB02C41F3B38FEE3 PUSH31 0x47355E8DC0FBBB67336F7BD2AF3A64736F6C63430008140033000000000000 ",
							"sourceMap": "339:701:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 339,
									"end": 1040,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220200eab37c312698976ab02c41f3b38fee37e47355e8dc0fbbb67336f7bd2af3a64736f6c63430008140033",
									".code": [
										{
											"begin": 339,
											"end": 1040,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 339,
											"end": 1040,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 339,
											"end": 1040,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 339,
											"end": 1040,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 339,
											"end": 1040,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 339,
											"end": 1040,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 339,
											"end": 1040,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 339,
											"end": 1040,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 339,
											"end": 1040,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"BRIDGE_PARTNERSHIP/src/Base.sol",
								"BRIDGE_PARTNERSHIP/src/CCTPBase.sol",
								"BRIDGE_PARTNERSHIP/src/Utils.sol",
								"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol",
								"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol",
								"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol",
								"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol",
								"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol",
								"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol",
								"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol",
								"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":\"CCTPMessageLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/Base.sol\":{\"keccak256\":\"0x249d3dcd47a4f9183fa6aff8f1c75956cf54c217481177725ff2fd93f49c59c3\",\"urls\":[\"bzz-raw://aa0ceb0ac96ace95d5bbfc369577baec10d02ba33b514d10b868b8f48c2e0b0a\",\"dweb:/ipfs/QmWPeQGpcu7SvzHmEnLybwJ6pGwzARKDpQYxVRbopRHK1o\"]},\"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":{\"keccak256\":\"0xb0cb70d96d3c57421feca6842eab200246abcfcd1da1d53003449c9f517b9b36\",\"urls\":[\"bzz-raw://b12d2fa5425eaf7bfb6d5c7c2f949dbd50c11939f4636a64cd1b440ab4010999\",\"dweb:/ipfs/QmZZoGiQPRTCZtmjxsTzcd55wCkiriPiBPFU911XP3536i\"]},\"BRIDGE_PARTNERSHIP/src/Utils.sol\":{\"keccak256\":\"0x2cfbe9804905a7ed86586add8316eed5b56421ed9d06637638448c19d85a9b0c\",\"urls\":[\"bzz-raw://abf5bf5f020206721a087d5c184fe7184d1f6709f98aca9fd8222e5c73a5d659\",\"dweb:/ipfs/QmdjQPtSXYgvEWRb74C5Tg56961PbmkvRo2NdUFPqLTdBB\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol\":{\"keccak256\":\"0xc1551a0378325853216cc7e5f3ab22954cb0b411b83221a66e92a36c19442c47\",\"urls\":[\"bzz-raw://ff2d7c07ee8da54cdadbac59fcfe959b5409918ff1ed9ff068f35c728d581dc1\",\"dweb:/ipfs/QmYuDBQxHYbwAbUQcGT6kRqTnSfatcAhXEWBXJfm3ghBsg\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol\":{\"keccak256\":\"0xc0e1ae6b294cd6f6b2ce6185f4856a54c3f8b66f07cc0944b923db44efa8b286\",\"urls\":[\"bzz-raw://ac7be5f0311f28a5e830f806bcf69e566e72b18491c5ad126464ceb9fd31dc55\",\"dweb:/ipfs/QmaKSBuABhRzF3t51yHKb9jVzzia9Y5gNFfS4u4reSMkLD\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol\":{\"keccak256\":\"0x5772f5f420a80b366754817089d56e12b504535deeedfad4e7403f3ca508ead0\",\"urls\":[\"bzz-raw://d9aaa08e6fdfd5253000ef7644f5fb7e9ed7a18ebb0989731bf828b4b5b44a1e\",\"dweb:/ipfs/QmNvipZ7DM8XvmYRfr8nD9MyvoqAdQDQjM9wiqfZnDbWtN\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol\":{\"keccak256\":\"0x2ab7696fa8b684863a088ded6251035a87a288737f6621730991a38dc303236c\",\"urls\":[\"bzz-raw://c47386479f378b8da3eb6c5254dd31b6657986c0fb668d27512a9cd8403cf562\",\"dweb:/ipfs/QmUWQ95zVef9LHUfG4iurtjurVfW2TdQB7m41NopaQNNgY\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x206e252911fb60d0d6a54fb657b64344c33fa237ddb8553aa668a24d1856a7c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cb73e8c2fd4ab43f4ed672a19fd7629fc169034dc461524bebd67d9fe9bb000\",\"dweb:/ipfs/Qmd9wCoy5gDduquSq7po6uNFx9W28zS5drXXErDnN24aNZ\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol\":{\"keccak256\":\"0x9256fa479ecc3f4dc17b2860230ce6d658858262bee1dbabd654208381227d0d\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://521d895f44fe73b39cff8183d6e8a6a23e8cc3336fc3e1874ad798b9803b390b\",\"dweb:/ipfs/Qmdcw3Af8FcwgXUEWFcvwFKZ3B4d2dzWosUorrSLAnfN2Y\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol\":{\"keccak256\":\"0x5e492d502a4be6633cab7c4d0f65c1c90fef2f05a4fd591de896ef3c6d7794cf\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://509831b21b066d67c75423cad68420946970f44581e540afa11b6678c68f7d17\",\"dweb:/ipfs/QmaWTnPcSVPq9c44V1ZdsBX8P1a6qjJst3Vy7oNcuAgBs6\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":{\"keccak256\":\"0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af\",\"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"CCTPReceiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "bytes[]",
									"name": "additionalMessages",
									"type": "bytes[]"
								},
								{
									"internalType": "bytes32",
									"name": "sourceAddress",
									"type": "bytes32"
								},
								{
									"internalType": "uint16",
									"name": "sourceChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "receiveWormholeMessages",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "sourceChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "sourceAddress",
									"type": "bytes32"
								}
							],
							"name": "setRegisteredSender",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wormhole",
							"outputs": [
								{
									"internalType": "contract IWormhole",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wormholeRelayer",
							"outputs": [
								{
									"internalType": "contract IWormholeRelayer",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)": "529dca32",
							"setRegisteredSender(uint16,bytes32)": "dd12d68b",
							"wormhole()": "84acd1bb",
							"wormholeRelayer()": "da25b725"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"additionalMessages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"receiveWormholeMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"}],\"name\":\"setRegisteredSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeRelayer\",\"outputs\":[{\"internalType\":\"contract IWormholeRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRegisteredSender(uint16,bytes32)\":{\"notice\":\"Sets the registered address for 'sourceChain' to 'sourceAddress' So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid Assumes only one sender per chain is valid Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":\"CCTPReceiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/Base.sol\":{\"keccak256\":\"0x249d3dcd47a4f9183fa6aff8f1c75956cf54c217481177725ff2fd93f49c59c3\",\"urls\":[\"bzz-raw://aa0ceb0ac96ace95d5bbfc369577baec10d02ba33b514d10b868b8f48c2e0b0a\",\"dweb:/ipfs/QmWPeQGpcu7SvzHmEnLybwJ6pGwzARKDpQYxVRbopRHK1o\"]},\"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":{\"keccak256\":\"0xb0cb70d96d3c57421feca6842eab200246abcfcd1da1d53003449c9f517b9b36\",\"urls\":[\"bzz-raw://b12d2fa5425eaf7bfb6d5c7c2f949dbd50c11939f4636a64cd1b440ab4010999\",\"dweb:/ipfs/QmZZoGiQPRTCZtmjxsTzcd55wCkiriPiBPFU911XP3536i\"]},\"BRIDGE_PARTNERSHIP/src/Utils.sol\":{\"keccak256\":\"0x2cfbe9804905a7ed86586add8316eed5b56421ed9d06637638448c19d85a9b0c\",\"urls\":[\"bzz-raw://abf5bf5f020206721a087d5c184fe7184d1f6709f98aca9fd8222e5c73a5d659\",\"dweb:/ipfs/QmdjQPtSXYgvEWRb74C5Tg56961PbmkvRo2NdUFPqLTdBB\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol\":{\"keccak256\":\"0xc1551a0378325853216cc7e5f3ab22954cb0b411b83221a66e92a36c19442c47\",\"urls\":[\"bzz-raw://ff2d7c07ee8da54cdadbac59fcfe959b5409918ff1ed9ff068f35c728d581dc1\",\"dweb:/ipfs/QmYuDBQxHYbwAbUQcGT6kRqTnSfatcAhXEWBXJfm3ghBsg\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol\":{\"keccak256\":\"0xc0e1ae6b294cd6f6b2ce6185f4856a54c3f8b66f07cc0944b923db44efa8b286\",\"urls\":[\"bzz-raw://ac7be5f0311f28a5e830f806bcf69e566e72b18491c5ad126464ceb9fd31dc55\",\"dweb:/ipfs/QmaKSBuABhRzF3t51yHKb9jVzzia9Y5gNFfS4u4reSMkLD\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol\":{\"keccak256\":\"0x5772f5f420a80b366754817089d56e12b504535deeedfad4e7403f3ca508ead0\",\"urls\":[\"bzz-raw://d9aaa08e6fdfd5253000ef7644f5fb7e9ed7a18ebb0989731bf828b4b5b44a1e\",\"dweb:/ipfs/QmNvipZ7DM8XvmYRfr8nD9MyvoqAdQDQjM9wiqfZnDbWtN\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol\":{\"keccak256\":\"0x2ab7696fa8b684863a088ded6251035a87a288737f6621730991a38dc303236c\",\"urls\":[\"bzz-raw://c47386479f378b8da3eb6c5254dd31b6657986c0fb668d27512a9cd8403cf562\",\"dweb:/ipfs/QmUWQ95zVef9LHUfG4iurtjurVfW2TdQB7m41NopaQNNgY\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x206e252911fb60d0d6a54fb657b64344c33fa237ddb8553aa668a24d1856a7c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cb73e8c2fd4ab43f4ed672a19fd7629fc169034dc461524bebd67d9fe9bb000\",\"dweb:/ipfs/Qmd9wCoy5gDduquSq7po6uNFx9W28zS5drXXErDnN24aNZ\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol\":{\"keccak256\":\"0x9256fa479ecc3f4dc17b2860230ce6d658858262bee1dbabd654208381227d0d\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://521d895f44fe73b39cff8183d6e8a6a23e8cc3336fc3e1874ad798b9803b390b\",\"dweb:/ipfs/Qmdcw3Af8FcwgXUEWFcvwFKZ3B4d2dzWosUorrSLAnfN2Y\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol\":{\"keccak256\":\"0x5e492d502a4be6633cab7c4d0f65c1c90fef2f05a4fd591de896ef3c6d7794cf\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://509831b21b066d67c75423cad68420946970f44581e540afa11b6678c68f7d17\",\"dweb:/ipfs/QmaWTnPcSVPq9c44V1ZdsBX8P1a6qjJst3Vy7oNcuAgBs6\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":{\"keccak256\":\"0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af\",\"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPReceiver",
								"label": "wormholeRelayer",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(IWormholeRelayer)1484"
							},
							{
								"astId": 11,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPReceiver",
								"label": "wormhole",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IWormhole)1050"
							},
							{
								"astId": 13,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPReceiver",
								"label": "registrationOwner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 17,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPReceiver",
								"label": "registeredSenders",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_uint16,t_bytes32)"
							},
							{
								"astId": 127,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPReceiver",
								"label": "circleTokenMessenger",
								"offset": 0,
								"slot": "4",
								"type": "t_contract(ITokenMessenger)656"
							},
							{
								"astId": 130,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPReceiver",
								"label": "circleMessageTransmitter",
								"offset": 0,
								"slot": "5",
								"type": "t_contract(IMessageTransmitter)581"
							},
							{
								"astId": 132,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPReceiver",
								"label": "USDC",
								"offset": 0,
								"slot": "6",
								"type": "t_address"
							},
							{
								"astId": 134,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPReceiver",
								"label": "cctpConfigurationOwner",
								"offset": 0,
								"slot": "7",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(IMessageTransmitter)581": {
								"encoding": "inplace",
								"label": "contract IMessageTransmitter",
								"numberOfBytes": "20"
							},
							"t_contract(ITokenMessenger)656": {
								"encoding": "inplace",
								"label": "contract ITokenMessenger",
								"numberOfBytes": "20"
							},
							"t_contract(IWormhole)1050": {
								"encoding": "inplace",
								"label": "contract IWormhole",
								"numberOfBytes": "20"
							},
							"t_contract(IWormholeRelayer)1484": {
								"encoding": "inplace",
								"label": "contract IWormholeRelayer",
								"numberOfBytes": "20"
							},
							"t_mapping(t_uint16,t_bytes32)": {
								"encoding": "mapping",
								"key": "t_uint16",
								"label": "mapping(uint16 => bytes32)",
								"numberOfBytes": "32",
								"value": "t_bytes32"
							},
							"t_uint16": {
								"encoding": "inplace",
								"label": "uint16",
								"numberOfBytes": "2"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"setRegisteredSender(uint16,bytes32)": {
								"notice": "Sets the registered address for 'sourceChain' to 'sourceAddress' So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid Assumes only one sender per chain is valid Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)"
							}
						},
						"version": 1
					}
				},
				"CCTPSender": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"name": "chainIdToCCTPDomain",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "chain",
									"type": "uint16"
								},
								{
									"internalType": "uint32",
									"name": "cctpDomain",
									"type": "uint32"
								}
							],
							"name": "setCCTPDomain",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "sourceChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "sourceAddress",
									"type": "bytes32"
								}
							],
							"name": "setRegisteredSender",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wormhole",
							"outputs": [
								{
									"internalType": "contract IWormhole",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wormholeRelayer",
							"outputs": [
								{
									"internalType": "contract IWormholeRelayer",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"chainIdToCCTPDomain(uint16)": "3a57cd63",
							"setCCTPDomain(uint16,uint32)": "c6a4fd1c",
							"setRegisteredSender(uint16,bytes32)": "dd12d68b",
							"wormhole()": "84acd1bb",
							"wormholeRelayer()": "da25b725"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToCCTPDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"cctpDomain\",\"type\":\"uint32\"}],\"name\":\"setCCTPDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"}],\"name\":\"setRegisteredSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeRelayer\",\"outputs\":[{\"internalType\":\"contract IWormholeRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setCCTPDomain(uint16,uint32)\":{\"notice\":\"Sets the CCTP Domain corresponding to chain 'chain' to be 'cctpDomain' So that transfers of USDC to chain 'chain' use the target CCTP domain 'cctpDomain' This action can only be performed by 'cctpConfigurationOwner', who is set to be the deployer Currently, cctp domains are: Ethereum: Wormhole chain id 2, cctp domain 0 Avalanche: Wormhole chain id 6, cctp domain 1 Optimism: Wormhole chain id 24, cctp domain 2 Arbitrum: Wormhole chain id 23, cctp domain 3 Base: Wormhole chain id 30, cctp domain 6 These can be set via: setCCTPDomain(2, 0); setCCTPDomain(6, 1); setCCTPDomain(24, 2); setCCTPDomain(23, 3); setCCTPDomain(30, 6);\"},\"setRegisteredSender(uint16,bytes32)\":{\"notice\":\"Sets the registered address for 'sourceChain' to 'sourceAddress' So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid Assumes only one sender per chain is valid Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":\"CCTPSender\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/Base.sol\":{\"keccak256\":\"0x249d3dcd47a4f9183fa6aff8f1c75956cf54c217481177725ff2fd93f49c59c3\",\"urls\":[\"bzz-raw://aa0ceb0ac96ace95d5bbfc369577baec10d02ba33b514d10b868b8f48c2e0b0a\",\"dweb:/ipfs/QmWPeQGpcu7SvzHmEnLybwJ6pGwzARKDpQYxVRbopRHK1o\"]},\"BRIDGE_PARTNERSHIP/src/CCTPBase.sol\":{\"keccak256\":\"0xb0cb70d96d3c57421feca6842eab200246abcfcd1da1d53003449c9f517b9b36\",\"urls\":[\"bzz-raw://b12d2fa5425eaf7bfb6d5c7c2f949dbd50c11939f4636a64cd1b440ab4010999\",\"dweb:/ipfs/QmZZoGiQPRTCZtmjxsTzcd55wCkiriPiBPFU911XP3536i\"]},\"BRIDGE_PARTNERSHIP/src/Utils.sol\":{\"keccak256\":\"0x2cfbe9804905a7ed86586add8316eed5b56421ed9d06637638448c19d85a9b0c\",\"urls\":[\"bzz-raw://abf5bf5f020206721a087d5c184fe7184d1f6709f98aca9fd8222e5c73a5d659\",\"dweb:/ipfs/QmdjQPtSXYgvEWRb74C5Tg56961PbmkvRo2NdUFPqLTdBB\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol\":{\"keccak256\":\"0xc1551a0378325853216cc7e5f3ab22954cb0b411b83221a66e92a36c19442c47\",\"urls\":[\"bzz-raw://ff2d7c07ee8da54cdadbac59fcfe959b5409918ff1ed9ff068f35c728d581dc1\",\"dweb:/ipfs/QmYuDBQxHYbwAbUQcGT6kRqTnSfatcAhXEWBXJfm3ghBsg\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol\":{\"keccak256\":\"0xc0e1ae6b294cd6f6b2ce6185f4856a54c3f8b66f07cc0944b923db44efa8b286\",\"urls\":[\"bzz-raw://ac7be5f0311f28a5e830f806bcf69e566e72b18491c5ad126464ceb9fd31dc55\",\"dweb:/ipfs/QmaKSBuABhRzF3t51yHKb9jVzzia9Y5gNFfS4u4reSMkLD\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol\":{\"keccak256\":\"0x5772f5f420a80b366754817089d56e12b504535deeedfad4e7403f3ca508ead0\",\"urls\":[\"bzz-raw://d9aaa08e6fdfd5253000ef7644f5fb7e9ed7a18ebb0989731bf828b4b5b44a1e\",\"dweb:/ipfs/QmNvipZ7DM8XvmYRfr8nD9MyvoqAdQDQjM9wiqfZnDbWtN\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol\":{\"keccak256\":\"0x2ab7696fa8b684863a088ded6251035a87a288737f6621730991a38dc303236c\",\"urls\":[\"bzz-raw://c47386479f378b8da3eb6c5254dd31b6657986c0fb668d27512a9cd8403cf562\",\"dweb:/ipfs/QmUWQ95zVef9LHUfG4iurtjurVfW2TdQB7m41NopaQNNgY\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x206e252911fb60d0d6a54fb657b64344c33fa237ddb8553aa668a24d1856a7c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cb73e8c2fd4ab43f4ed672a19fd7629fc169034dc461524bebd67d9fe9bb000\",\"dweb:/ipfs/Qmd9wCoy5gDduquSq7po6uNFx9W28zS5drXXErDnN24aNZ\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol\":{\"keccak256\":\"0x9256fa479ecc3f4dc17b2860230ce6d658858262bee1dbabd654208381227d0d\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://521d895f44fe73b39cff8183d6e8a6a23e8cc3336fc3e1874ad798b9803b390b\",\"dweb:/ipfs/Qmdcw3Af8FcwgXUEWFcvwFKZ3B4d2dzWosUorrSLAnfN2Y\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol\":{\"keccak256\":\"0x5e492d502a4be6633cab7c4d0f65c1c90fef2f05a4fd591de896ef3c6d7794cf\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://509831b21b066d67c75423cad68420946970f44581e540afa11b6678c68f7d17\",\"dweb:/ipfs/QmaWTnPcSVPq9c44V1ZdsBX8P1a6qjJst3Vy7oNcuAgBs6\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":{\"keccak256\":\"0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af\",\"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPSender",
								"label": "wormholeRelayer",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(IWormholeRelayer)1484"
							},
							{
								"astId": 11,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPSender",
								"label": "wormhole",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IWormhole)1050"
							},
							{
								"astId": 13,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPSender",
								"label": "registrationOwner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 17,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPSender",
								"label": "registeredSenders",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_uint16,t_bytes32)"
							},
							{
								"astId": 127,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPSender",
								"label": "circleTokenMessenger",
								"offset": 0,
								"slot": "4",
								"type": "t_contract(ITokenMessenger)656"
							},
							{
								"astId": 130,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPSender",
								"label": "circleMessageTransmitter",
								"offset": 0,
								"slot": "5",
								"type": "t_contract(IMessageTransmitter)581"
							},
							{
								"astId": 132,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPSender",
								"label": "USDC",
								"offset": 0,
								"slot": "6",
								"type": "t_address"
							},
							{
								"astId": 134,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPSender",
								"label": "cctpConfigurationOwner",
								"offset": 0,
								"slot": "7",
								"type": "t_address"
							},
							{
								"astId": 186,
								"contract": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol:CCTPSender",
								"label": "chainIdToCCTPDomain",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_uint16,t_uint32)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(IMessageTransmitter)581": {
								"encoding": "inplace",
								"label": "contract IMessageTransmitter",
								"numberOfBytes": "20"
							},
							"t_contract(ITokenMessenger)656": {
								"encoding": "inplace",
								"label": "contract ITokenMessenger",
								"numberOfBytes": "20"
							},
							"t_contract(IWormhole)1050": {
								"encoding": "inplace",
								"label": "contract IWormhole",
								"numberOfBytes": "20"
							},
							"t_contract(IWormholeRelayer)1484": {
								"encoding": "inplace",
								"label": "contract IWormholeRelayer",
								"numberOfBytes": "20"
							},
							"t_mapping(t_uint16,t_bytes32)": {
								"encoding": "mapping",
								"key": "t_uint16",
								"label": "mapping(uint16 => bytes32)",
								"numberOfBytes": "32",
								"value": "t_bytes32"
							},
							"t_mapping(t_uint16,t_uint32)": {
								"encoding": "mapping",
								"key": "t_uint16",
								"label": "mapping(uint16 => uint32)",
								"numberOfBytes": "32",
								"value": "t_uint32"
							},
							"t_uint16": {
								"encoding": "inplace",
								"label": "uint16",
								"numberOfBytes": "2"
							},
							"t_uint32": {
								"encoding": "inplace",
								"label": "uint32",
								"numberOfBytes": "4"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"setCCTPDomain(uint16,uint32)": {
								"notice": "Sets the CCTP Domain corresponding to chain 'chain' to be 'cctpDomain' So that transfers of USDC to chain 'chain' use the target CCTP domain 'cctpDomain' This action can only be performed by 'cctpConfigurationOwner', who is set to be the deployer Currently, cctp domains are: Ethereum: Wormhole chain id 2, cctp domain 0 Avalanche: Wormhole chain id 6, cctp domain 1 Optimism: Wormhole chain id 24, cctp domain 2 Arbitrum: Wormhole chain id 23, cctp domain 3 Base: Wormhole chain id 30, cctp domain 6 These can be set via: setCCTPDomain(2, 0); setCCTPDomain(6, 1); setCCTPDomain(24, 2); setCCTPDomain(23, 3); setCCTPDomain(30, 6);"
							},
							"setRegisteredSender(uint16,bytes32)": {
								"notice": "Sets the registered address for 'sourceChain' to 'sourceAddress' So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid Assumes only one sender per chain is valid Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)"
							}
						},
						"version": 1
					}
				}
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol": {
				"IMessageTransmitter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "message",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "receiveMessage",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "originalMessage",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "originalAttestation",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "newMessageBody",
									"type": "bytes"
								},
								{
									"internalType": "bytes32",
									"name": "newDestinationCaller",
									"type": "bytes32"
								}
							],
							"name": "replaceMessage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "destinationDomain",
									"type": "uint32"
								},
								{
									"internalType": "bytes32",
									"name": "recipient",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "messageBody",
									"type": "bytes"
								}
							],
							"name": "sendMessage",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "destinationDomain",
									"type": "uint32"
								},
								{
									"internalType": "bytes32",
									"name": "recipient",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "destinationCaller",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "messageBody",
									"type": "bytes"
								}
							],
							"name": "sendMessageWithCaller",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"receiveMessage(bytes,bytes)": {
								"params": {
									"message": "The message raw bytes",
									"signature": "The message signature"
								},
								"returns": {
									"success": "bool, true if successful"
								}
							},
							"replaceMessage(bytes,bytes,bytes,bytes32)": {
								"details": "The `originalAttestation` must be a valid attestation of `originalMessage`.",
								"params": {
									"newDestinationCaller": "the new destination caller",
									"newMessageBody": "new message body of replaced message",
									"originalAttestation": "attestation of `originalMessage`",
									"originalMessage": "original message to replace"
								}
							},
							"sendMessage(uint32,bytes32,bytes)": {
								"details": "Increment nonce, format the message, and emit `MessageSent` event with message information.",
								"params": {
									"destinationDomain": "Domain of destination chain",
									"messageBody": "Raw bytes content of message",
									"recipient": "Address of message recipient on destination domain as bytes32"
								},
								"returns": {
									"_0": "nonce reserved by message"
								}
							},
							"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)": {
								"details": "Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.",
								"params": {
									"destinationCaller": "caller on the destination domain, as bytes32",
									"destinationDomain": "Domain of destination chain",
									"messageBody": "Raw bytes content of message",
									"recipient": "Address of message recipient on destination domain as bytes32"
								},
								"returns": {
									"_0": "nonce reserved by message"
								}
							}
						},
						"title": "IMessageTransmitter",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"receiveMessage(bytes,bytes)": "57ecfd28",
							"replaceMessage(bytes,bytes,bytes,bytes32)": "b857b774",
							"sendMessage(uint32,bytes32,bytes)": "0ba469bc",
							"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)": "f7259a75"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"originalMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"originalAttestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"newMessageBody\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"newDestinationCaller\",\"type\":\"bytes32\"}],\"name\":\"replaceMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCaller\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessageWithCaller\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveMessage(bytes,bytes)\":{\"params\":{\"message\":\"The message raw bytes\",\"signature\":\"The message signature\"},\"returns\":{\"success\":\"bool, true if successful\"}},\"replaceMessage(bytes,bytes,bytes,bytes32)\":{\"details\":\"The `originalAttestation` must be a valid attestation of `originalMessage`.\",\"params\":{\"newDestinationCaller\":\"the new destination caller\",\"newMessageBody\":\"new message body of replaced message\",\"originalAttestation\":\"attestation of `originalMessage`\",\"originalMessage\":\"original message to replace\"}},\"sendMessage(uint32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information.\",\"params\":{\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.\",\"params\":{\"destinationCaller\":\"caller on the destination domain, as bytes32\",\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}}},\"title\":\"IMessageTransmitter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes,bytes)\":{\"notice\":\"Receives an incoming message, validating the header and passing the body to application-specific handler.\"},\"replaceMessage(bytes,bytes,bytes,bytes32)\":{\"notice\":\"Replace a message with a new message body and/or destination caller.\"},\"sendMessage(uint32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain.\"},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain, with a specified caller on the destination domain.\"}},\"notice\":\"Interface for message transmitters, which both relay and receive messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol\":\"IMessageTransmitter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol\":{\"keccak256\":\"0xc1551a0378325853216cc7e5f3ab22954cb0b411b83221a66e92a36c19442c47\",\"urls\":[\"bzz-raw://ff2d7c07ee8da54cdadbac59fcfe959b5409918ff1ed9ff068f35c728d581dc1\",\"dweb:/ipfs/QmYuDBQxHYbwAbUQcGT6kRqTnSfatcAhXEWBXJfm3ghBsg\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol\":{\"keccak256\":\"0xc0e1ae6b294cd6f6b2ce6185f4856a54c3f8b66f07cc0944b923db44efa8b286\",\"urls\":[\"bzz-raw://ac7be5f0311f28a5e830f806bcf69e566e72b18491c5ad126464ceb9fd31dc55\",\"dweb:/ipfs/QmaKSBuABhRzF3t51yHKb9jVzzia9Y5gNFfS4u4reSMkLD\"]},\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol\":{\"keccak256\":\"0x5772f5f420a80b366754817089d56e12b504535deeedfad4e7403f3ca508ead0\",\"urls\":[\"bzz-raw://d9aaa08e6fdfd5253000ef7644f5fb7e9ed7a18ebb0989731bf828b4b5b44a1e\",\"dweb:/ipfs/QmNvipZ7DM8XvmYRfr8nD9MyvoqAdQDQjM9wiqfZnDbWtN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"receiveMessage(bytes,bytes)": {
								"notice": "Receives an incoming message, validating the header and passing the body to application-specific handler."
							},
							"replaceMessage(bytes,bytes,bytes,bytes32)": {
								"notice": "Replace a message with a new message body and/or destination caller."
							},
							"sendMessage(uint32,bytes32,bytes)": {
								"notice": "Sends an outgoing message from the source domain."
							},
							"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)": {
								"notice": "Sends an outgoing message from the source domain, with a specified caller on the destination domain."
							}
						},
						"notice": "Interface for message transmitters, which both relay and receive messages.",
						"version": 1
					}
				}
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol": {
				"IReceiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "message",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "receiveMessage",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"receiveMessage(bytes,bytes)": {
								"params": {
									"message": "The message raw bytes",
									"signature": "The message signature"
								},
								"returns": {
									"success": "bool, true if successful"
								}
							}
						},
						"title": "IReceiver",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"receiveMessage(bytes,bytes)": "57ecfd28"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveMessage(bytes,bytes)\":{\"params\":{\"message\":\"The message raw bytes\",\"signature\":\"The message signature\"},\"returns\":{\"success\":\"bool, true if successful\"}}},\"title\":\"IReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes,bytes)\":{\"notice\":\"Receives an incoming message, validating the header and passing the body to application-specific handler.\"}},\"notice\":\"Receives messages on destination chain and forwards them to IMessageDestinationHandler\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol\":\"IReceiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol\":{\"keccak256\":\"0xc0e1ae6b294cd6f6b2ce6185f4856a54c3f8b66f07cc0944b923db44efa8b286\",\"urls\":[\"bzz-raw://ac7be5f0311f28a5e830f806bcf69e566e72b18491c5ad126464ceb9fd31dc55\",\"dweb:/ipfs/QmaKSBuABhRzF3t51yHKb9jVzzia9Y5gNFfS4u4reSMkLD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"receiveMessage(bytes,bytes)": {
								"notice": "Receives an incoming message, validating the header and passing the body to application-specific handler."
							}
						},
						"notice": "Receives messages on destination chain and forwards them to IMessageDestinationHandler",
						"version": 1
					}
				}
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol": {
				"IRelayer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "originalMessage",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "originalAttestation",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "newMessageBody",
									"type": "bytes"
								},
								{
									"internalType": "bytes32",
									"name": "newDestinationCaller",
									"type": "bytes32"
								}
							],
							"name": "replaceMessage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "destinationDomain",
									"type": "uint32"
								},
								{
									"internalType": "bytes32",
									"name": "recipient",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "messageBody",
									"type": "bytes"
								}
							],
							"name": "sendMessage",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "destinationDomain",
									"type": "uint32"
								},
								{
									"internalType": "bytes32",
									"name": "recipient",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "destinationCaller",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "messageBody",
									"type": "bytes"
								}
							],
							"name": "sendMessageWithCaller",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"replaceMessage(bytes,bytes,bytes,bytes32)": {
								"details": "The `originalAttestation` must be a valid attestation of `originalMessage`.",
								"params": {
									"newDestinationCaller": "the new destination caller",
									"newMessageBody": "new message body of replaced message",
									"originalAttestation": "attestation of `originalMessage`",
									"originalMessage": "original message to replace"
								}
							},
							"sendMessage(uint32,bytes32,bytes)": {
								"details": "Increment nonce, format the message, and emit `MessageSent` event with message information.",
								"params": {
									"destinationDomain": "Domain of destination chain",
									"messageBody": "Raw bytes content of message",
									"recipient": "Address of message recipient on destination domain as bytes32"
								},
								"returns": {
									"_0": "nonce reserved by message"
								}
							},
							"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)": {
								"details": "Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.",
								"params": {
									"destinationCaller": "caller on the destination domain, as bytes32",
									"destinationDomain": "Domain of destination chain",
									"messageBody": "Raw bytes content of message",
									"recipient": "Address of message recipient on destination domain as bytes32"
								},
								"returns": {
									"_0": "nonce reserved by message"
								}
							}
						},
						"title": "IRelayer",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"replaceMessage(bytes,bytes,bytes,bytes32)": "b857b774",
							"sendMessage(uint32,bytes32,bytes)": "0ba469bc",
							"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)": "f7259a75"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"originalMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"originalAttestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"newMessageBody\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"newDestinationCaller\",\"type\":\"bytes32\"}],\"name\":\"replaceMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCaller\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessageWithCaller\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"replaceMessage(bytes,bytes,bytes,bytes32)\":{\"details\":\"The `originalAttestation` must be a valid attestation of `originalMessage`.\",\"params\":{\"newDestinationCaller\":\"the new destination caller\",\"newMessageBody\":\"new message body of replaced message\",\"originalAttestation\":\"attestation of `originalMessage`\",\"originalMessage\":\"original message to replace\"}},\"sendMessage(uint32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information.\",\"params\":{\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.\",\"params\":{\"destinationCaller\":\"caller on the destination domain, as bytes32\",\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}}},\"title\":\"IRelayer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"replaceMessage(bytes,bytes,bytes,bytes32)\":{\"notice\":\"Replace a message with a new message body and/or destination caller.\"},\"sendMessage(uint32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain.\"},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain, with a specified caller on the destination domain.\"}},\"notice\":\"Sends messages from source domain to destination domain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol\":\"IRelayer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol\":{\"keccak256\":\"0x5772f5f420a80b366754817089d56e12b504535deeedfad4e7403f3ca508ead0\",\"urls\":[\"bzz-raw://d9aaa08e6fdfd5253000ef7644f5fb7e9ed7a18ebb0989731bf828b4b5b44a1e\",\"dweb:/ipfs/QmNvipZ7DM8XvmYRfr8nD9MyvoqAdQDQjM9wiqfZnDbWtN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"replaceMessage(bytes,bytes,bytes,bytes32)": {
								"notice": "Replace a message with a new message body and/or destination caller."
							},
							"sendMessage(uint32,bytes32,bytes)": {
								"notice": "Sends an outgoing message from the source domain."
							},
							"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)": {
								"notice": "Sends an outgoing message from the source domain, with a specified caller on the destination domain."
							}
						},
						"notice": "Sends messages from source domain to destination domain",
						"version": 1
					}
				}
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol": {
				"ITokenMessenger": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint32",
									"name": "destinationDomain",
									"type": "uint32"
								},
								{
									"internalType": "bytes32",
									"name": "mintRecipient",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "burnToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "destinationCaller",
									"type": "bytes32"
								}
							],
							"name": "depositForBurnWithCaller",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "nonce",
									"type": "uint64"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)": {
								"details": "reverts if: - given destinationCaller is zero address - given burnToken is not supported - given destinationDomain has no TokenMessenger registered - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance to this contract is less than `amount`. - burn() reverts. For example, if `amount` is 0. - MessageTransmitter returns false or reverts.",
								"params": {
									"amount": "amount of tokens to burn",
									"burnToken": "address of contract to burn deposited tokens, on local domain",
									"destinationCaller": "caller on the destination domain, as bytes32",
									"destinationDomain": "destination domain",
									"mintRecipient": "address of mint recipient on destination domain"
								},
								"returns": {
									"nonce": "unique nonce reserved by message"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)": "f856ddb6"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"mintRecipient\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCaller\",\"type\":\"bytes32\"}],\"name\":\"depositForBurnWithCaller\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)\":{\"details\":\"reverts if: - given destinationCaller is zero address - given burnToken is not supported - given destinationDomain has no TokenMessenger registered - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance to this contract is less than `amount`. - burn() reverts. For example, if `amount` is 0. - MessageTransmitter returns false or reverts.\",\"params\":{\"amount\":\"amount of tokens to burn\",\"burnToken\":\"address of contract to burn deposited tokens, on local domain\",\"destinationCaller\":\"caller on the destination domain, as bytes32\",\"destinationDomain\":\"destination domain\",\"mintRecipient\":\"address of mint recipient on destination domain\"},\"returns\":{\"nonce\":\"unique nonce reserved by message\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)\":{\"notice\":\"Deposits and burns tokens from sender to be minted on destination domain. The mint on the destination domain must be called by `destinationCaller`. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard depositForBurn() should be preferred for use cases where a specific destination caller is not required. Emits a `DepositForBurn` event.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol\":\"ITokenMessenger\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol\":{\"keccak256\":\"0x2ab7696fa8b684863a088ded6251035a87a288737f6621730991a38dc303236c\",\"urls\":[\"bzz-raw://c47386479f378b8da3eb6c5254dd31b6657986c0fb668d27512a9cd8403cf562\",\"dweb:/ipfs/QmUWQ95zVef9LHUfG4iurtjurVfW2TdQB7m41NopaQNNgY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)": {
								"notice": "Deposits and burns tokens from sender to be minted on destination domain. The mint on the destination domain must be called by `destinationCaller`. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard depositForBurn() should be preferred for use cases where a specific destination caller is not required. Emits a `DepositForBurn` event."
							}
						},
						"version": 1
					}
				}
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x206e252911fb60d0d6a54fb657b64344c33fa237ddb8553aa668a24d1856a7c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cb73e8c2fd4ab43f4ed672a19fd7629fc169034dc461524bebd67d9fe9bb000\",\"dweb:/ipfs/Qmd9wCoy5gDduquSq7po6uNFx9W28zS5drXXErDnN24aNZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol": {
				"IWormhole": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newContract",
									"type": "address"
								}
							],
							"name": "ContractUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint32",
									"name": "index",
									"type": "uint32"
								}
							],
							"name": "GuardianSetAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint32",
									"name": "nonce",
									"type": "uint32"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "LogMessagePublished",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "chainId",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "evmChainId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getCurrentGuardianSetIndex",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "index",
									"type": "uint32"
								}
							],
							"name": "getGuardianSet",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address[]",
											"name": "keys",
											"type": "address[]"
										},
										{
											"internalType": "uint32",
											"name": "expirationTime",
											"type": "uint32"
										}
									],
									"internalType": "struct IWormhole.GuardianSet",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getGuardianSetExpiry",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "hash",
									"type": "bytes32"
								}
							],
							"name": "governanceActionIsConsumed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "governanceChainId",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "governanceContract",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isFork",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "impl",
									"type": "address"
								}
							],
							"name": "isInitialized",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "messageFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "emitter",
									"type": "address"
								}
							],
							"name": "nextSequence",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "encodedVM",
									"type": "bytes"
								}
							],
							"name": "parseAndVerifyVM",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "version",
											"type": "uint8"
										},
										{
											"internalType": "uint32",
											"name": "timestamp",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "nonce",
											"type": "uint32"
										},
										{
											"internalType": "uint16",
											"name": "emitterChainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										},
										{
											"internalType": "uint8",
											"name": "consistencyLevel",
											"type": "uint8"
										},
										{
											"internalType": "bytes",
											"name": "payload",
											"type": "bytes"
										},
										{
											"internalType": "uint32",
											"name": "guardianSetIndex",
											"type": "uint32"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "uint8",
													"name": "guardianIndex",
													"type": "uint8"
												}
											],
											"internalType": "struct IWormhole.Signature[]",
											"name": "signatures",
											"type": "tuple[]"
										},
										{
											"internalType": "bytes32",
											"name": "hash",
											"type": "bytes32"
										}
									],
									"internalType": "struct IWormhole.VM",
									"name": "vm",
									"type": "tuple"
								},
								{
									"internalType": "bool",
									"name": "valid",
									"type": "bool"
								},
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "encodedUpgrade",
									"type": "bytes"
								}
							],
							"name": "parseContractUpgrade",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "module",
											"type": "bytes32"
										},
										{
											"internalType": "uint8",
											"name": "action",
											"type": "uint8"
										},
										{
											"internalType": "uint16",
											"name": "chain",
											"type": "uint16"
										},
										{
											"internalType": "address",
											"name": "newContract",
											"type": "address"
										}
									],
									"internalType": "struct IWormhole.ContractUpgrade",
									"name": "cu",
									"type": "tuple"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "encodedUpgrade",
									"type": "bytes"
								}
							],
							"name": "parseGuardianSetUpgrade",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "module",
											"type": "bytes32"
										},
										{
											"internalType": "uint8",
											"name": "action",
											"type": "uint8"
										},
										{
											"internalType": "uint16",
											"name": "chain",
											"type": "uint16"
										},
										{
											"components": [
												{
													"internalType": "address[]",
													"name": "keys",
													"type": "address[]"
												},
												{
													"internalType": "uint32",
													"name": "expirationTime",
													"type": "uint32"
												}
											],
											"internalType": "struct IWormhole.GuardianSet",
											"name": "newGuardianSet",
											"type": "tuple"
										},
										{
											"internalType": "uint32",
											"name": "newGuardianSetIndex",
											"type": "uint32"
										}
									],
									"internalType": "struct IWormhole.GuardianSetUpgrade",
									"name": "gsu",
									"type": "tuple"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "encodedRecoverChainId",
									"type": "bytes"
								}
							],
							"name": "parseRecoverChainId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "module",
											"type": "bytes32"
										},
										{
											"internalType": "uint8",
											"name": "action",
											"type": "uint8"
										},
										{
											"internalType": "uint256",
											"name": "evmChainId",
											"type": "uint256"
										},
										{
											"internalType": "uint16",
											"name": "newChainId",
											"type": "uint16"
										}
									],
									"internalType": "struct IWormhole.RecoverChainId",
									"name": "rci",
									"type": "tuple"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "encodedSetMessageFee",
									"type": "bytes"
								}
							],
							"name": "parseSetMessageFee",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "module",
											"type": "bytes32"
										},
										{
											"internalType": "uint8",
											"name": "action",
											"type": "uint8"
										},
										{
											"internalType": "uint16",
											"name": "chain",
											"type": "uint16"
										},
										{
											"internalType": "uint256",
											"name": "messageFee",
											"type": "uint256"
										}
									],
									"internalType": "struct IWormhole.SetMessageFee",
									"name": "smf",
									"type": "tuple"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "encodedTransferFees",
									"type": "bytes"
								}
							],
							"name": "parseTransferFees",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "module",
											"type": "bytes32"
										},
										{
											"internalType": "uint8",
											"name": "action",
											"type": "uint8"
										},
										{
											"internalType": "uint16",
											"name": "chain",
											"type": "uint16"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "bytes32",
											"name": "recipient",
											"type": "bytes32"
										}
									],
									"internalType": "struct IWormhole.TransferFees",
									"name": "tf",
									"type": "tuple"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "encodedVM",
									"type": "bytes"
								}
							],
							"name": "parseVM",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "version",
											"type": "uint8"
										},
										{
											"internalType": "uint32",
											"name": "timestamp",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "nonce",
											"type": "uint32"
										},
										{
											"internalType": "uint16",
											"name": "emitterChainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										},
										{
											"internalType": "uint8",
											"name": "consistencyLevel",
											"type": "uint8"
										},
										{
											"internalType": "bytes",
											"name": "payload",
											"type": "bytes"
										},
										{
											"internalType": "uint32",
											"name": "guardianSetIndex",
											"type": "uint32"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "uint8",
													"name": "guardianIndex",
													"type": "uint8"
												}
											],
											"internalType": "struct IWormhole.Signature[]",
											"name": "signatures",
											"type": "tuple[]"
										},
										{
											"internalType": "bytes32",
											"name": "hash",
											"type": "bytes32"
										}
									],
									"internalType": "struct IWormhole.VM",
									"name": "vm",
									"type": "tuple"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "nonce",
									"type": "uint32"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "publishMessage",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "numGuardians",
									"type": "uint256"
								}
							],
							"name": "quorum",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "numSignaturesRequiredForQuorum",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_vm",
									"type": "bytes"
								}
							],
							"name": "submitContractUpgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_vm",
									"type": "bytes"
								}
							],
							"name": "submitNewGuardianSet",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_vm",
									"type": "bytes"
								}
							],
							"name": "submitRecoverChainId",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_vm",
									"type": "bytes"
								}
							],
							"name": "submitSetMessageFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "_vm",
									"type": "bytes"
								}
							],
							"name": "submitTransferFees",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "hash",
									"type": "bytes32"
								},
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "r",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "s",
											"type": "bytes32"
										},
										{
											"internalType": "uint8",
											"name": "v",
											"type": "uint8"
										},
										{
											"internalType": "uint8",
											"name": "guardianIndex",
											"type": "uint8"
										}
									],
									"internalType": "struct IWormhole.Signature[]",
									"name": "signatures",
									"type": "tuple[]"
								},
								{
									"components": [
										{
											"internalType": "address[]",
											"name": "keys",
											"type": "address[]"
										},
										{
											"internalType": "uint32",
											"name": "expirationTime",
											"type": "uint32"
										}
									],
									"internalType": "struct IWormhole.GuardianSet",
									"name": "guardianSet",
									"type": "tuple"
								}
							],
							"name": "verifySignatures",
							"outputs": [
								{
									"internalType": "bool",
									"name": "valid",
									"type": "bool"
								},
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "version",
											"type": "uint8"
										},
										{
											"internalType": "uint32",
											"name": "timestamp",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "nonce",
											"type": "uint32"
										},
										{
											"internalType": "uint16",
											"name": "emitterChainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										},
										{
											"internalType": "uint8",
											"name": "consistencyLevel",
											"type": "uint8"
										},
										{
											"internalType": "bytes",
											"name": "payload",
											"type": "bytes"
										},
										{
											"internalType": "uint32",
											"name": "guardianSetIndex",
											"type": "uint32"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "uint8",
													"name": "guardianIndex",
													"type": "uint8"
												}
											],
											"internalType": "struct IWormhole.Signature[]",
											"name": "signatures",
											"type": "tuple[]"
										},
										{
											"internalType": "bytes32",
											"name": "hash",
											"type": "bytes32"
										}
									],
									"internalType": "struct IWormhole.VM",
									"name": "vm",
									"type": "tuple"
								}
							],
							"name": "verifyVM",
							"outputs": [
								{
									"internalType": "bool",
									"name": "valid",
									"type": "bool"
								},
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"chainId()": "9a8a0592",
							"evmChainId()": "64d42b17",
							"getCurrentGuardianSetIndex()": "1cfe7951",
							"getGuardianSet(uint32)": "f951975a",
							"getGuardianSetExpiry()": "eb8d3f12",
							"governanceActionIsConsumed(bytes32)": "2c3c02a4",
							"governanceChainId()": "fbe3c2cd",
							"governanceContract()": "b172b222",
							"initialize()": "8129fc1c",
							"isFork()": "e039f224",
							"isInitialized(address)": "d60b347f",
							"messageFee()": "1a90a219",
							"nextSequence(address)": "4cf842b5",
							"parseAndVerifyVM(bytes)": "c0fd8bde",
							"parseContractUpgrade(bytes)": "4fdc60fa",
							"parseGuardianSetUpgrade(bytes)": "04ca84cf",
							"parseRecoverChainId(bytes)": "cb4cfea8",
							"parseSetMessageFee(bytes)": "515f3247",
							"parseTransferFees(bytes)": "0319e59c",
							"parseVM(bytes)": "a9e11893",
							"publishMessage(uint32,bytes,uint8)": "b19a437e",
							"quorum(uint256)": "f8ce560a",
							"submitContractUpgrade(bytes)": "5cb8cae2",
							"submitNewGuardianSet(bytes)": "6606b4e0",
							"submitRecoverChainId(bytes)": "178149e7",
							"submitSetMessageFee(bytes)": "f42bc641",
							"submitTransferFees(bytes)": "93df337e",
							"verifySignatures(bytes32,(bytes32,bytes32,uint8,uint8)[],(address[],uint32))": "a0cce1b3",
							"verifyVM((uint8,uint32,uint32,uint16,bytes32,uint64,uint8,bytes,uint32,(bytes32,bytes32,uint8,uint8)[],bytes32))": "875be02a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"GuardianSetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"LogMessagePublished\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evmChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentGuardianSetIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getGuardianSet\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"keys\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"}],\"internalType\":\"struct IWormhole.GuardianSet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuardianSetExpiry\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"governanceActionIsConsumed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"nextSequence\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVM\",\"type\":\"bytes\"}],\"name\":\"parseAndVerifyVM\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"emitterChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"guardianSetIndex\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"guardianIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct IWormhole.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IWormhole.VM\",\"name\":\"vm\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedUpgrade\",\"type\":\"bytes\"}],\"name\":\"parseContractUpgrade\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"internalType\":\"struct IWormhole.ContractUpgrade\",\"name\":\"cu\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedUpgrade\",\"type\":\"bytes\"}],\"name\":\"parseGuardianSetUpgrade\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"keys\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"}],\"internalType\":\"struct IWormhole.GuardianSet\",\"name\":\"newGuardianSet\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"newGuardianSetIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct IWormhole.GuardianSetUpgrade\",\"name\":\"gsu\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedRecoverChainId\",\"type\":\"bytes\"}],\"name\":\"parseRecoverChainId\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"evmChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"newChainId\",\"type\":\"uint16\"}],\"internalType\":\"struct IWormhole.RecoverChainId\",\"name\":\"rci\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedSetMessageFee\",\"type\":\"bytes\"}],\"name\":\"parseSetMessageFee\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"messageFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IWormhole.SetMessageFee\",\"name\":\"smf\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTransferFees\",\"type\":\"bytes\"}],\"name\":\"parseTransferFees\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"}],\"internalType\":\"struct IWormhole.TransferFees\",\"name\":\"tf\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVM\",\"type\":\"bytes\"}],\"name\":\"parseVM\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"emitterChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"guardianSetIndex\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"guardianIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct IWormhole.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IWormhole.VM\",\"name\":\"vm\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"publishMessage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numGuardians\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numSignaturesRequiredForQuorum\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_vm\",\"type\":\"bytes\"}],\"name\":\"submitContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_vm\",\"type\":\"bytes\"}],\"name\":\"submitNewGuardianSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_vm\",\"type\":\"bytes\"}],\"name\":\"submitRecoverChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_vm\",\"type\":\"bytes\"}],\"name\":\"submitSetMessageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_vm\",\"type\":\"bytes\"}],\"name\":\"submitTransferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"guardianIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct IWormhole.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"keys\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"}],\"internalType\":\"struct IWormhole.GuardianSet\",\"name\":\"guardianSet\",\"type\":\"tuple\"}],\"name\":\"verifySignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"emitterChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"guardianSetIndex\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"guardianIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct IWormhole.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IWormhole.VM\",\"name\":\"vm\",\"type\":\"tuple\"}],\"name\":\"verifyVM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol\":\"IWormhole\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol\":{\"keccak256\":\"0x9256fa479ecc3f4dc17b2860230ce6d658858262bee1dbabd654208381227d0d\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://521d895f44fe73b39cff8183d6e8a6a23e8cc3336fc3e1874ad798b9803b390b\",\"dweb:/ipfs/Qmdcw3Af8FcwgXUEWFcvwFKZ3B4d2dzWosUorrSLAnfN2Y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol": {
				"IWormholeReceiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "bytes[]",
									"name": "additionalMessages",
									"type": "bytes[]"
								},
								{
									"internalType": "bytes32",
									"name": "sourceAddress",
									"type": "bytes32"
								},
								{
									"internalType": "uint16",
									"name": "sourceChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "receiveWormholeMessages",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)": {
								"params": {
									"additionalMessages": "- Additional messages which were requested to be included in this delivery.      Note: There are no contract-level guarantees that the messages in this array are what was requested      so **you should verify any sensitive information given here!**      For example, if a 'VaaKey' was specified on the source chain, then MAKE SURE the corresponding message here      has valid signatures (by calling `parseAndVerifyVM(message)` on the Wormhole core contract)      This field can be used to perform and relay TokenBridge or CCTP transfers, and there are example      usages of this at         https://github.com/wormhole-foundation/hello-token         https://github.com/wormhole-foundation/hello-cctp",
									"deliveryHash": "- the VAA hash of the deliveryVAA.",
									"payload": "- an arbitrary message which was included in the delivery by the     requester. This message's signature will already have been verified (as long as msg.sender is the Wormhole Relayer contract)",
									"sourceAddress": "- the (wormhole format) address on the sending chain which requested     this delivery.",
									"sourceChain": "- the wormhole chain ID where this delivery was requested."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)": "529dca32"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"additionalMessages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"receiveWormholeMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)\":{\"params\":{\"additionalMessages\":\"- Additional messages which were requested to be included in this delivery.      Note: There are no contract-level guarantees that the messages in this array are what was requested      so **you should verify any sensitive information given here!**      For example, if a 'VaaKey' was specified on the source chain, then MAKE SURE the corresponding message here      has valid signatures (by calling `parseAndVerifyVM(message)` on the Wormhole core contract)      This field can be used to perform and relay TokenBridge or CCTP transfers, and there are example      usages of this at         https://github.com/wormhole-foundation/hello-token         https://github.com/wormhole-foundation/hello-cctp\",\"deliveryHash\":\"- the VAA hash of the deliveryVAA.\",\"payload\":\"- an arbitrary message which was included in the delivery by the     requester. This message's signature will already have been verified (as long as msg.sender is the Wormhole Relayer contract)\",\"sourceAddress\":\"- the (wormhole format) address on the sending chain which requested     this delivery.\",\"sourceChain\":\"- the wormhole chain ID where this delivery was requested.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)\":{\"notice\":\"When a `send` is performed with this contract as the target, this function will be     invoked by the WormholeRelayer contract NOTE: This function should be restricted such that only the Wormhole Relayer contract can call it. We also recommend that this function checks that `sourceChain` and `sourceAddress` are indeed who       you expect to have requested the calling of `send` on the source chain The invocation of this function corresponding to the `send` request will have msg.value equal   to the receiverValue specified in the send request. If the invocation of this function reverts or exceeds the gas limit   specified by the send requester, this delivery will result in a `ReceiverFailure`.\"}},\"notice\":\"Interface for a contract which can receive Wormhole messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol\":\"IWormholeReceiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol\":{\"keccak256\":\"0x5e492d502a4be6633cab7c4d0f65c1c90fef2f05a4fd591de896ef3c6d7794cf\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://509831b21b066d67c75423cad68420946970f44581e540afa11b6678c68f7d17\",\"dweb:/ipfs/QmaWTnPcSVPq9c44V1ZdsBX8P1a6qjJst3Vy7oNcuAgBs6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)": {
								"notice": "When a `send` is performed with this contract as the target, this function will be     invoked by the WormholeRelayer contract NOTE: This function should be restricted such that only the Wormhole Relayer contract can call it. We also recommend that this function checks that `sourceChain` and `sourceAddress` are indeed who       you expect to have requested the calling of `send` on the source chain The invocation of this function corresponding to the `send` request will have msg.value equal   to the receiverValue specified in the send request. If the invocation of this function reverts or exceeds the gas limit   specified by the send requester, this delivery will result in a `ReceiverFailure`."
							}
						},
						"notice": "Interface for a contract which can receive Wormhole messages.",
						"version": 1
					}
				}
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol": {
				"IWormholeRelayer": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint16",
									"name": "sourceChain",
									"type": "uint16"
								},
								{
									"indexed": true,
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "deliveryVaaHash",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "enum IWormholeRelayerDelivery.DeliveryStatus",
									"name": "status",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "gasUsed",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "enum IWormholeRelayerDelivery.RefundStatus",
									"name": "refundStatus",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "additionalStatusInfo",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "overridesInfo",
									"type": "bytes"
								}
							],
							"name": "Delivery",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "deliveryQuote",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								}
							],
							"name": "SendEvent",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "encodedVMs",
									"type": "bytes[]"
								},
								{
									"internalType": "bytes",
									"name": "encodedDeliveryVAA",
									"type": "bytes"
								},
								{
									"internalType": "address payable",
									"name": "relayerRefundAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "deliveryOverrides",
									"type": "bytes"
								}
							],
							"name": "deliver",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliveryAttempted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "attempted",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliveryFailureBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "blockNumber",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliverySuccessBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "blockNumber",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getDefaultDeliveryProvider",
							"outputs": [
								{
									"internalType": "address",
									"name": "deliveryProvider",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "chainId",
									"type": "uint16"
								}
							],
							"name": "getRegisteredWormholeRelayerContract",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "encodedExecutionParameters",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "quoteDeliveryPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nativePriceQuote",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "encodedExecutionInfo",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "quoteEVMDeliveryPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nativePriceQuote",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "targetChainRefundPerGasUnused",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								}
							],
							"name": "quoteEVMDeliveryPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nativePriceQuote",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "targetChainRefundPerGasUnused",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "currentChainAmount",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "quoteNativeForChain",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "targetChainAmount",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey",
									"name": "deliveryVaaKey",
									"type": "tuple"
								},
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "newReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "newEncodedExecutionParameters",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "newDeliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "resend",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey",
									"name": "deliveryVaaKey",
									"type": "tuple"
								},
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "newReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "newGasLimit",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "newDeliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "resendToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "targetAddress",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "encodedExecutionParameters",
									"type": "bytes"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "refundAddress",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey[]",
									"name": "vaaKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "send",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "targetAddress",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "encodedExecutionParameters",
									"type": "bytes"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "refundAddress",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "keyType",
											"type": "uint8"
										},
										{
											"internalType": "bytes",
											"name": "encodedKey",
											"type": "bytes"
										}
									],
									"internalType": "struct MessageKey[]",
									"name": "messageKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "send",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "refundAddress",
									"type": "address"
								}
							],
							"name": "sendPayloadToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								}
							],
							"name": "sendPayloadToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "refundAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey[]",
									"name": "vaaKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "sendToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "refundAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "keyType",
											"type": "uint8"
										},
										{
											"internalType": "bytes",
											"name": "encodedKey",
											"type": "bytes"
										}
									],
									"internalType": "struct MessageKey[]",
									"name": "messageKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "sendToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey[]",
									"name": "vaaKeys",
									"type": "tuple[]"
								}
							],
							"name": "sendVaasToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey[]",
									"name": "vaaKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "refundAddress",
									"type": "address"
								}
							],
							"name": "sendVaasToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Delivery(address,uint16,uint64,bytes32,uint8,uint256,uint8,bytes,bytes)": {
								"custom:member": "recipientContract - The target contract addresssourceChain - The chain which this delivery was requested from (in wormhole     ChainID format)sequence - The wormhole sequence number of the delivery VAA on the source chain     corresponding to this delivery requestdeliveryVaaHash - The hash of the delivery VAA corresponding to this delivery     requestgasUsed - The amount of gas that was used to call your target contractstatus:   - RECEIVER_FAILURE, if the target contract reverts   - SUCCESS, if the target contract doesn't revertadditionalStatusInfo:   - If status is SUCCESS, then this is empty.   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the       return data (i.e. potentially truncated revert reason information).refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,     where a cross chain refund is necessary, or if the default code path is used where no refund is requested (NO_REFUND_REQUESTED)overridesInfo:   - If not an override: empty bytes array   - Otherwise: An encoded `DeliveryOverride`"
							}
						},
						"kind": "dev",
						"methods": {
							"deliver(bytes[],bytes,address,bytes)": {
								"params": {
									"deliveryOverrides": "- Optional overrides field which must be either an empty bytes array or     an encoded DeliveryOverride struct",
									"encodedDeliveryVAA": "- Signed wormhole message from the source chain's WormholeRelayer     contract with payload being the encoded delivery instruction container",
									"encodedVMs": "- An array of signed wormhole messages (all from the same source chain     transaction)",
									"relayerRefundAddress": "- The address to which any refunds to the delivery provider     should be sent"
								}
							},
							"getDefaultDeliveryProvider()": {
								"returns": {
									"deliveryProvider": "The address of (the default delivery provider)'s contract on this source   chain. This must be a contract that implements IDeliveryProvider."
								}
							},
							"quoteDeliveryPrice(uint16,uint256,bytes,address)": {
								"params": {
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"encodedExecutionParameters": "encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"encodedExecutionInfo": "encoded information on how the delivery will be executed        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`             (which is the amount of target chain currency that will be refunded per unit of gas unused,              if a refundAddress is specified)",
									"nativePriceQuote": "Price, in units of current chain currency, that the delivery provider charges to perform the relay"
								}
							},
							"quoteEVMDeliveryPrice(uint16,uint256,uint256)": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`.",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"nativePriceQuote": "Price, in units of current chain currency, that the delivery provider charges to perform the relay",
									"targetChainRefundPerGasUnused": "amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified.         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain."
								}
							},
							"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": {
								"params": {
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"gasLimit": "gas limit with which to call `targetAddress`.",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"nativePriceQuote": "Price, in units of current chain currency, that the delivery provider charges to perform the relay",
									"targetChainRefundPerGasUnused": "amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain."
								}
							},
							"quoteNativeForChain(uint16,uint256,address)": {
								"params": {
									"currentChainAmount": "The value that `paymentForExtraReceiverValue` will be set to",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"targetChainAmount": "The amount such that if `targetAddress` will be called with `msg.value` equal to         receiverValue + targetChainAmount"
								}
							},
							"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": {
								"params": {
									"deliveryVaaKey": "VaaKey identifying the wormhole message containing the        previously published delivery instructions",
									"newDeliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"newEncodedExecutionParameters": "new encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
									"newReceiverValue": "new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "The target chain that the original delivery targeted. Must match targetChain from original delivery instructions"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing redelivery instructions"
								}
							},
							"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": {
								"params": {
									"deliveryVaaKey": "VaaKey identifying the wormhole message containing the        previously published delivery instructions",
									"newDeliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"newGasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request",
									"newReceiverValue": "new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "The target chain that the original delivery targeted. Must match targetChain from original delivery instructions"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing redelivery instructions"
								}
							},
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": {
								"params": {
									"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"encodedExecutionParameters": "encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format",
									"targetChain": "in Wormhole Chain ID format",
									"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": {
								"params": {
									"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"encodedExecutionParameters": "encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
									"messageKeys": "Additional messagess to pass in as parameter in call to `targetAddress`",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`.",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": {
								"params": {
									"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format",
									"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": {
								"params": {
									"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
									"messageKeys": "Additional messagess to pass in as parameter in call to `targetAddress`",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`.",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format",
									"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format",
									"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"deliver(bytes[],bytes,address,bytes)": "a60eb4c8",
							"deliveryAttempted(bytes32)": "d0625a19",
							"deliveryFailureBlock(bytes32)": "5a3b92e8",
							"deliverySuccessBlock(bytes32)": "40984f08",
							"getDefaultDeliveryProvider()": "24320c9f",
							"getRegisteredWormholeRelayerContract(uint16)": "3e8267e7",
							"quoteDeliveryPrice(uint16,uint256,bytes,address)": "a79629d8",
							"quoteEVMDeliveryPrice(uint16,uint256,uint256)": "c23ee3c3",
							"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": "80ebabd0",
							"quoteNativeForChain(uint16,uint256,address)": "2385904a",
							"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": "b686d089",
							"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": "8b0301b1",
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": "c81fb7fe",
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": "cee4bda0",
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": "8fecdd02",
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": "4b5ca6f4",
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": "3a2c767d",
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": "c055120e",
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": "329a2be7",
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": "32b2fc0e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deliveryVaaHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IWormholeRelayerDelivery.DeliveryStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IWormholeRelayerDelivery.RefundStatus\",\"name\":\"refundStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"additionalStatusInfo\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"overridesInfo\",\"type\":\"bytes\"}],\"name\":\"Delivery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deliveryQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"}],\"name\":\"SendEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"encodedVMs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"encodedDeliveryVAA\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"relayerRefundAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"deliveryOverrides\",\"type\":\"bytes\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryAttempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"attempted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryFailureBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliverySuccessBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultDeliveryProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deliveryProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"getRegisteredWormholeRelayerContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionParameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"quoteDeliveryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionInfo\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"quoteEVMDeliveryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainRefundPerGasUnused\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"quoteEVMDeliveryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainRefundPerGasUnused\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentChainAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"quoteNativeForChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey\",\"name\":\"deliveryVaaKey\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newEncodedExecutionParameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"newDeliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"resend\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey\",\"name\":\"deliveryVaaKey\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDeliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"resendToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"targetAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionParameters\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"refundAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey[]\",\"name\":\"vaaKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"send\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"targetAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionParameters\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"refundAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"encodedKey\",\"type\":\"bytes\"}],\"internalType\":\"struct MessageKey[]\",\"name\":\"messageKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"send\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"sendPayloadToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"sendPayloadToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey[]\",\"name\":\"vaaKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"sendToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"encodedKey\",\"type\":\"bytes\"}],\"internalType\":\"struct MessageKey[]\",\"name\":\"messageKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"sendToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey[]\",\"name\":\"vaaKeys\",\"type\":\"tuple[]\"}],\"name\":\"sendVaasToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey[]\",\"name\":\"vaaKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"sendVaasToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Delivery(address,uint16,uint64,bytes32,uint8,uint256,uint8,bytes,bytes)\":{\"custom:member\":\"recipientContract - The target contract addresssourceChain - The chain which this delivery was requested from (in wormhole     ChainID format)sequence - The wormhole sequence number of the delivery VAA on the source chain     corresponding to this delivery requestdeliveryVaaHash - The hash of the delivery VAA corresponding to this delivery     requestgasUsed - The amount of gas that was used to call your target contractstatus:   - RECEIVER_FAILURE, if the target contract reverts   - SUCCESS, if the target contract doesn't revertadditionalStatusInfo:   - If status is SUCCESS, then this is empty.   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the       return data (i.e. potentially truncated revert reason information).refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,     where a cross chain refund is necessary, or if the default code path is used where no refund is requested (NO_REFUND_REQUESTED)overridesInfo:   - If not an override: empty bytes array   - Otherwise: An encoded `DeliveryOverride`\"}},\"kind\":\"dev\",\"methods\":{\"deliver(bytes[],bytes,address,bytes)\":{\"params\":{\"deliveryOverrides\":\"- Optional overrides field which must be either an empty bytes array or     an encoded DeliveryOverride struct\",\"encodedDeliveryVAA\":\"- Signed wormhole message from the source chain's WormholeRelayer     contract with payload being the encoded delivery instruction container\",\"encodedVMs\":\"- An array of signed wormhole messages (all from the same source chain     transaction)\",\"relayerRefundAddress\":\"- The address to which any refunds to the delivery provider     should be sent\"}},\"getDefaultDeliveryProvider()\":{\"returns\":{\"deliveryProvider\":\"The address of (the default delivery provider)'s contract on this source   chain. This must be a contract that implements IDeliveryProvider.\"}},\"quoteDeliveryPrice(uint16,uint256,bytes,address)\":{\"params\":{\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"encodedExecutionParameters\":\"encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"encodedExecutionInfo\":\"encoded information on how the delivery will be executed        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`             (which is the amount of target chain currency that will be refunded per unit of gas unused,              if a refundAddress is specified)\",\"nativePriceQuote\":\"Price, in units of current chain currency, that the delivery provider charges to perform the relay\"}},\"quoteEVMDeliveryPrice(uint16,uint256,uint256)\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`.\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"nativePriceQuote\":\"Price, in units of current chain currency, that the delivery provider charges to perform the relay\",\"targetChainRefundPerGasUnused\":\"amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified.         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain.\"}},\"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)\":{\"params\":{\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"gasLimit\":\"gas limit with which to call `targetAddress`.\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"nativePriceQuote\":\"Price, in units of current chain currency, that the delivery provider charges to perform the relay\",\"targetChainRefundPerGasUnused\":\"amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain.\"}},\"quoteNativeForChain(uint16,uint256,address)\":{\"params\":{\"currentChainAmount\":\"The value that `paymentForExtraReceiverValue` will be set to\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"targetChainAmount\":\"The amount such that if `targetAddress` will be called with `msg.value` equal to         receiverValue + targetChainAmount\"}},\"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)\":{\"params\":{\"deliveryVaaKey\":\"VaaKey identifying the wormhole message containing the        previously published delivery instructions\",\"newDeliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"newEncodedExecutionParameters\":\"new encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\",\"newReceiverValue\":\"new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing redelivery instructions\"}},\"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)\":{\"params\":{\"deliveryVaaKey\":\"VaaKey identifying the wormhole message containing the        previously published delivery instructions\",\"newDeliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"newGasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request\",\"newReceiverValue\":\"new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing redelivery instructions\"}},\"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)\":{\"params\":{\"consistencyLevel\":\"Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"encodedExecutionParameters\":\"encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"paymentForExtraReceiverValue\":\"amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\",\"targetChain\":\"in Wormhole Chain ID format\",\"vaaKeys\":\"Additional VAAs to pass in as parameter in call to `targetAddress`\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)\":{\"params\":{\"consistencyLevel\":\"Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"encodedExecutionParameters\":\"encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\",\"messageKeys\":\"Additional messagess to pass in as parameter in call to `targetAddress`\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"paymentForExtraReceiverValue\":\"amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`.\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)\":{\"params\":{\"consistencyLevel\":\"Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"gasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"paymentForExtraReceiverValue\":\"amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\",\"vaaKeys\":\"Additional VAAs to pass in as parameter in call to `targetAddress`\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)\":{\"params\":{\"consistencyLevel\":\"Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"gasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\",\"messageKeys\":\"Additional messagess to pass in as parameter in call to `targetAddress`\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"paymentForExtraReceiverValue\":\"amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`.\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\",\"vaaKeys\":\"Additional VAAs to pass in as parameter in call to `targetAddress`\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\",\"vaaKeys\":\"Additional VAAs to pass in as parameter in call to `targetAddress`\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deliver(bytes[],bytes,address,bytes)\":{\"notice\":\"The delivery provider calls `deliver` to relay messages as described by one delivery instruction The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain as well as the signed wormhole message with the delivery instructions (the delivery VAA) The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met: - the delivery VAA has a valid signature - the delivery VAA's emitter is one of these WormholeRelayer contracts - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund) - the instruction's target chain is this chain - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)\"},\"deliveryAttempted(bytes32)\":{\"notice\":\"Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted\"},\"deliveryFailureBlock(bytes32)\":{\"notice\":\"block number of the latest attempt to execute a delivery that failed\"},\"deliverySuccessBlock(bytes32)\":{\"notice\":\"block number at which a delivery was successfully executed\"},\"getDefaultDeliveryProvider()\":{\"notice\":\"Returns the address of the current default delivery provider\"},\"quoteDeliveryPrice(uint16,uint256,bytes,address)\":{\"notice\":\"Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\"},\"quoteEVMDeliveryPrice(uint16,uint256,uint256)\":{\"notice\":\"Returns the price to request a relay to chain `targetChain`, using the default delivery provider\"},\"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)\":{\"notice\":\"Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\"},\"quoteNativeForChain(uint16,uint256,address)\":{\"notice\":\"Returns the (extra) amount of target chain currency that `targetAddress` will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`\"},\"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)\":{\"notice\":\"Requests a previously published delivery instruction to be redelivered This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - (For EVM_V1) newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - (For EVM_V1) newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\"},\"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)\":{\"notice\":\"Requests a previously published delivery instruction to be redelivered (e.g. with a different delivery provider) This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction\"},\"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)\":{\"notice\":\"Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue\"},\"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)\":{\"notice\":\"Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!\"},\"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)\":{\"notice\":\"Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function with `refundChain` and `refundAddress` as parameters\"},\"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)\":{\"notice\":\"Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\"},\"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)\":{\"notice\":\"Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue\"},\"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)\":{\"notice\":\"Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and external messages specified by `messageKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!\"},\"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])\":{\"notice\":\"Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function with `refundChain` and `refundAddress` as parameters\"},\"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)\":{\"notice\":\"Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":\"IWormholeRelayer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":{\"keccak256\":\"0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af\",\"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"deliver(bytes[],bytes,address,bytes)": {
								"notice": "The delivery provider calls `deliver` to relay messages as described by one delivery instruction The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain as well as the signed wormhole message with the delivery instructions (the delivery VAA) The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met: - the delivery VAA has a valid signature - the delivery VAA's emitter is one of these WormholeRelayer contracts - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund) - the instruction's target chain is this chain - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)"
							},
							"deliveryAttempted(bytes32)": {
								"notice": "Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted"
							},
							"deliveryFailureBlock(bytes32)": {
								"notice": "block number of the latest attempt to execute a delivery that failed"
							},
							"deliverySuccessBlock(bytes32)": {
								"notice": "block number at which a delivery was successfully executed"
							},
							"getDefaultDeliveryProvider()": {
								"notice": "Returns the address of the current default delivery provider"
							},
							"quoteDeliveryPrice(uint16,uint256,bytes,address)": {
								"notice": "Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`"
							},
							"quoteEVMDeliveryPrice(uint16,uint256,uint256)": {
								"notice": "Returns the price to request a relay to chain `targetChain`, using the default delivery provider"
							},
							"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": {
								"notice": "Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`"
							},
							"quoteNativeForChain(uint16,uint256,address)": {
								"notice": "Returns the (extra) amount of target chain currency that `targetAddress` will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`"
							},
							"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": {
								"notice": "Requests a previously published delivery instruction to be redelivered This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - (For EVM_V1) newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - (For EVM_V1) newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`"
							},
							"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": {
								"notice": "Requests a previously published delivery instruction to be redelivered (e.g. with a different delivery provider) This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction"
							},
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": {
								"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue"
							},
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": {
								"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!"
							},
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": {
								"notice": "Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function with `refundChain` and `refundAddress` as parameters"
							},
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": {
								"notice": "Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`"
							},
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": {
								"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue"
							},
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": {
								"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and external messages specified by `messageKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!"
							},
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": {
								"notice": "Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function with `refundChain` and `refundAddress` as parameters"
							},
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": {
								"notice": "Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`"
							}
						},
						"version": 1
					}
				},
				"IWormholeRelayerBase": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "deliveryQuote",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								}
							],
							"name": "SendEvent",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliveryAttempted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "attempted",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliveryFailureBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "blockNumber",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliverySuccessBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "blockNumber",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "chainId",
									"type": "uint16"
								}
							],
							"name": "getRegisteredWormholeRelayerContract",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"deliveryAttempted(bytes32)": "d0625a19",
							"deliveryFailureBlock(bytes32)": "5a3b92e8",
							"deliverySuccessBlock(bytes32)": "40984f08",
							"getRegisteredWormholeRelayerContract(uint16)": "3e8267e7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deliveryQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"}],\"name\":\"SendEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryAttempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"attempted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryFailureBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliverySuccessBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"getRegisteredWormholeRelayerContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deliveryAttempted(bytes32)\":{\"notice\":\"Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted\"},\"deliveryFailureBlock(bytes32)\":{\"notice\":\"block number of the latest attempt to execute a delivery that failed\"},\"deliverySuccessBlock(bytes32)\":{\"notice\":\"block number at which a delivery was successfully executed\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":\"IWormholeRelayerBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":{\"keccak256\":\"0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af\",\"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"deliveryAttempted(bytes32)": {
								"notice": "Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted"
							},
							"deliveryFailureBlock(bytes32)": {
								"notice": "block number of the latest attempt to execute a delivery that failed"
							},
							"deliverySuccessBlock(bytes32)": {
								"notice": "block number at which a delivery was successfully executed"
							}
						},
						"version": 1
					}
				},
				"IWormholeRelayerDelivery": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipientContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint16",
									"name": "sourceChain",
									"type": "uint16"
								},
								{
									"indexed": true,
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "deliveryVaaHash",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "enum IWormholeRelayerDelivery.DeliveryStatus",
									"name": "status",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "gasUsed",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "enum IWormholeRelayerDelivery.RefundStatus",
									"name": "refundStatus",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "additionalStatusInfo",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "overridesInfo",
									"type": "bytes"
								}
							],
							"name": "Delivery",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "deliveryQuote",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								}
							],
							"name": "SendEvent",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "encodedVMs",
									"type": "bytes[]"
								},
								{
									"internalType": "bytes",
									"name": "encodedDeliveryVAA",
									"type": "bytes"
								},
								{
									"internalType": "address payable",
									"name": "relayerRefundAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "deliveryOverrides",
									"type": "bytes"
								}
							],
							"name": "deliver",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliveryAttempted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "attempted",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliveryFailureBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "blockNumber",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliverySuccessBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "blockNumber",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "chainId",
									"type": "uint16"
								}
							],
							"name": "getRegisteredWormholeRelayerContract",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Delivery(address,uint16,uint64,bytes32,uint8,uint256,uint8,bytes,bytes)": {
								"custom:member": "recipientContract - The target contract addresssourceChain - The chain which this delivery was requested from (in wormhole     ChainID format)sequence - The wormhole sequence number of the delivery VAA on the source chain     corresponding to this delivery requestdeliveryVaaHash - The hash of the delivery VAA corresponding to this delivery     requestgasUsed - The amount of gas that was used to call your target contractstatus:   - RECEIVER_FAILURE, if the target contract reverts   - SUCCESS, if the target contract doesn't revertadditionalStatusInfo:   - If status is SUCCESS, then this is empty.   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the       return data (i.e. potentially truncated revert reason information).refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,     where a cross chain refund is necessary, or if the default code path is used where no refund is requested (NO_REFUND_REQUESTED)overridesInfo:   - If not an override: empty bytes array   - Otherwise: An encoded `DeliveryOverride`"
							}
						},
						"kind": "dev",
						"methods": {
							"deliver(bytes[],bytes,address,bytes)": {
								"params": {
									"deliveryOverrides": "- Optional overrides field which must be either an empty bytes array or     an encoded DeliveryOverride struct",
									"encodedDeliveryVAA": "- Signed wormhole message from the source chain's WormholeRelayer     contract with payload being the encoded delivery instruction container",
									"encodedVMs": "- An array of signed wormhole messages (all from the same source chain     transaction)",
									"relayerRefundAddress": "- The address to which any refunds to the delivery provider     should be sent"
								}
							}
						},
						"title": "IWormholeRelayerDelivery",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"deliver(bytes[],bytes,address,bytes)": "a60eb4c8",
							"deliveryAttempted(bytes32)": "d0625a19",
							"deliveryFailureBlock(bytes32)": "5a3b92e8",
							"deliverySuccessBlock(bytes32)": "40984f08",
							"getRegisteredWormholeRelayerContract(uint16)": "3e8267e7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deliveryVaaHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IWormholeRelayerDelivery.DeliveryStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IWormholeRelayerDelivery.RefundStatus\",\"name\":\"refundStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"additionalStatusInfo\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"overridesInfo\",\"type\":\"bytes\"}],\"name\":\"Delivery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deliveryQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"}],\"name\":\"SendEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"encodedVMs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"encodedDeliveryVAA\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"relayerRefundAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"deliveryOverrides\",\"type\":\"bytes\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryAttempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"attempted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryFailureBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliverySuccessBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"getRegisteredWormholeRelayerContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Delivery(address,uint16,uint64,bytes32,uint8,uint256,uint8,bytes,bytes)\":{\"custom:member\":\"recipientContract - The target contract addresssourceChain - The chain which this delivery was requested from (in wormhole     ChainID format)sequence - The wormhole sequence number of the delivery VAA on the source chain     corresponding to this delivery requestdeliveryVaaHash - The hash of the delivery VAA corresponding to this delivery     requestgasUsed - The amount of gas that was used to call your target contractstatus:   - RECEIVER_FAILURE, if the target contract reverts   - SUCCESS, if the target contract doesn't revertadditionalStatusInfo:   - If status is SUCCESS, then this is empty.   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the       return data (i.e. potentially truncated revert reason information).refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,     where a cross chain refund is necessary, or if the default code path is used where no refund is requested (NO_REFUND_REQUESTED)overridesInfo:   - If not an override: empty bytes array   - Otherwise: An encoded `DeliveryOverride`\"}},\"kind\":\"dev\",\"methods\":{\"deliver(bytes[],bytes,address,bytes)\":{\"params\":{\"deliveryOverrides\":\"- Optional overrides field which must be either an empty bytes array or     an encoded DeliveryOverride struct\",\"encodedDeliveryVAA\":\"- Signed wormhole message from the source chain's WormholeRelayer     contract with payload being the encoded delivery instruction container\",\"encodedVMs\":\"- An array of signed wormhole messages (all from the same source chain     transaction)\",\"relayerRefundAddress\":\"- The address to which any refunds to the delivery provider     should be sent\"}}},\"title\":\"IWormholeRelayerDelivery\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deliver(bytes[],bytes,address,bytes)\":{\"notice\":\"The delivery provider calls `deliver` to relay messages as described by one delivery instruction The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain as well as the signed wormhole message with the delivery instructions (the delivery VAA) The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met: - the delivery VAA has a valid signature - the delivery VAA's emitter is one of these WormholeRelayer contracts - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund) - the instruction's target chain is this chain - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)\"},\"deliveryAttempted(bytes32)\":{\"notice\":\"Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted\"},\"deliveryFailureBlock(bytes32)\":{\"notice\":\"block number of the latest attempt to execute a delivery that failed\"},\"deliverySuccessBlock(bytes32)\":{\"notice\":\"block number at which a delivery was successfully executed\"}},\"notice\":\"The interface to execute deliveries. Only relevant for Delivery Providers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":\"IWormholeRelayerDelivery\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":{\"keccak256\":\"0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af\",\"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"deliver(bytes[],bytes,address,bytes)": {
								"notice": "The delivery provider calls `deliver` to relay messages as described by one delivery instruction The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain as well as the signed wormhole message with the delivery instructions (the delivery VAA) The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met: - the delivery VAA has a valid signature - the delivery VAA's emitter is one of these WormholeRelayer contracts - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund) - the instruction's target chain is this chain - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)"
							},
							"deliveryAttempted(bytes32)": {
								"notice": "Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted"
							},
							"deliveryFailureBlock(bytes32)": {
								"notice": "block number of the latest attempt to execute a delivery that failed"
							},
							"deliverySuccessBlock(bytes32)": {
								"notice": "block number at which a delivery was successfully executed"
							}
						},
						"notice": "The interface to execute deliveries. Only relevant for Delivery Providers",
						"version": 1
					}
				},
				"IWormholeRelayerSend": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "deliveryQuote",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								}
							],
							"name": "SendEvent",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliveryAttempted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "attempted",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliveryFailureBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "blockNumber",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "deliveryHash",
									"type": "bytes32"
								}
							],
							"name": "deliverySuccessBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "blockNumber",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getDefaultDeliveryProvider",
							"outputs": [
								{
									"internalType": "address",
									"name": "deliveryProvider",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "chainId",
									"type": "uint16"
								}
							],
							"name": "getRegisteredWormholeRelayerContract",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "encodedExecutionParameters",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "quoteDeliveryPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nativePriceQuote",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "encodedExecutionInfo",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "quoteEVMDeliveryPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nativePriceQuote",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "targetChainRefundPerGasUnused",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								}
							],
							"name": "quoteEVMDeliveryPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "nativePriceQuote",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "targetChainRefundPerGasUnused",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "currentChainAmount",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "quoteNativeForChain",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "targetChainAmount",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey",
									"name": "deliveryVaaKey",
									"type": "tuple"
								},
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "newReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "newEncodedExecutionParameters",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "newDeliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "resend",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey",
									"name": "deliveryVaaKey",
									"type": "tuple"
								},
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "uint256",
									"name": "newReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "newGasLimit",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "newDeliveryProviderAddress",
									"type": "address"
								}
							],
							"name": "resendToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "targetAddress",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "encodedExecutionParameters",
									"type": "bytes"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "refundAddress",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey[]",
									"name": "vaaKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "send",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "targetAddress",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "encodedExecutionParameters",
									"type": "bytes"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "bytes32",
									"name": "refundAddress",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "keyType",
											"type": "uint8"
										},
										{
											"internalType": "bytes",
											"name": "encodedKey",
											"type": "bytes"
										}
									],
									"internalType": "struct MessageKey[]",
									"name": "messageKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "send",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "refundAddress",
									"type": "address"
								}
							],
							"name": "sendPayloadToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								}
							],
							"name": "sendPayloadToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "refundAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey[]",
									"name": "vaaKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "sendToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "paymentForExtraReceiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "refundAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "deliveryProviderAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "keyType",
											"type": "uint8"
										},
										{
											"internalType": "bytes",
											"name": "encodedKey",
											"type": "bytes"
										}
									],
									"internalType": "struct MessageKey[]",
									"name": "messageKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint8",
									"name": "consistencyLevel",
									"type": "uint8"
								}
							],
							"name": "sendToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey[]",
									"name": "vaaKeys",
									"type": "tuple[]"
								}
							],
							"name": "sendVaasToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "targetChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "targetAddress",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "payload",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "receiverValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "gasLimit",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint16",
											"name": "chainId",
											"type": "uint16"
										},
										{
											"internalType": "bytes32",
											"name": "emitterAddress",
											"type": "bytes32"
										},
										{
											"internalType": "uint64",
											"name": "sequence",
											"type": "uint64"
										}
									],
									"internalType": "struct VaaKey[]",
									"name": "vaaKeys",
									"type": "tuple[]"
								},
								{
									"internalType": "uint16",
									"name": "refundChain",
									"type": "uint16"
								},
								{
									"internalType": "address",
									"name": "refundAddress",
									"type": "address"
								}
							],
							"name": "sendVaasToEvm",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "sequence",
									"type": "uint64"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getDefaultDeliveryProvider()": {
								"returns": {
									"deliveryProvider": "The address of (the default delivery provider)'s contract on this source   chain. This must be a contract that implements IDeliveryProvider."
								}
							},
							"quoteDeliveryPrice(uint16,uint256,bytes,address)": {
								"params": {
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"encodedExecutionParameters": "encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"encodedExecutionInfo": "encoded information on how the delivery will be executed        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`             (which is the amount of target chain currency that will be refunded per unit of gas unused,              if a refundAddress is specified)",
									"nativePriceQuote": "Price, in units of current chain currency, that the delivery provider charges to perform the relay"
								}
							},
							"quoteEVMDeliveryPrice(uint16,uint256,uint256)": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`.",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"nativePriceQuote": "Price, in units of current chain currency, that the delivery provider charges to perform the relay",
									"targetChainRefundPerGasUnused": "amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified.         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain."
								}
							},
							"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": {
								"params": {
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"gasLimit": "gas limit with which to call `targetAddress`.",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"nativePriceQuote": "Price, in units of current chain currency, that the delivery provider charges to perform the relay",
									"targetChainRefundPerGasUnused": "amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain."
								}
							},
							"quoteNativeForChain(uint16,uint256,address)": {
								"params": {
									"currentChainAmount": "The value that `paymentForExtraReceiverValue` will be set to",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"targetChainAmount": "The amount such that if `targetAddress` will be called with `msg.value` equal to         receiverValue + targetChainAmount"
								}
							},
							"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": {
								"params": {
									"deliveryVaaKey": "VaaKey identifying the wormhole message containing the        previously published delivery instructions",
									"newDeliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"newEncodedExecutionParameters": "new encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
									"newReceiverValue": "new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "The target chain that the original delivery targeted. Must match targetChain from original delivery instructions"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing redelivery instructions"
								}
							},
							"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": {
								"params": {
									"deliveryVaaKey": "VaaKey identifying the wormhole message containing the        previously published delivery instructions",
									"newDeliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"newGasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request",
									"newReceiverValue": "new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetChain": "The target chain that the original delivery targeted. Must match targetChain from original delivery instructions"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing redelivery instructions"
								}
							},
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": {
								"params": {
									"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"encodedExecutionParameters": "encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format",
									"targetChain": "in Wormhole Chain ID format",
									"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": {
								"params": {
									"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"encodedExecutionParameters": "encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
									"messageKeys": "Additional messagess to pass in as parameter in call to `targetAddress`",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`.",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": {
								"params": {
									"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format",
									"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": {
								"params": {
									"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
									"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
									"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
									"messageKeys": "Additional messagess to pass in as parameter in call to `targetAddress`",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`.",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format",
									"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							},
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": {
								"params": {
									"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
									"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
									"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
									"refundAddress": "The address on `refundChain` to deliver any refund to",
									"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
									"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
									"targetChain": "in Wormhole Chain ID format",
									"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
								},
								"returns": {
									"sequence": "sequence number of published VAA containing delivery instructions"
								}
							}
						},
						"title": "IWormholeRelayerSend",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"deliveryAttempted(bytes32)": "d0625a19",
							"deliveryFailureBlock(bytes32)": "5a3b92e8",
							"deliverySuccessBlock(bytes32)": "40984f08",
							"getDefaultDeliveryProvider()": "24320c9f",
							"getRegisteredWormholeRelayerContract(uint16)": "3e8267e7",
							"quoteDeliveryPrice(uint16,uint256,bytes,address)": "a79629d8",
							"quoteEVMDeliveryPrice(uint16,uint256,uint256)": "c23ee3c3",
							"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": "80ebabd0",
							"quoteNativeForChain(uint16,uint256,address)": "2385904a",
							"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": "b686d089",
							"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": "8b0301b1",
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": "c81fb7fe",
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": "cee4bda0",
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": "8fecdd02",
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": "4b5ca6f4",
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": "3a2c767d",
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": "c055120e",
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": "329a2be7",
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": "32b2fc0e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deliveryQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"}],\"name\":\"SendEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryAttempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"attempted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliveryFailureBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"deliverySuccessBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultDeliveryProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deliveryProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"getRegisteredWormholeRelayerContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionParameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"quoteDeliveryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionInfo\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"quoteEVMDeliveryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainRefundPerGasUnused\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"quoteEVMDeliveryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainRefundPerGasUnused\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentChainAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"quoteNativeForChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey\",\"name\":\"deliveryVaaKey\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newEncodedExecutionParameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"newDeliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"resend\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey\",\"name\":\"deliveryVaaKey\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDeliveryProviderAddress\",\"type\":\"address\"}],\"name\":\"resendToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"targetAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionParameters\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"refundAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey[]\",\"name\":\"vaaKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"send\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"targetAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedExecutionParameters\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"refundAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"encodedKey\",\"type\":\"bytes\"}],\"internalType\":\"struct MessageKey[]\",\"name\":\"messageKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"send\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"sendPayloadToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"sendPayloadToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey[]\",\"name\":\"vaaKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"sendToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentForExtraReceiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deliveryProviderAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"encodedKey\",\"type\":\"bytes\"}],\"internalType\":\"struct MessageKey[]\",\"name\":\"messageKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"sendToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey[]\",\"name\":\"vaaKeys\",\"type\":\"tuple[]\"}],\"name\":\"sendVaasToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct VaaKey[]\",\"name\":\"vaaKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"sendVaasToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getDefaultDeliveryProvider()\":{\"returns\":{\"deliveryProvider\":\"The address of (the default delivery provider)'s contract on this source   chain. This must be a contract that implements IDeliveryProvider.\"}},\"quoteDeliveryPrice(uint16,uint256,bytes,address)\":{\"params\":{\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"encodedExecutionParameters\":\"encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"encodedExecutionInfo\":\"encoded information on how the delivery will be executed        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`             (which is the amount of target chain currency that will be refunded per unit of gas unused,              if a refundAddress is specified)\",\"nativePriceQuote\":\"Price, in units of current chain currency, that the delivery provider charges to perform the relay\"}},\"quoteEVMDeliveryPrice(uint16,uint256,uint256)\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`.\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"nativePriceQuote\":\"Price, in units of current chain currency, that the delivery provider charges to perform the relay\",\"targetChainRefundPerGasUnused\":\"amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified.         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain.\"}},\"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)\":{\"params\":{\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"gasLimit\":\"gas limit with which to call `targetAddress`.\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"nativePriceQuote\":\"Price, in units of current chain currency, that the delivery provider charges to perform the relay\",\"targetChainRefundPerGasUnused\":\"amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain.\"}},\"quoteNativeForChain(uint16,uint256,address)\":{\"params\":{\"currentChainAmount\":\"The value that `paymentForExtraReceiverValue` will be set to\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"targetChainAmount\":\"The amount such that if `targetAddress` will be called with `msg.value` equal to         receiverValue + targetChainAmount\"}},\"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)\":{\"params\":{\"deliveryVaaKey\":\"VaaKey identifying the wormhole message containing the        previously published delivery instructions\",\"newDeliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"newEncodedExecutionParameters\":\"new encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\",\"newReceiverValue\":\"new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing redelivery instructions\"}},\"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)\":{\"params\":{\"deliveryVaaKey\":\"VaaKey identifying the wormhole message containing the        previously published delivery instructions\",\"newDeliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"newGasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request\",\"newReceiverValue\":\"new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetChain\":\"The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing redelivery instructions\"}},\"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)\":{\"params\":{\"consistencyLevel\":\"Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"encodedExecutionParameters\":\"encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"paymentForExtraReceiverValue\":\"amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\",\"targetChain\":\"in Wormhole Chain ID format\",\"vaaKeys\":\"Additional VAAs to pass in as parameter in call to `targetAddress`\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)\":{\"params\":{\"consistencyLevel\":\"Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"encodedExecutionParameters\":\"encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\",\"messageKeys\":\"Additional messagess to pass in as parameter in call to `targetAddress`\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"paymentForExtraReceiverValue\":\"amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`.\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)\":{\"params\":{\"consistencyLevel\":\"Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"gasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"paymentForExtraReceiverValue\":\"amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\",\"vaaKeys\":\"Additional VAAs to pass in as parameter in call to `targetAddress`\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)\":{\"params\":{\"consistencyLevel\":\"Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\",\"deliveryProviderAddress\":\"The address of the desired delivery provider's implementation of IDeliveryProvider\",\"gasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\",\"messageKeys\":\"Additional messagess to pass in as parameter in call to `targetAddress`\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"paymentForExtraReceiverValue\":\"amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`.\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\",\"vaaKeys\":\"Additional VAAs to pass in as parameter in call to `targetAddress`\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}},\"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)\":{\"params\":{\"gasLimit\":\"gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\",\"payload\":\"arbitrary bytes to pass in as parameter in call to `targetAddress`\",\"receiverValue\":\"msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\",\"refundAddress\":\"The address on `refundChain` to deliver any refund to\",\"refundChain\":\"The chain to deliver any refund to, in Wormhole Chain ID format\",\"targetAddress\":\"address to call on targetChain (that implements IWormholeReceiver)\",\"targetChain\":\"in Wormhole Chain ID format\",\"vaaKeys\":\"Additional VAAs to pass in as parameter in call to `targetAddress`\"},\"returns\":{\"sequence\":\"sequence number of published VAA containing delivery instructions\"}}},\"title\":\"IWormholeRelayerSend\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deliveryAttempted(bytes32)\":{\"notice\":\"Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted\"},\"deliveryFailureBlock(bytes32)\":{\"notice\":\"block number of the latest attempt to execute a delivery that failed\"},\"deliverySuccessBlock(bytes32)\":{\"notice\":\"block number at which a delivery was successfully executed\"},\"getDefaultDeliveryProvider()\":{\"notice\":\"Returns the address of the current default delivery provider\"},\"quoteDeliveryPrice(uint16,uint256,bytes,address)\":{\"notice\":\"Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\"},\"quoteEVMDeliveryPrice(uint16,uint256,uint256)\":{\"notice\":\"Returns the price to request a relay to chain `targetChain`, using the default delivery provider\"},\"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)\":{\"notice\":\"Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\"},\"quoteNativeForChain(uint16,uint256,address)\":{\"notice\":\"Returns the (extra) amount of target chain currency that `targetAddress` will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`\"},\"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)\":{\"notice\":\"Requests a previously published delivery instruction to be redelivered This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - (For EVM_V1) newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - (For EVM_V1) newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\"},\"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)\":{\"notice\":\"Requests a previously published delivery instruction to be redelivered (e.g. with a different delivery provider) This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction\"},\"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)\":{\"notice\":\"Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue\"},\"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)\":{\"notice\":\"Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!\"},\"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)\":{\"notice\":\"Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function with `refundChain` and `refundAddress` as parameters\"},\"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)\":{\"notice\":\"Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\"},\"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)\":{\"notice\":\"Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue\"},\"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)\":{\"notice\":\"Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and external messages specified by `messageKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!\"},\"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])\":{\"notice\":\"Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function with `refundChain` and `refundAddress` as parameters\"},\"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)\":{\"notice\":\"Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\"}},\"notice\":\"The interface to request deliveries\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":\"IWormholeRelayerSend\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol\":{\"keccak256\":\"0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af\",\"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"deliveryAttempted(bytes32)": {
								"notice": "Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted"
							},
							"deliveryFailureBlock(bytes32)": {
								"notice": "block number of the latest attempt to execute a delivery that failed"
							},
							"deliverySuccessBlock(bytes32)": {
								"notice": "block number at which a delivery was successfully executed"
							},
							"getDefaultDeliveryProvider()": {
								"notice": "Returns the address of the current default delivery provider"
							},
							"quoteDeliveryPrice(uint16,uint256,bytes,address)": {
								"notice": "Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`"
							},
							"quoteEVMDeliveryPrice(uint16,uint256,uint256)": {
								"notice": "Returns the price to request a relay to chain `targetChain`, using the default delivery provider"
							},
							"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": {
								"notice": "Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`"
							},
							"quoteNativeForChain(uint16,uint256,address)": {
								"notice": "Returns the (extra) amount of target chain currency that `targetAddress` will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`"
							},
							"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": {
								"notice": "Requests a previously published delivery instruction to be redelivered This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - (For EVM_V1) newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - (For EVM_V1) newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`"
							},
							"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": {
								"notice": "Requests a previously published delivery instruction to be redelivered (e.g. with a different delivery provider) This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction"
							},
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": {
								"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue"
							},
							"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": {
								"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!"
							},
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": {
								"notice": "Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function with `refundChain` and `refundAddress` as parameters"
							},
							"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": {
								"notice": "Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`"
							},
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": {
								"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue"
							},
							"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": {
								"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and external messages specified by `messageKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!"
							},
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": {
								"notice": "Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function with `refundChain` and `refundAddress` as parameters"
							},
							"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": {
								"notice": "Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`"
							}
						},
						"notice": "The interface to request deliveries",
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> BRIDGE_PARTNERSHIP/src/Base.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "BRIDGE_PARTNERSHIP/src/Base.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> BRIDGE_PARTNERSHIP/src/CCTPBase.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> BRIDGE_PARTNERSHIP/src/Utils.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "BRIDGE_PARTNERSHIP/src/Utils.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"BRIDGE_PARTNERSHIP/src/Base.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/Base.sol",
					"exportedSymbols": {
						"Base": [
							98
						],
						"DeliveryProviderCannotReceivePayment": [
							1503
						],
						"DeliveryProviderDoesNotSupportMessageKeyType": [
							1507
						],
						"DeliveryProviderDoesNotSupportTargetChain": [
							1501
						],
						"IWormhole": [
							1050
						],
						"IWormholeReceiver": [
							1069
						],
						"IWormholeRelayer": [
							1484
						],
						"IWormholeRelayerBase": [
							1127
						],
						"IWormholeRelayerDelivery": [
							1479
						],
						"IWormholeRelayerSend": [
							1429
						],
						"InsufficientRelayerFunds": [
							1573
						],
						"InvalidDeliveryVaa": [
							1537
						],
						"InvalidEmitter": [
							1545
						],
						"InvalidMsgValue": [
							1493
						],
						"InvalidOverrideGasLimit": [
							1563
						],
						"InvalidOverrideReceiverValue": [
							1565
						],
						"InvalidOverrideRefundPerGasUnused": [
							1567
						],
						"InvalidPayloadId": [
							1519
						],
						"InvalidPayloadLength": [
							1525
						],
						"InvalidVaaKeyType": [
							1529
						],
						"MessageKey": [
							1087
						],
						"MessageKeysLengthDoesNotMatchMessagesLength": [
							1551
						],
						"NotAnEvmAddress": [
							1577
						],
						"RETURNDATA_TRUNCATION_THRESHOLD": [
							1487
						],
						"ReentrantDelivery": [
							1513
						],
						"RequestedGasLimitTooLow": [
							1495
						],
						"RequesterNotWormholeRelayer": [
							1557
						],
						"TargetChainIsNotThisChain": [
							1561
						],
						"TooManyMessageKeys": [
							1533
						],
						"VAA_KEY_TYPE": [
							1082
						],
						"VaaKey": [
							1079
						],
						"VaaKeysDoNotMatchVaas": [
							1555
						],
						"addressToBytes32CCTP": [
							571
						],
						"fromWormholeFormat": [
							559
						],
						"toWormholeFormat": [
							526
						]
					},
					"id": 99,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:0"
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol",
							"file": "./interfaces/IWormholeReceiver.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 99,
							"sourceUnit": 1070,
							"src": "28:44:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol",
							"file": "./interfaces/IWormholeRelayer.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 99,
							"sourceUnit": 1578,
							"src": "74:43:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol",
							"file": "./interfaces/IWormhole.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 99,
							"sourceUnit": 1051,
							"src": "119:36:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/Utils.sol",
							"file": "./Utils.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 99,
							"sourceUnit": 572,
							"src": "157:21:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Base",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 98,
							"linearizedBaseContracts": [
								98
							],
							"name": "Base",
							"nameLocation": "200:4:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "da25b725",
									"id": 8,
									"mutability": "mutable",
									"name": "wormholeRelayer",
									"nameLocation": "236:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 98,
									"src": "212:39:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
										"typeString": "contract IWormholeRelayer"
									},
									"typeName": {
										"id": 7,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 6,
											"name": "IWormholeRelayer",
											"nameLocations": [
												"212:16:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1484,
											"src": "212:16:0"
										},
										"referencedDeclaration": 1484,
										"src": "212:16:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
											"typeString": "contract IWormholeRelayer"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "84acd1bb",
									"id": 11,
									"mutability": "mutable",
									"name": "wormhole",
									"nameLocation": "275:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 98,
									"src": "258:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IWormhole_$1050",
										"typeString": "contract IWormhole"
									},
									"typeName": {
										"id": 10,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 9,
											"name": "IWormhole",
											"nameLocations": [
												"258:9:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1050,
											"src": "258:9:0"
										},
										"referencedDeclaration": 1050,
										"src": "258:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IWormhole_$1050",
											"typeString": "contract IWormhole"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 13,
									"mutability": "mutable",
									"name": "registrationOwner",
									"nameLocation": "300:17:0",
									"nodeType": "VariableDeclaration",
									"scope": 98,
									"src": "292:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 12,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "292:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 17,
									"mutability": "mutable",
									"name": "registeredSenders",
									"nameLocation": "351:17:0",
									"nodeType": "VariableDeclaration",
									"scope": 98,
									"src": "324:44:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint16_$_t_bytes32_$",
										"typeString": "mapping(uint16 => bytes32)"
									},
									"typeName": {
										"id": 16,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 14,
											"name": "uint16",
											"nodeType": "ElementaryTypeName",
											"src": "332:6:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											}
										},
										"nodeType": "Mapping",
										"src": "324:26:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint16_$_t_bytes32_$",
											"typeString": "mapping(uint16 => bytes32)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 15,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "342:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 41,
										"nodeType": "Block",
										"src": "448:154:0",
										"statements": [
											{
												"expression": {
													"id": 28,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 24,
														"name": "wormholeRelayer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "459:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
															"typeString": "contract IWormholeRelayer"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 26,
																"name": "_wormholeRelayer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 19,
																"src": "494:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 25,
															"name": "IWormholeRelayer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1484,
															"src": "477:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IWormholeRelayer_$1484_$",
																"typeString": "type(contract IWormholeRelayer)"
															}
														},
														"id": 27,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "477:34:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
															"typeString": "contract IWormholeRelayer"
														}
													},
													"src": "459:52:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
														"typeString": "contract IWormholeRelayer"
													}
												},
												"id": 29,
												"nodeType": "ExpressionStatement",
												"src": "459:52:0"
											},
											{
												"expression": {
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 30,
														"name": "wormhole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "522:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IWormhole_$1050",
															"typeString": "contract IWormhole"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 32,
																"name": "_wormhole",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 21,
																"src": "543:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 31,
															"name": "IWormhole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1050,
															"src": "533:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IWormhole_$1050_$",
																"typeString": "type(contract IWormhole)"
															}
														},
														"id": 33,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "533:20:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IWormhole_$1050",
															"typeString": "contract IWormhole"
														}
													},
													"src": "522:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IWormhole_$1050",
														"typeString": "contract IWormhole"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "522:31:0"
											},
											{
												"expression": {
													"id": 39,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 36,
														"name": "registrationOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "564:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 37,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "584:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 38,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "588:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "584:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "564:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 40,
												"nodeType": "ExpressionStatement",
												"src": "564:30:0"
											}
										]
									},
									"id": 42,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_initBase",
									"nameLocation": "386:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "_wormholeRelayer",
												"nameLocation": "404:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "396:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "396:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "_wormhole",
												"nameLocation": "429:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "421:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 20,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "421:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "395:44:0"
									},
									"returnParameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "448:0:0"
									},
									"scope": 98,
									"src": "377:225:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 56,
										"nodeType": "Block",
										"src": "641:153:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 51,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 45,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "674:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "678:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "674:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 49,
																		"name": "wormholeRelayer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 8,
																		"src": "696:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
																			"typeString": "contract IWormholeRelayer"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
																			"typeString": "contract IWormholeRelayer"
																		}
																	],
																	"id": 48,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "688:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 47,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "688:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 50,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "688:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "674:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d73672e73656e646572206973206e6f7420576f726d686f6c652052656c61796572",
															"id": 52,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "727:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a784df99b54c4e5b96bc28db86cb1d2df9d65bd64e07dfeb9d77bc81539828a1",
																"typeString": "literal_string \"Msg.sender is not Wormhole Relayer\""
															},
															"value": "Msg.sender is not Wormhole Relayer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a784df99b54c4e5b96bc28db86cb1d2df9d65bd64e07dfeb9d77bc81539828a1",
																"typeString": "literal_string \"Msg.sender is not Wormhole Relayer\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "652:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 53,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "652:122:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 54,
												"nodeType": "ExpressionStatement",
												"src": "652:122:0"
											},
											{
												"id": 55,
												"nodeType": "PlaceholderStatement",
												"src": "785:1:0"
											}
										]
									},
									"id": 57,
									"name": "onlyWormholeRelayer",
									"nameLocation": "619:19:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "638:2:0"
									},
									"src": "610:184:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "873:149:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 64,
																	"name": "registeredSenders",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 17,
																	"src": "906:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint16_$_t_bytes32_$",
																		"typeString": "mapping(uint16 => bytes32)"
																	}
																},
																"id": 66,
																"indexExpression": {
																	"id": 65,
																	"name": "sourceChain",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 59,
																	"src": "924:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint16",
																		"typeString": "uint16"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "906:30:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 67,
																"name": "sourceAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 61,
																"src": "940:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "906:47:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420726567697374657265642073656e646572",
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "968:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_45c7780caa14c78da314fdccf7a10285ededa4af94cdba7fd53928c53e2adf7b",
																"typeString": "literal_string \"Not registered sender\""
															},
															"value": "Not registered sender"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_45c7780caa14c78da314fdccf7a10285ededa4af94cdba7fd53928c53e2adf7b",
																"typeString": "literal_string \"Not registered sender\""
															}
														],
														"id": 63,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "884:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "884:118:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 71,
												"nodeType": "ExpressionStatement",
												"src": "884:118:0"
											},
											{
												"id": 72,
												"nodeType": "PlaceholderStatement",
												"src": "1013:1:0"
											}
										]
									},
									"id": 74,
									"name": "isRegisteredSender",
									"nameLocation": "811:18:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "sourceChain",
												"nameLocation": "837:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "830:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 58,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "830:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "sourceAddress",
												"nameLocation": "858:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "850:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 60,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "850:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "829:43:0"
									},
									"src": "802:220:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "1477:193:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 86,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 83,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1510:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 84,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1514:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1510:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 85,
																"name": "registrationOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 13,
																"src": "1524:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1510:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420616c6c6f77656420746f2073657420726567697374657265642073656e646572",
															"id": 87,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1556:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_af64e1436a7704ba26fb37b7d363f0e4cd33d85e327e95510c2c8ad50943871e",
																"typeString": "literal_string \"Not allowed to set registered sender\""
															},
															"value": "Not allowed to set registered sender"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_af64e1436a7704ba26fb37b7d363f0e4cd33d85e327e95510c2c8ad50943871e",
																"typeString": "literal_string \"Not allowed to set registered sender\""
															}
														],
														"id": 82,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1488:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1488:117:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "1488:117:0"
											},
											{
												"expression": {
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 90,
															"name": "registeredSenders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 17,
															"src": "1616:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint16_$_t_bytes32_$",
																"typeString": "mapping(uint16 => bytes32)"
															}
														},
														"id": 92,
														"indexExpression": {
															"id": 91,
															"name": "sourceChain",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "1634:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1616:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 93,
														"name": "sourceAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "1649:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1616:46:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 95,
												"nodeType": "ExpressionStatement",
												"src": "1616:46:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "1030:337:0",
										"text": " Sets the registered address for 'sourceChain' to 'sourceAddress'\n So that for messages from 'sourceChain', only ones from 'sourceAddress' are valid\n Assumes only one sender per chain is valid\n Sender is the address that called 'send' on the Wormhole Relayer contract on the source chain)"
									},
									"functionSelector": "dd12d68b",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setRegisteredSender",
									"nameLocation": "1382:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "sourceChain",
												"nameLocation": "1419:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "1412:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 76,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1412:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "sourceAddress",
												"nameLocation": "1449:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "1441:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 78,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1441:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1401:68:0"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1477:0:0"
									},
									"scope": 98,
									"src": "1373:297:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 99,
							"src": "182:1491:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "0:1675:0"
				},
				"id": 0
			},
			"BRIDGE_PARTNERSHIP/src/CCTPBase.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/CCTPBase.sol",
					"exportedSymbols": {
						"Base": [
							98
						],
						"CCTPBase": [
							175
						],
						"CCTPMessageLib": [
							122
						],
						"CCTPReceiver": [
							504
						],
						"CCTPSender": [
							365
						],
						"DeliveryProviderCannotReceivePayment": [
							1503
						],
						"DeliveryProviderDoesNotSupportMessageKeyType": [
							1507
						],
						"DeliveryProviderDoesNotSupportTargetChain": [
							1501
						],
						"IERC20": [
							734
						],
						"IMessageTransmitter": [
							581
						],
						"IReceiver": [
							595
						],
						"IRelayer": [
							637
						],
						"ITokenMessenger": [
							656
						],
						"IWormhole": [
							1050
						],
						"IWormholeReceiver": [
							1069
						],
						"IWormholeRelayer": [
							1484
						],
						"IWormholeRelayerBase": [
							1127
						],
						"IWormholeRelayerDelivery": [
							1479
						],
						"IWormholeRelayerSend": [
							1429
						],
						"InsufficientRelayerFunds": [
							1573
						],
						"InvalidDeliveryVaa": [
							1537
						],
						"InvalidEmitter": [
							1545
						],
						"InvalidMsgValue": [
							1493
						],
						"InvalidOverrideGasLimit": [
							1563
						],
						"InvalidOverrideReceiverValue": [
							1565
						],
						"InvalidOverrideRefundPerGasUnused": [
							1567
						],
						"InvalidPayloadId": [
							1519
						],
						"InvalidPayloadLength": [
							1525
						],
						"InvalidVaaKeyType": [
							1529
						],
						"MessageKey": [
							1087
						],
						"MessageKeysLengthDoesNotMatchMessagesLength": [
							1551
						],
						"NotAnEvmAddress": [
							1577
						],
						"RETURNDATA_TRUNCATION_THRESHOLD": [
							1487
						],
						"ReentrantDelivery": [
							1513
						],
						"RequestedGasLimitTooLow": [
							1495
						],
						"RequesterNotWormholeRelayer": [
							1557
						],
						"TargetChainIsNotThisChain": [
							1561
						],
						"TooManyMessageKeys": [
							1533
						],
						"VAA_KEY_TYPE": [
							1082
						],
						"VaaKey": [
							1079
						],
						"VaaKeysDoNotMatchVaas": [
							1555
						],
						"addressToBytes32CCTP": [
							571
						],
						"fromWormholeFormat": [
							559
						],
						"toWormholeFormat": [
							526
						]
					},
					"id": 505,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 100,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:1"
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol",
							"file": "./interfaces/IWormholeReceiver.sol",
							"id": 101,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 505,
							"sourceUnit": 1070,
							"src": "28:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol",
							"file": "./interfaces/IWormholeRelayer.sol",
							"id": 102,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 505,
							"sourceUnit": 1578,
							"src": "74:43:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol",
							"file": "./interfaces/IERC20.sol",
							"id": 104,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 505,
							"sourceUnit": 735,
							"src": "119:47:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 103,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 734,
										"src": "127:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol",
							"file": "./interfaces/CCTPInterfaces/ITokenMessenger.sol",
							"id": 105,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 505,
							"sourceUnit": 657,
							"src": "168:57:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol",
							"file": "./interfaces/CCTPInterfaces/IMessageTransmitter.sol",
							"id": 106,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 505,
							"sourceUnit": 582,
							"src": "227:61:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/Utils.sol",
							"file": "./Utils.sol",
							"id": 107,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 505,
							"sourceUnit": 572,
							"src": "292:21:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/Base.sol",
							"file": "./Base.sol",
							"id": 108,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 505,
							"sourceUnit": 99,
							"src": "315:20:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CCTPMessageLib",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 122,
							"linearizedBaseContracts": [
								122
							],
							"name": "CCTPMessageLib",
							"nameLocation": "347:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 111,
									"mutability": "constant",
									"name": "CCTP_KEY_TYPE",
									"nameLocation": "749:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 122,
									"src": "734:32:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 109,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "734:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 110,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "765:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "CCTPMessageLib.CCTPKey",
									"id": 116,
									"members": [
										{
											"constant": false,
											"id": 113,
											"mutability": "mutable",
											"name": "domain",
											"nameLocation": "862:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 116,
											"src": "855:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 112,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "855:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 115,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "886:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 116,
											"src": "879:12:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 114,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "879:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CCTPKey",
									"nameLocation": "836:7:1",
									"nodeType": "StructDefinition",
									"scope": 122,
									"src": "829:70:1",
									"visibility": "public"
								},
								{
									"canonicalName": "CCTPMessageLib.CCTPMessage",
									"id": 121,
									"members": [
										{
											"constant": false,
											"id": 118,
											"mutability": "mutable",
											"name": "message",
											"nameLocation": "996:7:1",
											"nodeType": "VariableDeclaration",
											"scope": 121,
											"src": "990:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 117,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "990:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 120,
											"mutability": "mutable",
											"name": "signature",
											"nameLocation": "1020:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 121,
											"src": "1014:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 119,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1014:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CCTPMessage",
									"nameLocation": "967:11:1",
									"nodeType": "StructDefinition",
									"scope": 122,
									"src": "960:77:1",
									"visibility": "public"
								}
							],
							"scope": 505,
							"src": "339:701:1",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 123,
										"name": "Base",
										"nameLocations": [
											"1074:4:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 98,
										"src": "1074:4:1"
									},
									"id": 124,
									"nodeType": "InheritanceSpecifier",
									"src": "1074:4:1"
								}
							],
							"canonicalName": "CCTPBase",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 175,
							"linearizedBaseContracts": [
								175,
								98
							],
							"name": "CCTPBase",
							"nameLocation": "1062:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 127,
									"mutability": "mutable",
									"name": "circleTokenMessenger",
									"nameLocation": "1102:20:1",
									"nodeType": "VariableDeclaration",
									"scope": 175,
									"src": "1086:36:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ITokenMessenger_$656",
										"typeString": "contract ITokenMessenger"
									},
									"typeName": {
										"id": 126,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 125,
											"name": "ITokenMessenger",
											"nameLocations": [
												"1086:15:1"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 656,
											"src": "1086:15:1"
										},
										"referencedDeclaration": 656,
										"src": "1086:15:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ITokenMessenger_$656",
											"typeString": "contract ITokenMessenger"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 130,
									"mutability": "mutable",
									"name": "circleMessageTransmitter",
									"nameLocation": "1149:24:1",
									"nodeType": "VariableDeclaration",
									"scope": 175,
									"src": "1129:44:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IMessageTransmitter_$581",
										"typeString": "contract IMessageTransmitter"
									},
									"typeName": {
										"id": 129,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 128,
											"name": "IMessageTransmitter",
											"nameLocations": [
												"1129:19:1"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 581,
											"src": "1129:19:1"
										},
										"referencedDeclaration": 581,
										"src": "1129:19:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IMessageTransmitter_$581",
											"typeString": "contract IMessageTransmitter"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 132,
									"mutability": "mutable",
									"name": "USDC",
									"nameLocation": "1188:4:1",
									"nodeType": "VariableDeclaration",
									"scope": 175,
									"src": "1180:12:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 131,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1180:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 134,
									"mutability": "mutable",
									"name": "cctpConfigurationOwner",
									"nameLocation": "1207:22:1",
									"nodeType": "VariableDeclaration",
									"scope": 175,
									"src": "1199:30:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 133,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1199:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 173,
										"nodeType": "Block",
										"src": "1447:307:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 148,
															"name": "_wormholeRelayer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 136,
															"src": "1468:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 149,
															"name": "_wormhole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 138,
															"src": "1487:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 147,
														"name": "_initBase",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 42,
														"src": "1458:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1458:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "1458:39:1"
											},
											{
												"expression": {
													"id": 156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 152,
														"name": "circleTokenMessenger",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 127,
														"src": "1508:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ITokenMessenger_$656",
															"typeString": "contract ITokenMessenger"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 154,
																"name": "_circleTokenMessenger",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 142,
																"src": "1547:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 153,
															"name": "ITokenMessenger",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 656,
															"src": "1531:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ITokenMessenger_$656_$",
																"typeString": "type(contract ITokenMessenger)"
															}
														},
														"id": 155,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1531:38:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ITokenMessenger_$656",
															"typeString": "contract ITokenMessenger"
														}
													},
													"src": "1508:61:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ITokenMessenger_$656",
														"typeString": "contract ITokenMessenger"
													}
												},
												"id": 157,
												"nodeType": "ExpressionStatement",
												"src": "1508:61:1"
											},
											{
												"expression": {
													"id": 162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 158,
														"name": "circleMessageTransmitter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 130,
														"src": "1580:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IMessageTransmitter_$581",
															"typeString": "contract IMessageTransmitter"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 160,
																"name": "_circleMessageTransmitter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 140,
																"src": "1641:25:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 159,
															"name": "IMessageTransmitter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 581,
															"src": "1607:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IMessageTransmitter_$581_$",
																"typeString": "type(contract IMessageTransmitter)"
															}
														},
														"id": 161,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1607:70:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IMessageTransmitter_$581",
															"typeString": "contract IMessageTransmitter"
														}
													},
													"src": "1580:97:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IMessageTransmitter_$581",
														"typeString": "contract IMessageTransmitter"
													}
												},
												"id": 163,
												"nodeType": "ExpressionStatement",
												"src": "1580:97:1"
											},
											{
												"expression": {
													"id": 166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 164,
														"name": "USDC",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 132,
														"src": "1688:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 165,
														"name": "_USDC",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 144,
														"src": "1695:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1688:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 167,
												"nodeType": "ExpressionStatement",
												"src": "1688:12:1"
											},
											{
												"expression": {
													"id": 171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 168,
														"name": "cctpConfigurationOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 134,
														"src": "1711:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 169,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1736:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 170,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1740:6:1",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1736:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1711:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 172,
												"nodeType": "ExpressionStatement",
												"src": "1711:35:1"
											}
										]
									},
									"id": 174,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_initCCTPBase",
									"nameLocation": "1247:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "_wormholeRelayer",
												"nameLocation": "1279:16:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "1271:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 135,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1271:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "_wormhole",
												"nameLocation": "1314:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "1306:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1306:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "_circleMessageTransmitter",
												"nameLocation": "1342:25:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "1334:33:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "_circleTokenMessenger",
												"nameLocation": "1386:21:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "1378:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1378:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "_USDC",
												"nameLocation": "1426:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "1418:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1418:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:178:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1447:0:1"
									},
									"scope": 175,
									"src": "1238:516:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 505,
							"src": "1044:713:1",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 176,
										"name": "CCTPBase",
										"nameLocations": [
											"1793:8:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 175,
										"src": "1793:8:1"
									},
									"id": 177,
									"nodeType": "InheritanceSpecifier",
									"src": "1793:8:1"
								}
							],
							"canonicalName": "CCTPSender",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 365,
							"linearizedBaseContracts": [
								365,
								175,
								98
							],
							"name": "CCTPSender",
							"nameLocation": "1779:10:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 180,
									"mutability": "constant",
									"name": "CONSISTENCY_LEVEL_FINALIZED",
									"nameLocation": "1833:27:1",
									"nodeType": "VariableDeclaration",
									"scope": 365,
									"src": "1809:56:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 178,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1809:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3135",
										"id": 179,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1863:2:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_15_by_1",
											"typeString": "int_const 15"
										},
										"value": "15"
									},
									"visibility": "internal"
								},
								{
									"global": false,
									"id": 182,
									"libraryName": {
										"id": 181,
										"name": "CCTPMessageLib",
										"nameLocations": [
											"1880:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 122,
										"src": "1880:14:1"
									},
									"nodeType": "UsingForDirective",
									"src": "1874:27:1"
								},
								{
									"constant": false,
									"functionSelector": "3a57cd63",
									"id": 186,
									"mutability": "mutable",
									"name": "chainIdToCCTPDomain",
									"nameLocation": "1942:19:1",
									"nodeType": "VariableDeclaration",
									"scope": 365,
									"src": "1909:52:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint16_$_t_uint32_$",
										"typeString": "mapping(uint16 => uint32)"
									},
									"typeName": {
										"id": 185,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 183,
											"name": "uint16",
											"nodeType": "ElementaryTypeName",
											"src": "1917:6:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											}
										},
										"nodeType": "Mapping",
										"src": "1909:25:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint16_$_t_uint32_$",
											"typeString": "mapping(uint16 => uint32)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 184,
											"name": "uint32",
											"nodeType": "ElementaryTypeName",
											"src": "1927:6:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 208,
										"nodeType": "Block",
										"src": "2826:185:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 198,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 195,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2859:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2863:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2859:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 197,
																"name": "cctpConfigurationOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 134,
																"src": "2873:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2859:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420616c6c6f77656420746f20736574204343545020446f6d61696e",
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2910:32:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d1631ba72e816445bf0fa4abac33b00c0668922896e9b84defb141e7fcc6b48f",
																"typeString": "literal_string \"Not allowed to set CCTP Domain\""
															},
															"value": "Not allowed to set CCTP Domain"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d1631ba72e816445bf0fa4abac33b00c0668922896e9b84defb141e7fcc6b48f",
																"typeString": "literal_string \"Not allowed to set CCTP Domain\""
															}
														],
														"id": 194,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2837:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2837:116:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 201,
												"nodeType": "ExpressionStatement",
												"src": "2837:116:1"
											},
											{
												"expression": {
													"id": 206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 202,
															"name": "chainIdToCCTPDomain",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 186,
															"src": "2964:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint16_$_t_uint32_$",
																"typeString": "mapping(uint16 => uint32)"
															}
														},
														"id": 204,
														"indexExpression": {
															"id": 203,
															"name": "chain",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 189,
															"src": "2984:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2964:26:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 205,
														"name": "cctpDomain",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 191,
														"src": "2993:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "2964:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 207,
												"nodeType": "ExpressionStatement",
												"src": "2964:39:1"
											}
										]
									},
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "1970:787:1",
										"text": " Sets the CCTP Domain corresponding to chain 'chain' to be 'cctpDomain'\n So that transfers of USDC to chain 'chain' use the target CCTP domain 'cctpDomain'\n This action can only be performed by 'cctpConfigurationOwner', who is set to be the deployer\n Currently, cctp domains are:\n Ethereum: Wormhole chain id 2, cctp domain 0\n Avalanche: Wormhole chain id 6, cctp domain 1\n Optimism: Wormhole chain id 24, cctp domain 2\n Arbitrum: Wormhole chain id 23, cctp domain 3\n Base: Wormhole chain id 30, cctp domain 6\n These can be set via:\n setCCTPDomain(2, 0);\n setCCTPDomain(6, 1);\n setCCTPDomain(24, 2);\n setCCTPDomain(23, 3);\n setCCTPDomain(30, 6);"
									},
									"functionSelector": "c6a4fd1c",
									"id": 209,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setCCTPDomain",
									"nameLocation": "2772:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "chain",
												"nameLocation": "2793:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "2786:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 188,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "2786:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "cctpDomain",
												"nameLocation": "2807:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "2800:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 190,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2800:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2785:33:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2826:0:1"
									},
									"scope": 365,
									"src": "2763:248:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 220,
										"nodeType": "Block",
										"src": "3087:52:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 216,
														"name": "chainIdToCCTPDomain",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 186,
														"src": "3105:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint16_$_t_uint32_$",
															"typeString": "mapping(uint16 => uint32)"
														}
													},
													"id": 218,
													"indexExpression": {
														"id": 217,
														"name": "chain",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 211,
														"src": "3125:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3105:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"functionReturnParameters": 215,
												"id": 219,
												"nodeType": "Return",
												"src": "3098:33:1"
											}
										]
									},
									"id": 221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getCCTPDomain",
									"nameLocation": "3028:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "chain",
												"nameLocation": "3049:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "3042:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 210,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3042:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3041:14:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "3079:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 213,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "3079:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3078:8:1"
									},
									"scope": 365,
									"src": "3019:120:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "3731:568:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 240,
																	"name": "circleTokenMessenger",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 127,
																	"src": "3771:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ITokenMessenger_$656",
																		"typeString": "contract ITokenMessenger"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ITokenMessenger_$656",
																		"typeString": "contract ITokenMessenger"
																	}
																],
																"id": 239,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3763:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 238,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3763:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 241,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3763:29:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 242,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "3794:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 235,
																	"name": "USDC",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 132,
																	"src": "3749:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 234,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 734,
																"src": "3742:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$734_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 236,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3742:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$734",
																"typeString": "contract IERC20"
															}
														},
														"id": 237,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3755:7:1",
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 721,
														"src": "3742:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3742:59:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 244,
												"nodeType": "ExpressionStatement",
												"src": "3742:59:1"
											},
											{
												"assignments": [
													246
												],
												"declarations": [
													{
														"constant": false,
														"id": 246,
														"mutability": "mutable",
														"name": "targetAddressBytes32",
														"nameLocation": "3820:20:1",
														"nodeType": "VariableDeclaration",
														"scope": 278,
														"src": "3812:28:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 245,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3812:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 250,
												"initialValue": {
													"arguments": [
														{
															"id": 248,
															"name": "targetAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "3864:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 247,
														"name": "addressToBytes32CCTP",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 571,
														"src": "3843:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
															"typeString": "function (address) pure returns (bytes32)"
														}
													},
													"id": 249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3843:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3812:66:1"
											},
											{
												"assignments": [
													252
												],
												"declarations": [
													{
														"constant": false,
														"id": 252,
														"mutability": "mutable",
														"name": "nonce",
														"nameLocation": "3896:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 278,
														"src": "3889:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 251,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "3889:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 263,
												"initialValue": {
													"arguments": [
														{
															"id": 255,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "3964:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 257,
																	"name": "targetChain",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 226,
																	"src": "3999:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint16",
																		"typeString": "uint16"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint16",
																		"typeString": "uint16"
																	}
																],
																"id": 256,
																"name": "getCCTPDomain",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 221,
																"src": "3985:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint16_$returns$_t_uint32_$",
																	"typeString": "function (uint16) view returns (uint32)"
																}
															},
															"id": 258,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3985:26:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														{
															"id": 259,
															"name": "targetAddressBytes32",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "4026:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 260,
															"name": "USDC",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 132,
															"src": "4061:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 261,
															"name": "targetAddressBytes32",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "4080:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 253,
															"name": "circleTokenMessenger",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 127,
															"src": "3904:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ITokenMessenger_$656",
																"typeString": "contract ITokenMessenger"
															}
														},
														"id": 254,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3925:24:1",
														"memberName": "depositForBurnWithCaller",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 655,
														"src": "3904:45:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint32_$_t_bytes32_$_t_address_$_t_bytes32_$returns$_t_uint64_$",
															"typeString": "function (uint256,uint32,bytes32,address,bytes32) external returns (uint64)"
														}
													},
													"id": 262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3904:207:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3889:222:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 265,
																"name": "CCTPMessageLib",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 122,
																"src": "4171:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_CCTPMessageLib_$122_$",
																	"typeString": "type(library CCTPMessageLib)"
																}
															},
															"id": 266,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4186:13:1",
															"memberName": "CCTP_KEY_TYPE",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 111,
															"src": "4171:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"expression": {
																					"id": 270,
																					"name": "wormhole",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 11,
																					"src": "4249:8:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IWormhole_$1050",
																						"typeString": "contract IWormhole"
																					}
																				},
																				"id": 271,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4258:7:1",
																				"memberName": "chainId",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 952,
																				"src": "4249:16:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$__$returns$_t_uint16_$",
																					"typeString": "function () view external returns (uint16)"
																				}
																			},
																			"id": 272,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4249:18:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint16",
																				"typeString": "uint16"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint16",
																				"typeString": "uint16"
																			}
																		],
																		"id": 269,
																		"name": "getCCTPDomain",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 221,
																		"src": "4235:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint16_$returns$_t_uint32_$",
																			"typeString": "function (uint16) view returns (uint32)"
																		}
																	},
																	"id": 273,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4235:33:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																{
																	"id": 274,
																	"name": "nonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 252,
																	"src": "4270:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	},
																	{
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																],
																"expression": {
																	"id": 267,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4218:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4222:12:1",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "4218:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4218:58:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 264,
														"name": "MessageKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1087,
														"src": "4142:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_MessageKey_$1087_storage_ptr_$",
															"typeString": "type(struct MessageKey storage pointer)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4142:149:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MessageKey_$1087_memory_ptr",
														"typeString": "struct MessageKey memory"
													}
												},
												"functionReturnParameters": 233,
												"id": 277,
												"nodeType": "Return",
												"src": "4122:169:1"
											}
										]
									},
									"documentation": {
										"id": 222,
										"nodeType": "StructuredDocumentation",
										"src": "3147:424:1",
										"text": " transferUSDC wraps common boilerplate for sending tokens to another chain using IWormholeRelayer\n - approves the Circle TokenMessenger contract to spend 'amount' of USDC\n - calls Circle's 'depositForBurnWithCaller'\n - returns key for inclusion in WormholeRelayer `additionalVaas` argument\n Note: this requires that only the targetAddress can redeem transfers."
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferUSDC",
									"nameLocation": "3588:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3619:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "3611:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3611:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "3643:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "3636:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 225,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3636:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "3673:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "3665:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3665:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3600:93:1"
									},
									"returnParameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "3712:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MessageKey_$1087_memory_ptr",
													"typeString": "struct MessageKey"
												},
												"typeName": {
													"id": 231,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 230,
														"name": "MessageKey",
														"nameLocations": [
															"3712:10:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1087,
														"src": "3712:10:1"
													},
													"referencedDeclaration": 1087,
													"src": "3712:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MessageKey_$1087_storage_ptr",
														"typeString": "struct MessageKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3711:19:1"
									},
									"scope": 365,
									"src": "3579:720:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "5041:854:1",
										"statements": [
											{
												"assignments": [
													300
												],
												"declarations": [
													{
														"constant": false,
														"id": 300,
														"mutability": "mutable",
														"name": "messageKeys",
														"nameLocation": "5072:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "5052:31:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr",
															"typeString": "struct MessageKey[]"
														},
														"typeName": {
															"baseType": {
																"id": 298,
																"nodeType": "UserDefinedTypeName",
																"pathNode": {
																	"id": 297,
																	"name": "MessageKey",
																	"nameLocations": [
																		"5052:10:1"
																	],
																	"nodeType": "IdentifierPath",
																	"referencedDeclaration": 1087,
																	"src": "5052:10:1"
																},
																"referencedDeclaration": 1087,
																"src": "5052:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_MessageKey_$1087_storage_ptr",
																	"typeString": "struct MessageKey"
																}
															},
															"id": 299,
															"nodeType": "ArrayTypeName",
															"src": "5052:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_storage_$dyn_storage_ptr",
																"typeString": "struct MessageKey[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 307,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 305,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5103:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 304,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "5086:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (struct MessageKey memory[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 302,
																"nodeType": "UserDefinedTypeName",
																"pathNode": {
																	"id": 301,
																	"name": "MessageKey",
																	"nameLocations": [
																		"5090:10:1"
																	],
																	"nodeType": "IdentifierPath",
																	"referencedDeclaration": 1087,
																	"src": "5090:10:1"
																},
																"referencedDeclaration": 1087,
																"src": "5090:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_MessageKey_$1087_storage_ptr",
																	"typeString": "struct MessageKey"
																}
															},
															"id": 303,
															"nodeType": "ArrayTypeName",
															"src": "5090:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_storage_$dyn_storage_ptr",
																"typeString": "struct MessageKey[]"
															}
														}
													},
													"id": 306,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5086:19:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr",
														"typeString": "struct MessageKey memory[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5052:53:1"
											},
											{
												"expression": {
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 308,
															"name": "messageKeys",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 300,
															"src": "5116:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr",
																"typeString": "struct MessageKey memory[] memory"
															}
														},
														"id": 310,
														"indexExpression": {
															"hexValue": "30",
															"id": 309,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5128:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5116:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MessageKey_$1087_memory_ptr",
															"typeString": "struct MessageKey memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 312,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 291,
																"src": "5146:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 313,
																"name": "targetChain",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 281,
																"src": "5154:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															{
																"id": 314,
																"name": "targetAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "5167:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 311,
															"name": "transferUSDC",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "5133:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint16_$_t_address_$returns$_t_struct$_MessageKey_$1087_memory_ptr_$",
																"typeString": "function (uint256,uint16,address) returns (struct MessageKey memory)"
															}
														},
														"id": 315,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5133:48:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MessageKey_$1087_memory_ptr",
															"typeString": "struct MessageKey memory"
														}
													},
													"src": "5116:65:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MessageKey_$1087_memory_ptr",
														"typeString": "struct MessageKey memory"
													}
												},
												"id": 317,
												"nodeType": "ExpressionStatement",
												"src": "5116:65:1"
											},
											{
												"assignments": [
													319
												],
												"declarations": [
													{
														"constant": false,
														"id": 319,
														"mutability": "mutable",
														"name": "userPayload",
														"nameLocation": "5207:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "5194:24:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 318,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5194:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 325,
												"initialValue": {
													"arguments": [
														{
															"id": 322,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 291,
															"src": "5232:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 323,
															"name": "payload",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 285,
															"src": "5240:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 320,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5221:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 321,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5225:6:1",
														"memberName": "encode",
														"nodeType": "MemberAccess",
														"src": "5221:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5221:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5194:54:1"
											},
											{
												"assignments": [
													327
												],
												"declarations": [
													{
														"constant": false,
														"id": 327,
														"mutability": "mutable",
														"name": "defaultDeliveryProvider",
														"nameLocation": "5267:23:1",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "5259:31:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 326,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5259:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 331,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 328,
															"name": "wormholeRelayer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 8,
															"src": "5293:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
																"typeString": "contract IWormholeRelayer"
															}
														},
														"id": 329,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5323:26:1",
														"memberName": "getDefaultDeliveryProvider",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1428,
														"src": "5293:56:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
															"typeString": "function () view external returns (address)"
														}
													},
													"id": 330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5293:58:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5259:92:1"
											},
											{
												"assignments": [
													333,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 333,
														"mutability": "mutable",
														"name": "cost",
														"nameLocation": "5373:4:1",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "5365:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 332,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5365:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 340,
												"initialValue": {
													"arguments": [
														{
															"id": 336,
															"name": "targetChain",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "5435:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														{
															"id": 337,
															"name": "receiverValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 287,
															"src": "5461:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 338,
															"name": "gasLimit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 289,
															"src": "5489:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 334,
															"name": "wormholeRelayer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 8,
															"src": "5383:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
																"typeString": "contract IWormholeRelayer"
															}
														},
														"id": 335,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5399:21:1",
														"memberName": "quoteEVMDeliveryPrice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1378,
														"src": "5383:37:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint16_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
															"typeString": "function (uint16,uint256,uint256) view external returns (uint256,uint256)"
														}
													},
													"id": 339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5383:125:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5364:144:1"
											},
											{
												"expression": {
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 341,
														"name": "sequence",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "5521:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 346,
																"name": "targetChain",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 281,
																"src": "5585:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															{
																"id": 347,
																"name": "targetAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "5611:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 348,
																"name": "userPayload",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "5639:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															{
																"id": 349,
																"name": "receiverValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 287,
																"src": "5665:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 350,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5693:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"id": 351,
																"name": "gasLimit",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 289,
																"src": "5709:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 352,
																"name": "targetChain",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 281,
																"src": "5732:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															{
																"arguments": [
																	{
																		"hexValue": "307830",
																		"id": 355,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5766:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0x0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5758:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 353,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5758:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 356,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5758:12:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 357,
																"name": "defaultDeliveryProvider",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 327,
																"src": "5785:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 358,
																"name": "messageKeys",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 300,
																"src": "5823:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr",
																	"typeString": "struct MessageKey memory[] memory"
																}
															},
															{
																"id": 359,
																"name": "CONSISTENCY_LEVEL_FINALIZED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 180,
																"src": "5849:27:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr",
																	"typeString": "struct MessageKey memory[] memory"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint16",
																		"typeString": "uint16"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint16",
																		"typeString": "uint16"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr",
																		"typeString": "struct MessageKey memory[] memory"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																],
																"expression": {
																	"id": 342,
																	"name": "wormholeRelayer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 8,
																	"src": "5532:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IWormholeRelayer_$1484",
																		"typeString": "contract IWormholeRelayer"
																	}
																},
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5548:9:1",
																"memberName": "sendToEvm",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1270,
																"src": "5532:25:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_payable$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint16_$_t_address_$_t_address_$_t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr_$_t_uint8_$returns$_t_uint64_$",
																	"typeString": "function (uint16,address,bytes memory,uint256,uint256,uint256,uint16,address,address,struct MessageKey memory[] memory,uint8) payable external returns (uint64)"
																}
															},
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"names": [
																"value"
															],
															"nodeType": "FunctionCallOptions",
															"options": [
																{
																	"id": 344,
																	"name": "cost",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 333,
																	"src": "5565:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"src": "5532:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint16_$_t_address_$_t_address_$_t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr_$_t_uint8_$returns$_t_uint64_$value",
																"typeString": "function (uint16,address,bytes memory,uint256,uint256,uint256,uint16,address,address,struct MessageKey memory[] memory,uint8) payable external returns (uint64)"
															}
														},
														"id": 360,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5532:355:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "5521:366:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "5521:366:1"
											}
										]
									},
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendUSDCWithPayloadToEvm",
									"nameLocation": "4798:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "4840:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "4833:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 280,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4833:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "4870:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "4862:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 282,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4862:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "4907:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "4894:20:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 284,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4894:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "4933:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "4925:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4925:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "gasLimit",
												"nameLocation": "4965:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "4957:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4957:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4992:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "4984:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4984:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4822:183:1"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "5031:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "5024:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 293,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "5024:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5023:17:1"
									},
									"scope": 365,
									"src": "4789:1106:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 505,
							"src": "1761:4137:1",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 366,
										"name": "CCTPBase",
										"nameLocations": [
											"5936:8:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 175,
										"src": "5936:8:1"
									},
									"id": 367,
									"nodeType": "InheritanceSpecifier",
									"src": "5936:8:1"
								}
							],
							"canonicalName": "CCTPReceiver",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 504,
							"linearizedBaseContracts": [
								504,
								175,
								98
							],
							"name": "CCTPReceiver",
							"nameLocation": "5920:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 419,
										"nodeType": "Block",
										"src": "6048:357:1",
										"statements": [
											{
												"assignments": [
													375,
													377
												],
												"declarations": [
													{
														"constant": false,
														"id": 375,
														"mutability": "mutable",
														"name": "message",
														"nameLocation": "6073:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 419,
														"src": "6060:20:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 374,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6060:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 377,
														"mutability": "mutable",
														"name": "signature",
														"nameLocation": "6095:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 419,
														"src": "6082:22:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 376,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6082:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 387,
												"initialValue": {
													"arguments": [
														{
															"id": 380,
															"name": "cctpMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "6133:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 382,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6160:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 381,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "6160:5:1",
																		"typeDescriptions": {}
																	}
																},
																{
																	"id": 384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6167:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 383,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "6167:5:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 385,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "6159:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes_storage_ptr_$_$",
																"typeString": "tuple(type(bytes storage pointer),type(bytes storage pointer))"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes_storage_ptr_$_$",
																"typeString": "tuple(type(bytes storage pointer),type(bytes storage pointer))"
															}
														],
														"expression": {
															"id": 378,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "6108:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 379,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "6112:6:1",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "6108:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6108:76:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bytes memory,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6059:125:1"
											},
											{
												"assignments": [
													389
												],
												"declarations": [
													{
														"constant": false,
														"id": 389,
														"mutability": "mutable",
														"name": "beforeBalance",
														"nameLocation": "6203:13:1",
														"nodeType": "VariableDeclaration",
														"scope": 419,
														"src": "6195:21:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 388,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6195:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 399,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 396,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6250:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_CCTPReceiver_$504",
																		"typeString": "contract CCTPReceiver"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_CCTPReceiver_$504",
																		"typeString": "contract CCTPReceiver"
																	}
																],
																"id": 395,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6242:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 394,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6242:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6242:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 391,
																	"name": "USDC",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 132,
																	"src": "6226:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 390,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 734,
																"src": "6219:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$734_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6219:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$734",
																"typeString": "contract IERC20"
															}
														},
														"id": 393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6232:9:1",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 691,
														"src": "6219:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6219:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6195:61:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 403,
															"name": "message",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 375,
															"src": "6307:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 404,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 377,
															"src": "6316:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 400,
															"name": "circleMessageTransmitter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 130,
															"src": "6267:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IMessageTransmitter_$581",
																"typeString": "contract IMessageTransmitter"
															}
														},
														"id": 402,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6292:14:1",
														"memberName": "receiveMessage",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 594,
														"src": "6267:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (bytes memory,bytes memory) external returns (bool)"
														}
													},
													"id": 405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6267:59:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 406,
												"nodeType": "ExpressionStatement",
												"src": "6267:59:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 413,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "6375:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_CCTPReceiver_$504",
																			"typeString": "contract CCTPReceiver"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_CCTPReceiver_$504",
																			"typeString": "contract CCTPReceiver"
																		}
																	],
																	"id": 412,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6367:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 411,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6367:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 414,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6367:13:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 408,
																		"name": "USDC",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 132,
																		"src": "6351:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 407,
																	"name": "IERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 734,
																	"src": "6344:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC20_$734_$",
																		"typeString": "type(contract IERC20)"
																	}
																},
																"id": 409,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6344:12:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$734",
																	"typeString": "contract IERC20"
																}
															},
															"id": 410,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6357:9:1",
															"memberName": "balanceOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 691,
															"src": "6344:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view external returns (uint256)"
															}
														},
														"id": 415,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6344:37:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 416,
														"name": "beforeBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "6384:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6344:53:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 373,
												"id": 418,
												"nodeType": "Return",
												"src": "6337:60:1"
											}
										]
									},
									"id": 420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "redeemUSDC",
									"nameLocation": "5961:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "cctpMessage",
												"nameLocation": "5995:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "5982:24:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 368,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5982:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5971:42:1"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6040:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "6032:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6032:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6031:16:1"
									},
									"scope": 504,
									"src": "5952:453:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 488,
										"nodeType": "Block",
										"src": "6637:1248:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 435,
																	"name": "additionalMessages",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 425,
																	"src": "7016:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																		"typeString": "bytes memory[] memory"
																	}
																},
																"id": 436,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7035:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "7016:25:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "31",
																"id": 437,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7045:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "7016:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "434354503a204174206d6f7374206f6e65204d65737361676520697320737570706f72746564",
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7061:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_95c2a5457827ff1d830352d4d883397dc3debe8649a9022b6a18da70b36679cb",
																"typeString": "literal_string \"CCTP: At most one Message is supported\""
															},
															"value": "CCTP: At most one Message is supported"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_95c2a5457827ff1d830352d4d883397dc3debe8649a9022b6a18da70b36679cb",
																"typeString": "literal_string \"CCTP: At most one Message is supported\""
															}
														],
														"id": 434,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6994:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6994:118:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "6994:118:1"
											},
											{
												"assignments": [
													443
												],
												"declarations": [
													{
														"constant": false,
														"id": 443,
														"mutability": "mutable",
														"name": "amountUSDCReceived",
														"nameLocation": "7133:18:1",
														"nodeType": "VariableDeclaration",
														"scope": 488,
														"src": "7125:26:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 442,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7125:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 444,
												"nodeType": "VariableDeclarationStatement",
												"src": "7125:26:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 445,
															"name": "additionalMessages",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "7166:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																"typeString": "bytes memory[] memory"
															}
														},
														"id": 446,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7185:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7166:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 447,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7195:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7166:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 458,
												"nodeType": "IfStatement",
												"src": "7162:117:1",
												"trueBody": {
													"id": 457,
													"nodeType": "Block",
													"src": "7198:81:1",
													"statements": [
														{
															"expression": {
																"id": 455,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 449,
																	"name": "amountUSDCReceived",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 443,
																	"src": "7213:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"baseExpression": {
																				"id": 451,
																				"name": "additionalMessages",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 425,
																				"src": "7245:18:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																					"typeString": "bytes memory[] memory"
																				}
																			},
																			"id": 453,
																			"indexExpression": {
																				"hexValue": "30",
																				"id": 452,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7264:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7245:21:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 450,
																		"name": "redeemUSDC",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 420,
																		"src": "7234:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$_t_uint256_$",
																			"typeString": "function (bytes memory) returns (uint256)"
																		}
																	},
																	"id": 454,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7234:33:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7213:54:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 456,
															"nodeType": "ExpressionStatement",
															"src": "7213:54:1"
														}
													]
												}
											},
											{
												"assignments": [
													460,
													462
												],
												"declarations": [
													{
														"constant": false,
														"id": 460,
														"mutability": "mutable",
														"name": "amount",
														"nameLocation": "7300:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 488,
														"src": "7292:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 459,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7292:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 462,
														"mutability": "mutable",
														"name": "userPayload",
														"nameLocation": "7321:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 488,
														"src": "7308:24:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 461,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7308:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 472,
												"initialValue": {
													"arguments": [
														{
															"id": 465,
															"name": "payload",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "7361:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 467,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7384:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 466,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7384:7:1",
																		"typeDescriptions": {}
																	}
																},
																{
																	"id": 469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7393:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 468,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "7393:5:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 470,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7383:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_type$_t_uint256_$_$_t_type$_t_bytes_storage_ptr_$_$",
																"typeString": "tuple(type(uint256),type(bytes storage pointer))"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_tuple$_t_type$_t_uint256_$_$_t_type$_t_bytes_storage_ptr_$_$",
																"typeString": "tuple(type(uint256),type(bytes storage pointer))"
															}
														],
														"expression": {
															"id": 463,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "7336:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 464,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7340:6:1",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "7336:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7336:74:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(uint256,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7291:119:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 476,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 474,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 460,
																"src": "7638:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 475,
																"name": "amountUSDCReceived",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 443,
																"src": "7648:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7638:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "57726f6e6720616d6f756e74207265636569766564",
															"id": 477,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7668:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6781022867e86356be9e3ec78a96895f20619f3a7ac0506f4a950d1c3599a266",
																"typeString": "literal_string \"Wrong amount received\""
															},
															"value": "Wrong amount received"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6781022867e86356be9e3ec78a96895f20619f3a7ac0506f4a950d1c3599a266",
																"typeString": "literal_string \"Wrong amount received\""
															}
														],
														"id": 473,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7630:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 478,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7630:62:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 479,
												"nodeType": "ExpressionStatement",
												"src": "7630:62:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 481,
															"name": "userPayload",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "7741:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 482,
															"name": "amountUSDCReceived",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "7767:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 483,
															"name": "sourceAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "7800:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 484,
															"name": "sourceChain",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "7828:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														{
															"id": 485,
															"name": "deliveryHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 431,
															"src": "7854:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 480,
														"name": "receivePayloadAndUSDC",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 503,
														"src": "7705:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint16_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes memory,uint256,bytes32,uint16,bytes32)"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7705:172:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 487,
												"nodeType": "ExpressionStatement",
												"src": "7705:172:1"
											}
										]
									},
									"functionSelector": "529dca32",
									"id": 489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "receiveWormholeMessages",
									"nameLocation": "6422:23:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "6469:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "6456:20:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 421,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6456:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "additionalMessages",
												"nameLocation": "6502:18:1",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "6487:33:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 423,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "6487:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 424,
													"nodeType": "ArrayTypeName",
													"src": "6487:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "sourceAddress",
												"nameLocation": "6539:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "6531:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 426,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6531:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "sourceChain",
												"nameLocation": "6570:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "6563:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 428,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6563:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "deliveryHash",
												"nameLocation": "6600:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "6592:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 430,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6592:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6445:174:1"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6637:0:1"
									},
									"scope": 504,
									"src": "6413:1472:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 502,
										"nodeType": "Block",
										"src": "8199:2:1",
										"statements": []
									},
									"id": 503,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "receivePayloadAndUSDC",
									"nameLocation": "7993:21:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "8038:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "8025:20:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 490,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8025:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "amountUSDCReceived",
												"nameLocation": "8064:18:1",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "8056:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8056:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "sourceAddress",
												"nameLocation": "8101:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "8093:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 494,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8093:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "sourceChain",
												"nameLocation": "8132:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "8125:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 496,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "8125:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "deliveryHash",
												"nameLocation": "8162:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "8154:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 498,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8154:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8014:167:1"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8199:0:1"
									},
									"scope": 504,
									"src": "7984:217:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 505,
							"src": "5902:2302:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "0:8206:1"
				},
				"id": 1
			},
			"BRIDGE_PARTNERSHIP/src/Utils.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/Utils.sol",
					"exportedSymbols": {
						"DeliveryProviderCannotReceivePayment": [
							1503
						],
						"DeliveryProviderDoesNotSupportMessageKeyType": [
							1507
						],
						"DeliveryProviderDoesNotSupportTargetChain": [
							1501
						],
						"IWormholeRelayer": [
							1484
						],
						"IWormholeRelayerBase": [
							1127
						],
						"IWormholeRelayerDelivery": [
							1479
						],
						"IWormholeRelayerSend": [
							1429
						],
						"InsufficientRelayerFunds": [
							1573
						],
						"InvalidDeliveryVaa": [
							1537
						],
						"InvalidEmitter": [
							1545
						],
						"InvalidMsgValue": [
							1493
						],
						"InvalidOverrideGasLimit": [
							1563
						],
						"InvalidOverrideReceiverValue": [
							1565
						],
						"InvalidOverrideRefundPerGasUnused": [
							1567
						],
						"InvalidPayloadId": [
							1519
						],
						"InvalidPayloadLength": [
							1525
						],
						"InvalidVaaKeyType": [
							1529
						],
						"MessageKey": [
							1087
						],
						"MessageKeysLengthDoesNotMatchMessagesLength": [
							1551
						],
						"NotAnEvmAddress": [
							1577
						],
						"RETURNDATA_TRUNCATION_THRESHOLD": [
							1487
						],
						"ReentrantDelivery": [
							1513
						],
						"RequestedGasLimitTooLow": [
							1495
						],
						"RequesterNotWormholeRelayer": [
							1557
						],
						"TargetChainIsNotThisChain": [
							1561
						],
						"TooManyMessageKeys": [
							1533
						],
						"VAA_KEY_TYPE": [
							1082
						],
						"VaaKey": [
							1079
						],
						"VaaKeysDoNotMatchVaas": [
							1555
						],
						"addressToBytes32CCTP": [
							571
						],
						"fromWormholeFormat": [
							559
						],
						"toWormholeFormat": [
							526
						]
					},
					"id": 572,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 506,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "2:24:2"
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol",
							"file": "./interfaces/IWormholeRelayer.sol",
							"id": 507,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 572,
							"sourceUnit": 1578,
							"src": "30:43:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"body": {
								"id": 525,
								"nodeType": "Block",
								"src": "140:49:2",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"id": 520,
																	"name": "addr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 509,
																	"src": "178:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 519,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "170:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 518,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "170:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "170:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 517,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "162:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 516,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "162:7:2",
															"typeDescriptions": {}
														}
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "162:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												],
												"id": 515,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "154:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_bytes32_$",
													"typeString": "type(bytes32)"
												},
												"typeName": {
													"id": 514,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "154:7:2",
													"typeDescriptions": {}
												}
											},
											"id": 523,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "154:31:2",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"functionReturnParameters": 513,
										"id": 524,
										"nodeType": "Return",
										"src": "147:38:2"
									}
								]
							},
							"id": 526,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "toWormholeFormat",
							"nameLocation": "86:16:2",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 510,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 509,
										"mutability": "mutable",
										"name": "addr",
										"nameLocation": "111:4:2",
										"nodeType": "VariableDeclaration",
										"scope": 526,
										"src": "103:12:2",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"typeName": {
											"id": 508,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "103:7:2",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "102:14:2"
							},
							"returnParameters": {
								"id": 513,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 512,
										"mutability": "mutable",
										"name": "",
										"nameLocation": "-1:-1:-1",
										"nodeType": "VariableDeclaration",
										"scope": 526,
										"src": "131:7:2",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										},
										"typeName": {
											"id": 511,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "131:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "130:9:2"
							},
							"scope": 572,
							"src": "77:112:2",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"body": {
								"id": 558,
								"nodeType": "Block",
								"src": "269:166:2",
								"statements": [
									{
										"condition": {
											"commonType": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"id": 540,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftExpression": {
												"commonType": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"id": 538,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"leftExpression": {
													"arguments": [
														{
															"id": 535,
															"name": "whFormatAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "288:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 534,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "280:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 533,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "280:7:2",
															"typeDescriptions": {}
														}
													},
													"id": 536,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "280:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "BinaryOperation",
												"operator": ">>",
												"rightExpression": {
													"hexValue": "313630",
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "308:3:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_160_by_1",
														"typeString": "int_const 160"
													},
													"value": "160"
												},
												"src": "280:31:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "!=",
											"rightExpression": {
												"hexValue": "30",
												"id": 539,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "315:1:2",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_0_by_1",
													"typeString": "int_const 0"
												},
												"value": "0"
											},
											"src": "280:36:2",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										},
										"id": 546,
										"nodeType": "IfStatement",
										"src": "276:100:2",
										"trueBody": {
											"id": 545,
											"nodeType": "Block",
											"src": "318:58:2",
											"statements": [
												{
													"errorCall": {
														"arguments": [
															{
																"id": 542,
																"name": "whFormatAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 528,
																"src": "352:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 541,
															"name": "NotAnEvmAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1577,
															"src": "336:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$__$",
																"typeString": "function (bytes32) pure"
															}
														},
														"id": 543,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "336:32:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 544,
													"nodeType": "RevertStatement",
													"src": "329:39:2"
												}
											]
										}
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"id": 553,
																	"name": "whFormatAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 528,
																	"src": "413:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 552,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "405:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 551,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "405:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 554,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "405:24:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 550,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "397:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint160_$",
															"typeString": "type(uint160)"
														},
														"typeName": {
															"id": 549,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "397:7:2",
															"typeDescriptions": {}
														}
													},
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "397:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												],
												"id": 548,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "389:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_address_$",
													"typeString": "type(address)"
												},
												"typeName": {
													"id": 547,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "389:7:2",
													"typeDescriptions": {}
												}
											},
											"id": 556,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "389:42:2",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"functionReturnParameters": 532,
										"id": 557,
										"nodeType": "Return",
										"src": "382:49:2"
									}
								]
							},
							"id": 559,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "fromWormholeFormat",
							"nameLocation": "202:18:2",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 529,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 528,
										"mutability": "mutable",
										"name": "whFormatAddress",
										"nameLocation": "229:15:2",
										"nodeType": "VariableDeclaration",
										"scope": 559,
										"src": "221:23:2",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										},
										"typeName": {
											"id": 527,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "221:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "220:25:2"
							},
							"returnParameters": {
								"id": 532,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 531,
										"mutability": "mutable",
										"name": "",
										"nameLocation": "-1:-1:-1",
										"nodeType": "VariableDeclaration",
										"scope": 559,
										"src": "260:7:2",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"typeName": {
											"id": 530,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "260:7:2",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "259:9:2"
							},
							"scope": 572,
							"src": "193:242:2",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"body": {
								"id": 570,
								"nodeType": "Block",
								"src": "506:44:2",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"id": 567,
													"name": "addr",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 561,
													"src": "541:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												],
												"id": 566,
												"name": "toWormholeFormat",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 526,
												"src": "524:16:2",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
													"typeString": "function (address) pure returns (bytes32)"
												}
											},
											"id": 568,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "functionCall",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "524:22:2",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"functionReturnParameters": 565,
										"id": 569,
										"nodeType": "Return",
										"src": "517:29:2"
									}
								]
							},
							"id": 571,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "addressToBytes32CCTP",
							"nameLocation": "448:20:2",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 562,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 561,
										"mutability": "mutable",
										"name": "addr",
										"nameLocation": "477:4:2",
										"nodeType": "VariableDeclaration",
										"scope": 571,
										"src": "469:12:2",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"typeName": {
											"id": 560,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "469:7:2",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "468:14:2"
							},
							"returnParameters": {
								"id": 565,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 564,
										"mutability": "mutable",
										"name": "",
										"nameLocation": "-1:-1:-1",
										"nodeType": "VariableDeclaration",
										"scope": 571,
										"src": "497:7:2",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										},
										"typeName": {
											"id": 563,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "497:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "496:9:2"
							},
							"scope": 572,
							"src": "439:111:2",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						}
					],
					"src": "2:548:2"
				},
				"id": 2
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IMessageTransmitter.sol",
					"exportedSymbols": {
						"IMessageTransmitter": [
							581
						],
						"IReceiver": [
							595
						],
						"IRelayer": [
							637
						]
					},
					"id": 582,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 573,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "634:23:3"
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol",
							"file": "./IRelayer.sol",
							"id": 574,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 582,
							"sourceUnit": 638,
							"src": "661:24:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol",
							"file": "./IReceiver.sol",
							"id": 575,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 582,
							"sourceUnit": 596,
							"src": "687:25:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 577,
										"name": "IRelayer",
										"nameLocations": [
											"877:8:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 637,
										"src": "877:8:3"
									},
									"id": 578,
									"nodeType": "InheritanceSpecifier",
									"src": "877:8:3"
								},
								{
									"baseName": {
										"id": 579,
										"name": "IReceiver",
										"nameLocations": [
											"887:9:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 595,
										"src": "887:9:3"
									},
									"id": 580,
									"nodeType": "InheritanceSpecifier",
									"src": "887:9:3"
								}
							],
							"canonicalName": "IMessageTransmitter",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 576,
								"nodeType": "StructuredDocumentation",
								"src": "716:126:3",
								"text": " @title IMessageTransmitter\n @notice Interface for message transmitters, which both relay and receive messages."
							},
							"fullyImplemented": false,
							"id": 581,
							"linearizedBaseContracts": [
								581,
								595,
								637
							],
							"name": "IMessageTransmitter",
							"nameLocation": "854:19:3",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 582,
							"src": "844:59:3",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "634:271:3"
				},
				"id": 3
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IReceiver.sol",
					"exportedSymbols": {
						"IReceiver": [
							595
						]
					},
					"id": 596,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 583,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "634:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IReceiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 584,
								"nodeType": "StructuredDocumentation",
								"src": "661:128:4",
								"text": " @title IReceiver\n @notice Receives messages on destination chain and forwards them to IMessageDestinationHandler"
							},
							"fullyImplemented": false,
							"id": 595,
							"linearizedBaseContracts": [
								595
							],
							"name": "IReceiver",
							"nameLocation": "801:9:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 585,
										"nodeType": "StructuredDocumentation",
										"src": "818:283:4",
										"text": " @notice Receives an incoming message, validating the header and passing\n the body to application-specific handler.\n @param message The message raw bytes\n @param signature The message signature\n @return success bool, true if successful"
									},
									"functionSelector": "57ecfd28",
									"id": 594,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "receiveMessage",
									"nameLocation": "1116:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "1146:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "1131:22:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 586,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1131:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "1170:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "1155:24:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 588,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1155:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1130:50:4"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "1222:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "1217:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 591,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1217:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1216:14:4"
									},
									"scope": 595,
									"src": "1107:124:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 596,
							"src": "791:443:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "634:602:4"
				},
				"id": 4
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/IRelayer.sol",
					"exportedSymbols": {
						"IRelayer": [
							637
						]
					},
					"id": 638,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 597,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "634:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IRelayer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 598,
								"nodeType": "StructuredDocumentation",
								"src": "661:96:5",
								"text": " @title IRelayer\n @notice Sends messages from source domain to destination domain"
							},
							"fullyImplemented": false,
							"id": 637,
							"linearizedBaseContracts": [
								637
							],
							"name": "IRelayer",
							"nameLocation": "769:8:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 599,
										"nodeType": "StructuredDocumentation",
										"src": "785:429:5",
										"text": " @notice Sends an outgoing message from the source domain.\n @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n @param destinationDomain Domain of destination chain\n @param recipient Address of message recipient on destination domain as bytes32\n @param messageBody Raw bytes content of message\n @return nonce reserved by message"
									},
									"functionSelector": "0ba469bc",
									"id": 610,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sendMessage",
									"nameLocation": "1229:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "destinationDomain",
												"nameLocation": "1258:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "1251:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 600,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "1251:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1294:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "1286:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 602,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1286:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "messageBody",
												"nameLocation": "1329:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "1314:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 604,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1314:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:107:5"
									},
									"returnParameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "1366:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 607,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1366:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1365:8:5"
									},
									"scope": 637,
									"src": "1220:154:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 611,
										"nodeType": "StructuredDocumentation",
										"src": "1382:901:5",
										"text": " @notice Sends an outgoing message from the source domain, with a specified caller on the\n destination domain.\n @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n to broadcast the message on the destination domain. This is an advanced feature, and the standard\n sendMessage() should be preferred for use cases where a specific destination caller is not required.\n @param destinationDomain Domain of destination chain\n @param recipient Address of message recipient on destination domain as bytes32\n @param destinationCaller caller on the destination domain, as bytes32\n @param messageBody Raw bytes content of message\n @return nonce reserved by message"
									},
									"functionSelector": "f7259a75",
									"id": 624,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sendMessageWithCaller",
									"nameLocation": "2298:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "destinationDomain",
												"nameLocation": "2337:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "2330:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 612,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2330:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2373:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "2365:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 614,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2365:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "destinationCaller",
												"nameLocation": "2401:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "2393:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 616,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2393:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "messageBody",
												"nameLocation": "2444:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "2429:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 618,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2429:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2319:143:5"
									},
									"returnParameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "2481:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 621,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "2481:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2480:8:5"
									},
									"scope": 637,
									"src": "2289:200:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 625,
										"nodeType": "StructuredDocumentation",
										"src": "2497:443:5",
										"text": " @notice Replace a message with a new message body and/or destination caller.\n @dev The `originalAttestation` must be a valid attestation of `originalMessage`.\n @param originalMessage original message to replace\n @param originalAttestation attestation of `originalMessage`\n @param newMessageBody new message body of replaced message\n @param newDestinationCaller the new destination caller"
									},
									"functionSelector": "b857b774",
									"id": 636,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "replaceMessage",
									"nameLocation": "2955:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "originalMessage",
												"nameLocation": "2995:15:5",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "2980:30:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2980:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "originalAttestation",
												"nameLocation": "3036:19:5",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "3021:34:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 628,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3021:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 631,
												"mutability": "mutable",
												"name": "newMessageBody",
												"nameLocation": "3081:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "3066:29:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 630,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3066:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "newDestinationCaller",
												"nameLocation": "3114:20:5",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "3106:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 632,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3106:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2969:172:5"
									},
									"returnParameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3150:0:5"
									},
									"scope": 637,
									"src": "2946:205:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 638,
							"src": "759:2395:5",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "634:2522:5"
				},
				"id": 5
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/CCTPInterfaces/ITokenMessenger.sol",
					"exportedSymbols": {
						"ITokenMessenger": [
							656
						]
					},
					"id": 657,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 639,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "2:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITokenMessenger",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 656,
							"linearizedBaseContracts": [
								656
							],
							"name": "ITokenMessenger",
							"nameLocation": "39:15:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 640,
										"nodeType": "StructuredDocumentation",
										"src": "61:1402:6",
										"text": " @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n on the destination domain must be called by `destinationCaller`.\n WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n to broadcast the message on the destination domain. This is an advanced feature, and the standard\n depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n Emits a `DepositForBurn` event.\n @dev reverts if:\n - given destinationCaller is zero address\n - given burnToken is not supported\n - given destinationDomain has no TokenMessenger registered\n - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n to this contract is less than `amount`.\n - burn() reverts. For example, if `amount` is 0.\n - MessageTransmitter returns false or reverts.\n @param amount amount of tokens to burn\n @param destinationDomain destination domain\n @param mintRecipient address of mint recipient on destination domain\n @param burnToken address of contract to burn deposited tokens, on local domain\n @param destinationCaller caller on the destination domain, as bytes32\n @return nonce unique nonce reserved by message"
									},
									"functionSelector": "f856ddb6",
									"id": 655,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "depositForBurnWithCaller",
									"nameLocation": "1478:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1521:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1513:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 641,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1513:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "destinationDomain",
												"nameLocation": "1545:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1538:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 643,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "1538:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "mintRecipient",
												"nameLocation": "1581:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1573:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 645,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1573:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "burnToken",
												"nameLocation": "1613:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1605:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 647,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1605:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "destinationCaller",
												"nameLocation": "1641:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1633:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 649,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1633:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1502:163:6"
									},
									"returnParameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1691:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "1684:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 652,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1684:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:14:6"
									},
									"scope": 656,
									"src": "1469:229:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 657,
							"src": "29:1672:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "2:1701:6"
				},
				"id": 6
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							734
						]
					},
					"id": 735,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 658,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 659,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:7",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 734,
							"linearizedBaseContracts": [
								734
							],
							"name": "IERC20",
							"nameLocation": "220:6:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 660,
										"nodeType": "StructuredDocumentation",
										"src": "234:163:7",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 668,
									"name": "Transfer",
									"nameLocation": "409:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 662,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "434:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 668,
												"src": "418:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 661,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 664,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "456:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 668,
												"src": "440:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 663,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 666,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "468:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 668,
												"src": "460:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 665,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "460:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:57:7"
									},
									"src": "403:72:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 669,
										"nodeType": "StructuredDocumentation",
										"src": "483:151:7",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 677,
									"name": "Approval",
									"nameLocation": "646:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 671,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "671:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 677,
												"src": "655:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 670,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 673,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "694:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 677,
												"src": "678:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 672,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 675,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "711:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 677,
												"src": "703:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 674,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:63:7"
									},
									"src": "640:78:7"
								},
								{
									"documentation": {
										"id": 678,
										"nodeType": "StructuredDocumentation",
										"src": "726:68:7",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 683,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "809:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:7"
									},
									"returnParameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "846:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 680,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:7"
									},
									"scope": 734,
									"src": "800:55:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 684,
										"nodeType": "StructuredDocumentation",
										"src": "863:74:7",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 691,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "952:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "970:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "962:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "961:17:7"
									},
									"returnParameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "1002:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 688,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:9:7"
									},
									"scope": 734,
									"src": "943:68:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 692,
										"nodeType": "StructuredDocumentation",
										"src": "1019:208:7",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 701,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1242:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1259:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "1251:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 693,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1251:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1271:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "1263:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 695,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1250:28:7"
									},
									"returnParameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "1297:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 698,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1297:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1296:6:7"
									},
									"scope": 734,
									"src": "1233:70:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 702,
										"nodeType": "StructuredDocumentation",
										"src": "1311:270:7",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 711,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1596:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1614:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "1606:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1606:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1629:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "1621:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 705,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1605:32:7"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "1661:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 708,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1661:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1660:9:7"
									},
									"scope": 734,
									"src": "1587:83:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 712,
										"nodeType": "StructuredDocumentation",
										"src": "1678:655:7",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 721,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2348:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2364:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 721,
												"src": "2356:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 713,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2356:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2381:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 721,
												"src": "2373:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2373:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:33:7"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 721,
												"src": "2407:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 718,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2407:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2406:6:7"
									},
									"scope": 734,
									"src": "2339:74:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 722,
										"nodeType": "StructuredDocumentation",
										"src": "2421:295:7",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 733,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2731:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2752:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "2744:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 723,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2744:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2766:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "2758:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 725,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2758:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2778:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "2770:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 727,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2770:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2743:42:7"
									},
									"returnParameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "2804:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 730,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2804:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2803:6:7"
									},
									"scope": 734,
									"src": "2722:88:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 735,
							"src": "210:2603:7",
							"usedErrors": [],
							"usedEvents": [
								668,
								677
							]
						}
					],
					"src": "109:2706:7"
				},
				"id": 7
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IWormhole.sol",
					"exportedSymbols": {
						"IWormhole": [
							1050
						]
					},
					"id": 1051,
					"license": "Apache 2",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 736,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "67:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IWormhole",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1050,
							"linearizedBaseContracts": [
								1050
							],
							"name": "IWormhole",
							"nameLocation": "104:9:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IWormhole.GuardianSet",
									"id": 742,
									"members": [
										{
											"constant": false,
											"id": 739,
											"mutability": "mutable",
											"name": "keys",
											"nameLocation": "161:4:8",
											"nodeType": "VariableDeclaration",
											"scope": 742,
											"src": "151:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
												"typeString": "address[]"
											},
											"typeName": {
												"baseType": {
													"id": 737,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "151:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 738,
												"nodeType": "ArrayTypeName",
												"src": "151:9:8",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
													"typeString": "address[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 741,
											"mutability": "mutable",
											"name": "expirationTime",
											"nameLocation": "183:14:8",
											"nodeType": "VariableDeclaration",
											"scope": 742,
											"src": "176:21:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 740,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "176:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "GuardianSet",
									"nameLocation": "128:11:8",
									"nodeType": "StructDefinition",
									"scope": 1050,
									"src": "121:84:8",
									"visibility": "public"
								},
								{
									"canonicalName": "IWormhole.Signature",
									"id": 751,
									"members": [
										{
											"constant": false,
											"id": 744,
											"mutability": "mutable",
											"name": "r",
											"nameLocation": "249:1:8",
											"nodeType": "VariableDeclaration",
											"scope": 751,
											"src": "241:9:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 743,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "241:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 746,
											"mutability": "mutable",
											"name": "s",
											"nameLocation": "269:1:8",
											"nodeType": "VariableDeclaration",
											"scope": 751,
											"src": "261:9:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 745,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "261:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 748,
											"mutability": "mutable",
											"name": "v",
											"nameLocation": "287:1:8",
											"nodeType": "VariableDeclaration",
											"scope": 751,
											"src": "281:7:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 747,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "281:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 750,
											"mutability": "mutable",
											"name": "guardianIndex",
											"nameLocation": "305:13:8",
											"nodeType": "VariableDeclaration",
											"scope": 751,
											"src": "299:19:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 749,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "299:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Signature",
									"nameLocation": "220:9:8",
									"nodeType": "StructDefinition",
									"scope": 1050,
									"src": "213:113:8",
									"visibility": "public"
								},
								{
									"canonicalName": "IWormhole.VM",
									"id": 776,
									"members": [
										{
											"constant": false,
											"id": 753,
											"mutability": "mutable",
											"name": "version",
											"nameLocation": "361:7:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "355:13:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 752,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "355:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 755,
											"mutability": "mutable",
											"name": "timestamp",
											"nameLocation": "386:9:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "379:16:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 754,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "379:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 757,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "413:5:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "406:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 756,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "406:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 759,
											"mutability": "mutable",
											"name": "emitterChainId",
											"nameLocation": "436:14:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "429:21:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											},
											"typeName": {
												"id": 758,
												"name": "uint16",
												"nodeType": "ElementaryTypeName",
												"src": "429:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 761,
											"mutability": "mutable",
											"name": "emitterAddress",
											"nameLocation": "469:14:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "461:22:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 760,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "461:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 763,
											"mutability": "mutable",
											"name": "sequence",
											"nameLocation": "501:8:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "494:15:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 762,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "494:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 765,
											"mutability": "mutable",
											"name": "consistencyLevel",
											"nameLocation": "526:16:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "520:22:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 764,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "520:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 767,
											"mutability": "mutable",
											"name": "payload",
											"nameLocation": "559:7:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "553:13:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 766,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "553:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 769,
											"mutability": "mutable",
											"name": "guardianSetIndex",
											"nameLocation": "584:16:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "577:23:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 768,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "577:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 773,
											"mutability": "mutable",
											"name": "signatures",
											"nameLocation": "623:10:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "611:22:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_Signature_$751_storage_$dyn_storage_ptr",
												"typeString": "struct IWormhole.Signature[]"
											},
											"typeName": {
												"baseType": {
													"id": 771,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 770,
														"name": "Signature",
														"nameLocations": [
															"611:9:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 751,
														"src": "611:9:8"
													},
													"referencedDeclaration": 751,
													"src": "611:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Signature_$751_storage_ptr",
														"typeString": "struct IWormhole.Signature"
													}
												},
												"id": 772,
												"nodeType": "ArrayTypeName",
												"src": "611:11:8",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Signature_$751_storage_$dyn_storage_ptr",
													"typeString": "struct IWormhole.Signature[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 775,
											"mutability": "mutable",
											"name": "hash",
											"nameLocation": "652:4:8",
											"nodeType": "VariableDeclaration",
											"scope": 776,
											"src": "644:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 774,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "644:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "VM",
									"nameLocation": "341:2:8",
									"nodeType": "StructDefinition",
									"scope": 1050,
									"src": "334:330:8",
									"visibility": "public"
								},
								{
									"canonicalName": "IWormhole.ContractUpgrade",
									"id": 785,
									"members": [
										{
											"constant": false,
											"id": 778,
											"mutability": "mutable",
											"name": "module",
											"nameLocation": "714:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 785,
											"src": "706:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 777,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "706:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 780,
											"mutability": "mutable",
											"name": "action",
											"nameLocation": "737:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 785,
											"src": "731:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 779,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "731:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 782,
											"mutability": "mutable",
											"name": "chain",
											"nameLocation": "761:5:8",
											"nodeType": "VariableDeclaration",
											"scope": 785,
											"src": "754:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											},
											"typeName": {
												"id": 781,
												"name": "uint16",
												"nodeType": "ElementaryTypeName",
												"src": "754:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 784,
											"mutability": "mutable",
											"name": "newContract",
											"nameLocation": "785:11:8",
											"nodeType": "VariableDeclaration",
											"scope": 785,
											"src": "777:19:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 783,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "777:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ContractUpgrade",
									"nameLocation": "679:15:8",
									"nodeType": "StructDefinition",
									"scope": 1050,
									"src": "672:132:8",
									"visibility": "public"
								},
								{
									"canonicalName": "IWormhole.GuardianSetUpgrade",
									"id": 797,
									"members": [
										{
											"constant": false,
											"id": 787,
											"mutability": "mutable",
											"name": "module",
											"nameLocation": "857:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 797,
											"src": "849:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 786,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "849:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 789,
											"mutability": "mutable",
											"name": "action",
											"nameLocation": "880:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 797,
											"src": "874:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 788,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "874:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 791,
											"mutability": "mutable",
											"name": "chain",
											"nameLocation": "904:5:8",
											"nodeType": "VariableDeclaration",
											"scope": 797,
											"src": "897:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											},
											"typeName": {
												"id": 790,
												"name": "uint16",
												"nodeType": "ElementaryTypeName",
												"src": "897:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 794,
											"mutability": "mutable",
											"name": "newGuardianSet",
											"nameLocation": "932:14:8",
											"nodeType": "VariableDeclaration",
											"scope": 797,
											"src": "920:26:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_GuardianSet_$742_storage_ptr",
												"typeString": "struct IWormhole.GuardianSet"
											},
											"typeName": {
												"id": 793,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 792,
													"name": "GuardianSet",
													"nameLocations": [
														"920:11:8"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 742,
													"src": "920:11:8"
												},
												"referencedDeclaration": 742,
												"src": "920:11:8",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_GuardianSet_$742_storage_ptr",
													"typeString": "struct IWormhole.GuardianSet"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 796,
											"mutability": "mutable",
											"name": "newGuardianSetIndex",
											"nameLocation": "964:19:8",
											"nodeType": "VariableDeclaration",
											"scope": 797,
											"src": "957:26:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 795,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "957:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "GuardianSetUpgrade",
									"nameLocation": "819:18:8",
									"nodeType": "StructDefinition",
									"scope": 1050,
									"src": "812:179:8",
									"visibility": "public"
								},
								{
									"canonicalName": "IWormhole.SetMessageFee",
									"id": 806,
									"members": [
										{
											"constant": false,
											"id": 799,
											"mutability": "mutable",
											"name": "module",
											"nameLocation": "1039:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 806,
											"src": "1031:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 798,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1031:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 801,
											"mutability": "mutable",
											"name": "action",
											"nameLocation": "1062:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 806,
											"src": "1056:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 800,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "1056:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 803,
											"mutability": "mutable",
											"name": "chain",
											"nameLocation": "1086:5:8",
											"nodeType": "VariableDeclaration",
											"scope": 806,
											"src": "1079:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											},
											"typeName": {
												"id": 802,
												"name": "uint16",
												"nodeType": "ElementaryTypeName",
												"src": "1079:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 805,
											"mutability": "mutable",
											"name": "messageFee",
											"nameLocation": "1110:10:8",
											"nodeType": "VariableDeclaration",
											"scope": 806,
											"src": "1102:18:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 804,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1102:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SetMessageFee",
									"nameLocation": "1006:13:8",
									"nodeType": "StructDefinition",
									"scope": 1050,
									"src": "999:129:8",
									"visibility": "public"
								},
								{
									"canonicalName": "IWormhole.TransferFees",
									"id": 817,
									"members": [
										{
											"constant": false,
											"id": 808,
											"mutability": "mutable",
											"name": "module",
											"nameLocation": "1175:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 817,
											"src": "1167:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 807,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1167:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 810,
											"mutability": "mutable",
											"name": "action",
											"nameLocation": "1198:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 817,
											"src": "1192:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 809,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "1192:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 812,
											"mutability": "mutable",
											"name": "chain",
											"nameLocation": "1222:5:8",
											"nodeType": "VariableDeclaration",
											"scope": 817,
											"src": "1215:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											},
											"typeName": {
												"id": 811,
												"name": "uint16",
												"nodeType": "ElementaryTypeName",
												"src": "1215:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 814,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "1246:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 817,
											"src": "1238:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 813,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1238:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 816,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1271:9:8",
											"nodeType": "VariableDeclaration",
											"scope": 817,
											"src": "1263:17:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 815,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1263:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TransferFees",
									"nameLocation": "1143:12:8",
									"nodeType": "StructDefinition",
									"scope": 1050,
									"src": "1136:152:8",
									"visibility": "public"
								},
								{
									"canonicalName": "IWormhole.RecoverChainId",
									"id": 826,
									"members": [
										{
											"constant": false,
											"id": 819,
											"mutability": "mutable",
											"name": "module",
											"nameLocation": "1337:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 826,
											"src": "1329:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 818,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1329:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 821,
											"mutability": "mutable",
											"name": "action",
											"nameLocation": "1360:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 826,
											"src": "1354:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 820,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "1354:5:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 823,
											"mutability": "mutable",
											"name": "evmChainId",
											"nameLocation": "1385:10:8",
											"nodeType": "VariableDeclaration",
											"scope": 826,
											"src": "1377:18:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 822,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1377:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 825,
											"mutability": "mutable",
											"name": "newChainId",
											"nameLocation": "1413:10:8",
											"nodeType": "VariableDeclaration",
											"scope": 826,
											"src": "1406:17:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											},
											"typeName": {
												"id": 824,
												"name": "uint16",
												"nodeType": "ElementaryTypeName",
												"src": "1406:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RecoverChainId",
									"nameLocation": "1303:14:8",
									"nodeType": "StructDefinition",
									"scope": 1050,
									"src": "1296:135:8",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2",
									"id": 838,
									"name": "LogMessagePublished",
									"nameLocation": "1445:19:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 828,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1491:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "1475:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 830,
												"indexed": false,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "1506:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "1499:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 829,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1499:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1523:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "1516:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 831,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "1516:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 834,
												"indexed": false,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "1536:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "1530:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 833,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1530:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 836,
												"indexed": false,
												"mutability": "mutable",
												"name": "consistencyLevel",
												"nameLocation": "1551:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "1545:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 835,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1545:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1464:110:8"
									},
									"src": "1439:136:8"
								},
								{
									"anonymous": false,
									"eventSelector": "2e4cc16c100f0b55e2df82ab0b1a7e294aa9cbd01b48fbaf622683fbc0507a49",
									"id": 844,
									"name": "ContractUpgraded",
									"nameLocation": "1587:16:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldContract",
												"nameLocation": "1620:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1604:27:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"indexed": true,
												"mutability": "mutable",
												"name": "newContract",
												"nameLocation": "1649:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1633:27:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 841,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1633:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1603:58:8"
									},
									"src": "1581:81:8"
								},
								{
									"anonymous": false,
									"eventSelector": "2384dbc52f7b617fb7c5aa71e5455a21ff21d58604bb6daef6af2bb44aadebdd",
									"id": 848,
									"name": "GuardianSetAdded",
									"nameLocation": "1674:16:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"indexed": true,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "1706:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "1691:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 845,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "1691:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1690:22:8"
									},
									"src": "1668:45:8"
								},
								{
									"functionSelector": "b19a437e",
									"id": 859,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "publishMessage",
									"nameLocation": "1730:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1752:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "1745:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 849,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "1745:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "1772:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "1759:20:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 851,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1759:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "consistencyLevel",
												"nameLocation": "1787:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "1781:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 853,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1781:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1744:60:8"
									},
									"returnParameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "1865:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "1858:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 856,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1858:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1857:17:8"
									},
									"scope": 1050,
									"src": "1721:154:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "8129fc1c",
									"id": 862,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "1892:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1902:2:8"
									},
									"returnParameters": {
										"id": 861,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1913:0:8"
									},
									"scope": 1050,
									"src": "1883:31:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "c0fd8bde",
									"id": 874,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "parseAndVerifyVM",
									"nameLocation": "1931:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "encodedVM",
												"nameLocation": "1963:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1948:24:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 863,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1948:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1947:26:8"
									},
									"returnParameters": {
										"id": 873,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "vm",
												"nameLocation": "2034:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "2024:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_VM_$776_memory_ptr",
													"typeString": "struct IWormhole.VM"
												},
												"typeName": {
													"id": 867,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 866,
														"name": "VM",
														"nameLocations": [
															"2024:2:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 776,
														"src": "2024:2:8"
													},
													"referencedDeclaration": 776,
													"src": "2024:2:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_VM_$776_storage_ptr",
														"typeString": "struct IWormhole.VM"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "valid",
												"nameLocation": "2043:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "2038:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 869,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2038:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "2064:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "2050:20:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 871,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2050:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2023:48:8"
									},
									"scope": 1050,
									"src": "1922:150:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "875be02a",
									"id": 884,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "verifyVM",
									"nameLocation": "2089:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "vm",
												"nameLocation": "2108:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "2098:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_VM_$776_memory_ptr",
													"typeString": "struct IWormhole.VM"
												},
												"typeName": {
													"id": 876,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 875,
														"name": "VM",
														"nameLocations": [
															"2098:2:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 776,
														"src": "2098:2:8"
													},
													"referencedDeclaration": 776,
													"src": "2098:2:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_VM_$776_storage_ptr",
														"typeString": "struct IWormhole.VM"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2097:14:8"
									},
									"returnParameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "valid",
												"nameLocation": "2140:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "2135:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 879,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2135:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "2161:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "2147:20:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 881,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2147:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2134:34:8"
									},
									"scope": 1050,
									"src": "2080:89:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a0cce1b3",
									"id": 900,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "verifySignatures",
									"nameLocation": "2186:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 886,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2211:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "2203:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 885,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2203:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "signatures",
												"nameLocation": "2236:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "2217:29:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Signature_$751_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IWormhole.Signature[]"
												},
												"typeName": {
													"baseType": {
														"id": 888,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 887,
															"name": "Signature",
															"nameLocations": [
																"2217:9:8"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 751,
															"src": "2217:9:8"
														},
														"referencedDeclaration": 751,
														"src": "2217:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Signature_$751_storage_ptr",
															"typeString": "struct IWormhole.Signature"
														}
													},
													"id": 889,
													"nodeType": "ArrayTypeName",
													"src": "2217:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Signature_$751_storage_$dyn_storage_ptr",
														"typeString": "struct IWormhole.Signature[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "guardianSet",
												"nameLocation": "2267:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "2248:30:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_GuardianSet_$742_memory_ptr",
													"typeString": "struct IWormhole.GuardianSet"
												},
												"typeName": {
													"id": 892,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 891,
														"name": "GuardianSet",
														"nameLocations": [
															"2248:11:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 742,
														"src": "2248:11:8"
													},
													"referencedDeclaration": 742,
													"src": "2248:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_GuardianSet_$742_storage_ptr",
														"typeString": "struct IWormhole.GuardianSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2202:77:8"
									},
									"returnParameters": {
										"id": 899,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "valid",
												"nameLocation": "2335:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "2330:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 895,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2330:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 898,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "2356:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "2342:20:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 897,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2342:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2329:34:8"
									},
									"scope": 1050,
									"src": "2177:187:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a9e11893",
									"id": 908,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "parseVM",
									"nameLocation": "2381:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "encodedVM",
												"nameLocation": "2402:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 908,
												"src": "2389:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 901,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2389:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2388:24:8"
									},
									"returnParameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "vm",
												"nameLocation": "2446:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 908,
												"src": "2436:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_VM_$776_memory_ptr",
													"typeString": "struct IWormhole.VM"
												},
												"typeName": {
													"id": 905,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 904,
														"name": "VM",
														"nameLocations": [
															"2436:2:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 776,
														"src": "2436:2:8"
													},
													"referencedDeclaration": 776,
													"src": "2436:2:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_VM_$776_storage_ptr",
														"typeString": "struct IWormhole.VM"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2435:14:8"
									},
									"scope": 1050,
									"src": "2372:78:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "f8ce560a",
									"id": 915,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quorum",
									"nameLocation": "2467:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "numGuardians",
												"nameLocation": "2482:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "2474:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2474:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2473:22:8"
									},
									"returnParameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "numSignaturesRequiredForQuorum",
												"nameLocation": "2527:30:8",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "2519:38:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2519:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2518:40:8"
									},
									"scope": 1050,
									"src": "2458:101:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "f951975a",
									"id": 923,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getGuardianSet",
									"nameLocation": "2576:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "2598:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 923,
												"src": "2591:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 916,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2591:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2590:14:8"
									},
									"returnParameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 923,
												"src": "2628:18:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_GuardianSet_$742_memory_ptr",
													"typeString": "struct IWormhole.GuardianSet"
												},
												"typeName": {
													"id": 920,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 919,
														"name": "GuardianSet",
														"nameLocations": [
															"2628:11:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 742,
														"src": "2628:11:8"
													},
													"referencedDeclaration": 742,
													"src": "2628:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_GuardianSet_$742_storage_ptr",
														"typeString": "struct IWormhole.GuardianSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2627:20:8"
									},
									"scope": 1050,
									"src": "2567:81:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "1cfe7951",
									"id": 928,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getCurrentGuardianSetIndex",
									"nameLocation": "2665:26:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2691:2:8"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2717:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 925,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2717:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2716:8:8"
									},
									"scope": 1050,
									"src": "2656:69:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "eb8d3f12",
									"id": 933,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getGuardianSetExpiry",
									"nameLocation": "2742:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2762:2:8"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "2788:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 930,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2788:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2787:8:8"
									},
									"scope": 1050,
									"src": "2733:63:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2c3c02a4",
									"id": 940,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "governanceActionIsConsumed",
									"nameLocation": "2813:26:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2848:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 940,
												"src": "2840:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 934,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2840:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2839:14:8"
									},
									"returnParameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 940,
												"src": "2877:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 937,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2877:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2876:6:8"
									},
									"scope": 1050,
									"src": "2804:79:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d60b347f",
									"id": 947,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isInitialized",
									"nameLocation": "2900:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "impl",
												"nameLocation": "2922:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "2914:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2914:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2913:14:8"
									},
									"returnParameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "2951:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 944,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2951:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2950:6:8"
									},
									"scope": 1050,
									"src": "2891:66:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "9a8a0592",
									"id": 952,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "chainId",
									"nameLocation": "2974:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2981:2:8"
									},
									"returnParameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "3007:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 949,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3007:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3006:8:8"
									},
									"scope": 1050,
									"src": "2965:50:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "e039f224",
									"id": 957,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isFork",
									"nameLocation": "3032:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 953,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3038:2:8"
									},
									"returnParameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "3064:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 954,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3064:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3063:6:8"
									},
									"scope": 1050,
									"src": "3023:47:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "fbe3c2cd",
									"id": 962,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "governanceChainId",
									"nameLocation": "3087:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3104:2:8"
									},
									"returnParameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "3130:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 959,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3130:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3129:8:8"
									},
									"scope": 1050,
									"src": "3078:60:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "b172b222",
									"id": 967,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "governanceContract",
									"nameLocation": "3155:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3173:2:8"
									},
									"returnParameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3199:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 964,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3199:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3198:9:8"
									},
									"scope": 1050,
									"src": "3146:62:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "1a90a219",
									"id": 972,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "messageFee",
									"nameLocation": "3225:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3235:2:8"
									},
									"returnParameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "3261:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3261:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3260:9:8"
									},
									"scope": 1050,
									"src": "3216:54:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "64d42b17",
									"id": 977,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "evmChainId",
									"nameLocation": "3287:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 973,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3297:2:8"
									},
									"returnParameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "3323:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 974,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3323:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3322:9:8"
									},
									"scope": 1050,
									"src": "3278:54:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4cf842b5",
									"id": 984,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nextSequence",
									"nameLocation": "3349:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 979,
												"mutability": "mutable",
												"name": "emitter",
												"nameLocation": "3370:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "3362:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 978,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3362:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3361:17:8"
									},
									"returnParameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "3402:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 981,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3402:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3401:8:8"
									},
									"scope": 1050,
									"src": "3340:70:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4fdc60fa",
									"id": 992,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "parseContractUpgrade",
									"nameLocation": "3427:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "encodedUpgrade",
												"nameLocation": "3461:14:8",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "3448:27:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 985,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3448:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3447:29:8"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "cu",
												"nameLocation": "3523:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "3500:25:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ContractUpgrade_$785_memory_ptr",
													"typeString": "struct IWormhole.ContractUpgrade"
												},
												"typeName": {
													"id": 989,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 988,
														"name": "ContractUpgrade",
														"nameLocations": [
															"3500:15:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 785,
														"src": "3500:15:8"
													},
													"referencedDeclaration": 785,
													"src": "3500:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ContractUpgrade_$785_storage_ptr",
														"typeString": "struct IWormhole.ContractUpgrade"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3499:27:8"
									},
									"scope": 1050,
									"src": "3418:109:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "04ca84cf",
									"id": 1000,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "parseGuardianSetUpgrade",
									"nameLocation": "3544:23:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "encodedUpgrade",
												"nameLocation": "3581:14:8",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "3568:27:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 993,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3568:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3567:29:8"
									},
									"returnParameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "gsu",
												"nameLocation": "3673:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "3647:29:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_GuardianSetUpgrade_$797_memory_ptr",
													"typeString": "struct IWormhole.GuardianSetUpgrade"
												},
												"typeName": {
													"id": 997,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 996,
														"name": "GuardianSetUpgrade",
														"nameLocations": [
															"3647:18:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 797,
														"src": "3647:18:8"
													},
													"referencedDeclaration": 797,
													"src": "3647:18:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_GuardianSetUpgrade_$797_storage_ptr",
														"typeString": "struct IWormhole.GuardianSetUpgrade"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3646:31:8"
									},
									"scope": 1050,
									"src": "3535:143:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "515f3247",
									"id": 1008,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "parseSetMessageFee",
									"nameLocation": "3695:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "encodedSetMessageFee",
												"nameLocation": "3727:20:8",
												"nodeType": "VariableDeclaration",
												"scope": 1008,
												"src": "3714:33:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1001,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3714:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3713:35:8"
									},
									"returnParameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "smf",
												"nameLocation": "3793:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1008,
												"src": "3772:24:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SetMessageFee_$806_memory_ptr",
													"typeString": "struct IWormhole.SetMessageFee"
												},
												"typeName": {
													"id": 1005,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1004,
														"name": "SetMessageFee",
														"nameLocations": [
															"3772:13:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 806,
														"src": "3772:13:8"
													},
													"referencedDeclaration": 806,
													"src": "3772:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SetMessageFee_$806_storage_ptr",
														"typeString": "struct IWormhole.SetMessageFee"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3771:26:8"
									},
									"scope": 1050,
									"src": "3686:112:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "0319e59c",
									"id": 1016,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "parseTransferFees",
									"nameLocation": "3815:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "encodedTransferFees",
												"nameLocation": "3846:19:8",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "3833:32:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1009,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3833:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3832:34:8"
									},
									"returnParameters": {
										"id": 1015,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1014,
												"mutability": "mutable",
												"name": "tf",
												"nameLocation": "3910:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "3890:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TransferFees_$817_memory_ptr",
													"typeString": "struct IWormhole.TransferFees"
												},
												"typeName": {
													"id": 1013,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1012,
														"name": "TransferFees",
														"nameLocations": [
															"3890:12:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 817,
														"src": "3890:12:8"
													},
													"referencedDeclaration": 817,
													"src": "3890:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TransferFees_$817_storage_ptr",
														"typeString": "struct IWormhole.TransferFees"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3889:24:8"
									},
									"scope": 1050,
									"src": "3806:108:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "cb4cfea8",
									"id": 1024,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "parseRecoverChainId",
									"nameLocation": "3931:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "encodedRecoverChainId",
												"nameLocation": "3964:21:8",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "3951:34:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1017,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3951:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3950:36:8"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "rci",
												"nameLocation": "4059:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "4037:25:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_RecoverChainId_$826_memory_ptr",
													"typeString": "struct IWormhole.RecoverChainId"
												},
												"typeName": {
													"id": 1021,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1020,
														"name": "RecoverChainId",
														"nameLocations": [
															"4037:14:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 826,
														"src": "4037:14:8"
													},
													"referencedDeclaration": 826,
													"src": "4037:14:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_RecoverChainId_$826_storage_ptr",
														"typeString": "struct IWormhole.RecoverChainId"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4036:27:8"
									},
									"scope": 1050,
									"src": "3922:142:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5cb8cae2",
									"id": 1029,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "submitContractUpgrade",
									"nameLocation": "4081:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "_vm",
												"nameLocation": "4116:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "4103:16:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1025,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4103:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4102:18:8"
									},
									"returnParameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4129:0:8"
									},
									"scope": 1050,
									"src": "4072:58:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "f42bc641",
									"id": 1034,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "submitSetMessageFee",
									"nameLocation": "4147:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "_vm",
												"nameLocation": "4180:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "4167:16:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1030,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4167:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4166:18:8"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4193:0:8"
									},
									"scope": 1050,
									"src": "4138:56:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "6606b4e0",
									"id": 1039,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "submitNewGuardianSet",
									"nameLocation": "4211:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "_vm",
												"nameLocation": "4245:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1039,
												"src": "4232:16:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1035,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4232:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4231:18:8"
									},
									"returnParameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4258:0:8"
									},
									"scope": 1050,
									"src": "4202:57:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "93df337e",
									"id": 1044,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "submitTransferFees",
									"nameLocation": "4276:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "_vm",
												"nameLocation": "4308:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "4295:16:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1040,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4295:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4294:18:8"
									},
									"returnParameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4321:0:8"
									},
									"scope": 1050,
									"src": "4267:55:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "178149e7",
									"id": 1049,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "submitRecoverChainId",
									"nameLocation": "4339:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "_vm",
												"nameLocation": "4373:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1049,
												"src": "4360:16:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1045,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4360:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4359:18:8"
									},
									"returnParameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4386:0:8"
									},
									"scope": 1050,
									"src": "4330:57:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1051,
							"src": "94:4296:8",
							"usedErrors": [],
							"usedEvents": [
								838,
								844,
								848
							]
						}
					],
					"src": "67:4325:8"
				},
				"id": 8
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IWormholeReceiver.sol",
					"exportedSymbols": {
						"IWormholeReceiver": [
							1069
						]
					},
					"id": 1070,
					"license": "Apache 2",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1052,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IWormholeReceiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1053,
								"nodeType": "StructuredDocumentation",
								"src": "67:82:9",
								"text": " @notice Interface for a contract which can receive Wormhole messages."
							},
							"fullyImplemented": false,
							"id": 1069,
							"linearizedBaseContracts": [
								1069
							],
							"name": "IWormholeReceiver",
							"nameLocation": "161:17:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1054,
										"nodeType": "StructuredDocumentation",
										"src": "186:2164:9",
										"text": " @notice When a `send` is performed with this contract as the target, this function will be\n     invoked by the WormholeRelayer contract\n NOTE: This function should be restricted such that only the Wormhole Relayer contract can call it.\n We also recommend that this function checks that `sourceChain` and `sourceAddress` are indeed who\n       you expect to have requested the calling of `send` on the source chain\n The invocation of this function corresponding to the `send` request will have msg.value equal\n   to the receiverValue specified in the send request.\n If the invocation of this function reverts or exceeds the gas limit\n   specified by the send requester, this delivery will result in a `ReceiverFailure`.\n @param payload - an arbitrary message which was included in the delivery by the\n     requester. This message's signature will already have been verified (as long as msg.sender is the Wormhole Relayer contract)\n @param additionalMessages - Additional messages which were requested to be included in this delivery.\n      Note: There are no contract-level guarantees that the messages in this array are what was requested\n      so **you should verify any sensitive information given here!**\n      For example, if a 'VaaKey' was specified on the source chain, then MAKE SURE the corresponding message here\n      has valid signatures (by calling `parseAndVerifyVM(message)` on the Wormhole core contract)\n      This field can be used to perform and relay TokenBridge or CCTP transfers, and there are example\n      usages of this at\n         https://github.com/wormhole-foundation/hello-token\n         https://github.com/wormhole-foundation/hello-cctp\n @param sourceAddress - the (wormhole format) address on the sending chain which requested\n     this delivery.\n @param sourceChain - the wormhole chain ID where this delivery was requested.\n @param deliveryHash - the VAA hash of the deliveryVAA."
									},
									"functionSelector": "529dca32",
									"id": 1068,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "receiveWormholeMessages",
									"nameLocation": "2365:23:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1056,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "2412:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "2399:20:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1055,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2399:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "additionalMessages",
												"nameLocation": "2445:18:9",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "2430:33:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1057,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "2430:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1058,
													"nodeType": "ArrayTypeName",
													"src": "2430:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "sourceAddress",
												"nameLocation": "2482:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "2474:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1060,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2474:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "sourceChain",
												"nameLocation": "2513:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "2506:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1062,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "2506:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "deliveryHash",
												"nameLocation": "2543:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "2535:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1064,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2535:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2388:174:9"
									},
									"returnParameters": {
										"id": 1067,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2579:0:9"
									},
									"scope": 1069,
									"src": "2356:224:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1070,
							"src": "151:2432:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "40:2545:9"
				},
				"id": 9
			},
			"BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol": {
				"ast": {
					"absolutePath": "BRIDGE_PARTNERSHIP/src/interfaces/IWormholeRelayer.sol",
					"exportedSymbols": {
						"DeliveryProviderCannotReceivePayment": [
							1503
						],
						"DeliveryProviderDoesNotSupportMessageKeyType": [
							1507
						],
						"DeliveryProviderDoesNotSupportTargetChain": [
							1501
						],
						"IWormholeRelayer": [
							1484
						],
						"IWormholeRelayerBase": [
							1127
						],
						"IWormholeRelayerDelivery": [
							1479
						],
						"IWormholeRelayerSend": [
							1429
						],
						"InsufficientRelayerFunds": [
							1573
						],
						"InvalidDeliveryVaa": [
							1537
						],
						"InvalidEmitter": [
							1545
						],
						"InvalidMsgValue": [
							1493
						],
						"InvalidOverrideGasLimit": [
							1563
						],
						"InvalidOverrideReceiverValue": [
							1565
						],
						"InvalidOverrideRefundPerGasUnused": [
							1567
						],
						"InvalidPayloadId": [
							1519
						],
						"InvalidPayloadLength": [
							1525
						],
						"InvalidVaaKeyType": [
							1529
						],
						"MessageKey": [
							1087
						],
						"MessageKeysLengthDoesNotMatchMessagesLength": [
							1551
						],
						"NotAnEvmAddress": [
							1577
						],
						"RETURNDATA_TRUNCATION_THRESHOLD": [
							1487
						],
						"ReentrantDelivery": [
							1513
						],
						"RequestedGasLimitTooLow": [
							1495
						],
						"RequesterNotWormholeRelayer": [
							1557
						],
						"TargetChainIsNotThisChain": [
							1561
						],
						"TooManyMessageKeys": [
							1533
						],
						"VAA_KEY_TYPE": [
							1082
						],
						"VaaKey": [
							1079
						],
						"VaaKeysDoNotMatchVaas": [
							1555
						]
					},
					"id": 1578,
					"license": "Apache 2",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1071,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:10"
						},
						{
							"canonicalName": "VaaKey",
							"documentation": {
								"id": 1072,
								"nodeType": "StructuredDocumentation",
								"src": "479:302:10",
								"text": " @notice VaaKey identifies a wormhole message\n @custom:member chainId Wormhole chain ID of the chain where this VAA was emitted from\n @custom:member emitterAddress Address of the emitter of the VAA, in Wormhole bytes32 format\n @custom:member sequence Sequence number of the VAA"
							},
							"id": 1079,
							"members": [
								{
									"constant": false,
									"id": 1074,
									"mutability": "mutable",
									"name": "chainId",
									"nameLocation": "811:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1079,
									"src": "804:14:10",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint16",
										"typeString": "uint16"
									},
									"typeName": {
										"id": 1073,
										"name": "uint16",
										"nodeType": "ElementaryTypeName",
										"src": "804:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint16",
											"typeString": "uint16"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1076,
									"mutability": "mutable",
									"name": "emitterAddress",
									"nameLocation": "833:14:10",
									"nodeType": "VariableDeclaration",
									"scope": 1079,
									"src": "825:22:10",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1075,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "825:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1078,
									"mutability": "mutable",
									"name": "sequence",
									"nameLocation": "861:8:10",
									"nodeType": "VariableDeclaration",
									"scope": 1079,
									"src": "854:15:10",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 1077,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "854:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "VaaKey",
							"nameLocation": "790:6:10",
							"nodeType": "StructDefinition",
							"scope": 1578,
							"src": "783:90:10",
							"visibility": "public"
						},
						{
							"constant": true,
							"id": 1082,
							"mutability": "constant",
							"name": "VAA_KEY_TYPE",
							"nameLocation": "969:12:10",
							"nodeType": "VariableDeclaration",
							"scope": 1578,
							"src": "954:31:10",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint8",
								"typeString": "uint8"
							},
							"typeName": {
								"id": 1080,
								"name": "uint8",
								"nodeType": "ElementaryTypeName",
								"src": "954:5:10",
								"typeDescriptions": {
									"typeIdentifier": "t_uint8",
									"typeString": "uint8"
								}
							},
							"value": {
								"hexValue": "31",
								"id": 1081,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"kind": "number",
								"lValueRequested": false,
								"nodeType": "Literal",
								"src": "984:1:10",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_1_by_1",
									"typeString": "int_const 1"
								},
								"value": "1"
							},
							"visibility": "internal"
						},
						{
							"canonicalName": "MessageKey",
							"id": 1087,
							"members": [
								{
									"constant": false,
									"id": 1084,
									"mutability": "mutable",
									"name": "keyType",
									"nameLocation": "1021:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1087,
									"src": "1015:13:10",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1083,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1015:5:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1086,
									"mutability": "mutable",
									"name": "encodedKey",
									"nameLocation": "1117:10:10",
									"nodeType": "VariableDeclaration",
									"scope": 1087,
									"src": "1111:16:10",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 1085,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "1111:5:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "MessageKey",
							"nameLocation": "997:10:10",
							"nodeType": "StructDefinition",
							"scope": 1578,
							"src": "990:141:10",
							"visibility": "public"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IWormholeRelayerBase",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1127,
							"linearizedBaseContracts": [
								1127
							],
							"name": "IWormholeRelayerBase",
							"nameLocation": "1145:20:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "da8540426b64ece7b164a9dce95448765f0a7263ef3ff85091c9c7361e485364",
									"id": 1095,
									"name": "SendEvent",
									"nameLocation": "1179:9:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1089,
												"indexed": true,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "1214:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "1199:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1088,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1199:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1091,
												"indexed": false,
												"mutability": "mutable",
												"name": "deliveryQuote",
												"nameLocation": "1241:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "1233:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1093,
												"indexed": false,
												"mutability": "mutable",
												"name": "paymentForExtraReceiverValue",
												"nameLocation": "1273:28:10",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "1265:36:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1265:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1188:120:10"
									},
									"src": "1173:136:10"
								},
								{
									"functionSelector": "3e8267e7",
									"id": 1102,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRegisteredWormholeRelayerContract",
									"nameLocation": "1326:36:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "1380:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "1373:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1096,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1373:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1362:32:10"
									},
									"returnParameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "1418:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1099,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1418:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1417:9:10"
									},
									"scope": 1127,
									"src": "1317:110:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1103,
										"nodeType": "StructuredDocumentation",
										"src": "1435:184:10",
										"text": " @notice Returns true if a delivery has been attempted for the given deliveryHash\n Note: invalid deliveries where the tx reverts are not considered attempted"
									},
									"functionSelector": "d0625a19",
									"id": 1110,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deliveryAttempted",
									"nameLocation": "1634:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "deliveryHash",
												"nameLocation": "1670:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1110,
												"src": "1662:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1104,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1662:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1651:38:10"
									},
									"returnParameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "attempted",
												"nameLocation": "1718:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1110,
												"src": "1713:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1107,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1713:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1712:16:10"
									},
									"scope": 1127,
									"src": "1625:104:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1111,
										"nodeType": "StructuredDocumentation",
										"src": "1737:87:10",
										"text": " @notice block number at which a delivery was successfully executed"
									},
									"functionSelector": "40984f08",
									"id": 1118,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deliverySuccessBlock",
									"nameLocation": "1839:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "deliveryHash",
												"nameLocation": "1878:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1118,
												"src": "1870:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1112,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1870:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1859:38:10"
									},
									"returnParameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "blockNumber",
												"nameLocation": "1929:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1118,
												"src": "1921:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1921:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1920:21:10"
									},
									"scope": 1127,
									"src": "1830:112:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1119,
										"nodeType": "StructuredDocumentation",
										"src": "1950:97:10",
										"text": " @notice block number of the latest attempt to execute a delivery that failed"
									},
									"functionSelector": "5a3b92e8",
									"id": 1126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deliveryFailureBlock",
									"nameLocation": "2062:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "deliveryHash",
												"nameLocation": "2101:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "2093:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1120,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2093:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2082:38:10"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "blockNumber",
												"nameLocation": "2152:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "2144:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2144:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2143:21:10"
									},
									"scope": 1127,
									"src": "2053:112:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1578,
							"src": "1135:1033:10",
							"usedErrors": [],
							"usedEvents": [
								1095
							]
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1129,
										"name": "IWormholeRelayerBase",
										"nameLocations": [
											"2296:20:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1127,
										"src": "2296:20:10"
									},
									"id": 1130,
									"nodeType": "InheritanceSpecifier",
									"src": "2296:20:10"
								}
							],
							"canonicalName": "IWormholeRelayerSend",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1128,
								"nodeType": "StructuredDocumentation",
								"src": "2172:88:10",
								"text": " @title IWormholeRelayerSend\n @notice The interface to request deliveries"
							},
							"fullyImplemented": false,
							"id": 1429,
							"linearizedBaseContracts": [
								1429,
								1127
							],
							"name": "IWormholeRelayerSend",
							"nameLocation": "2272:20:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1131,
										"nodeType": "StructuredDocumentation",
										"src": "2324:1219:10",
										"text": " @notice Publishes an instruction for the default delivery provider\n to relay a payload to the address `targetAddress` on chain `targetChain`\n with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\n `targetAddress` must implement the IWormholeReceiver interface\n This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\n Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function\n with `refundChain` and `refundAddress` as parameters\n @param targetChain in Wormhole Chain ID format\n @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param gasLimit gas limit with which to call `targetAddress`.\n @return sequence sequence number of published VAA containing delivery instructions"
									},
									"functionSelector": "8fecdd02",
									"id": 1146,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sendPayloadToEvm",
									"nameLocation": "3558:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "3592:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "3585:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1132,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3585:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "3622:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "3614:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3614:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "3659:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "3646:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1136,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3646:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "3685:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "3677:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3677:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "gasLimit",
												"nameLocation": "3717:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "3709:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3709:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3574:158:10"
									},
									"returnParameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "3766:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "3759:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1143,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3759:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3758:17:10"
									},
									"scope": 1429,
									"src": "3549:227:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1147,
										"nodeType": "StructuredDocumentation",
										"src": "3784:1413:10",
										"text": " @notice Publishes an instruction for the default delivery provider\n to relay a payload to the address `targetAddress` on chain `targetChain`\n with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\n Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n `targetAddress` must implement the IWormholeReceiver interface\n This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\n @param targetChain in Wormhole Chain ID format\n @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\n @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n @param refundAddress The address on `refundChain` to deliver any refund to\n @return sequence sequence number of published VAA containing delivery instructions"
									},
									"functionSelector": "4b5ca6f4",
									"id": 1166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sendPayloadToEvm",
									"nameLocation": "5212:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "5246:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5239:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1148,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "5239:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "5276:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5268:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5268:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "5313:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5300:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1152,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5300:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "5339:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5331:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5331:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1157,
												"mutability": "mutable",
												"name": "gasLimit",
												"nameLocation": "5371:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5363:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5363:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "refundChain",
												"nameLocation": "5397:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5390:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1158,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "5390:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "refundAddress",
												"nameLocation": "5427:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5419:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5419:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5228:219:10"
									},
									"returnParameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "5481:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5474:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1163,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "5474:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5473:17:10"
									},
									"scope": 1429,
									"src": "5203:288:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1167,
										"nodeType": "StructuredDocumentation",
										"src": "5499:1338:10",
										"text": " @notice Publishes an instruction for the default delivery provider\n to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\n `targetAddress` must implement the IWormholeReceiver interface\n This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\n Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function\n with `refundChain` and `refundAddress` as parameters\n @param targetChain in Wormhole Chain ID format\n @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param gasLimit gas limit with which to call `targetAddress`.\n @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n @return sequence sequence number of published VAA containing delivery instructions"
									},
									"functionSelector": "329a2be7",
									"id": 1186,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sendVaasToEvm",
									"nameLocation": "6852:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "6883:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "6876:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1168,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6876:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "6913:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "6905:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6905:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "6950:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "6937:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1172,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6937:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "6976:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "6968:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6968:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "gasLimit",
												"nameLocation": "7008:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "7000:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7000:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1181,
												"mutability": "mutable",
												"name": "vaaKeys",
												"nameLocation": "7043:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "7027:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_VaaKey_$1079_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct VaaKey[]"
												},
												"typeName": {
													"baseType": {
														"id": 1179,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1178,
															"name": "VaaKey",
															"nameLocations": [
																"7027:6:10"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1079,
															"src": "7027:6:10"
														},
														"referencedDeclaration": 1079,
														"src": "7027:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_VaaKey_$1079_storage_ptr",
															"typeString": "struct VaaKey"
														}
													},
													"id": 1180,
													"nodeType": "ArrayTypeName",
													"src": "7027:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_VaaKey_$1079_storage_$dyn_storage_ptr",
														"typeString": "struct VaaKey[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6865:192:10"
									},
									"returnParameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1184,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "7091:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "7084:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1183,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "7084:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7083:17:10"
									},
									"scope": 1429,
									"src": "6843:258:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1187,
										"nodeType": "StructuredDocumentation",
										"src": "7109:1535:10",
										"text": " @notice Publishes an instruction for the default delivery provider\n to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\n Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n `targetAddress` must implement the IWormholeReceiver interface\n This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\n @param targetChain in Wormhole Chain ID format\n @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\n @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n @param refundAddress The address on `refundChain` to deliver any refund to\n @return sequence sequence number of published VAA containing delivery instructions"
									},
									"functionSelector": "32b2fc0e",
									"id": 1210,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sendVaasToEvm",
									"nameLocation": "8659:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "8690:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "8683:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1188,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "8683:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "8720:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "8712:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8712:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "8757:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "8744:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1192,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8744:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "8783:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "8775:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8775:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "gasLimit",
												"nameLocation": "8815:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "8807:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8807:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "vaaKeys",
												"nameLocation": "8850:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "8834:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_VaaKey_$1079_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct VaaKey[]"
												},
												"typeName": {
													"baseType": {
														"id": 1199,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1198,
															"name": "VaaKey",
															"nameLocations": [
																"8834:6:10"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1079,
															"src": "8834:6:10"
														},
														"referencedDeclaration": 1079,
														"src": "8834:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_VaaKey_$1079_storage_ptr",
															"typeString": "struct VaaKey"
														}
													},
													"id": 1200,
													"nodeType": "ArrayTypeName",
													"src": "8834:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_VaaKey_$1079_storage_$dyn_storage_ptr",
														"typeString": "struct VaaKey[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "refundChain",
												"nameLocation": "8875:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "8868:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1202,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "8868:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1205,
												"mutability": "mutable",
												"name": "refundAddress",
												"nameLocation": "8905:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "8897:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1204,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8897:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8672:253:10"
									},
									"returnParameters": {
										"id": 1209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "8959:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "8952:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1207,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8952:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8951:17:10"
									},
									"scope": 1429,
									"src": "8650:319:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1211,
										"nodeType": "StructuredDocumentation",
										"src": "8977:2256:10",
										"text": " @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\n to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n with gas limit `gasLimit` and `msg.value` equal to\n receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\n Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n `targetAddress` must implement the IWormholeReceiver interface\n This function must be called with `msg.value` equal to\n quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue\n @param targetChain in Wormhole Chain ID format\n @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\n        (in addition to the `receiverValue` specified)\n @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\n @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n @param refundAddress The address on `refundChain` to deliver any refund to\n @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n @param consistencyLevel Consistency level with which to publish the delivery instructions - see\n        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\n @return sequence sequence number of published VAA containing delivery instructions"
									},
									"functionSelector": "3a2c767d",
									"id": 1240,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sendToEvm",
									"nameLocation": "11248:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "11275:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11268:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1212,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "11268:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1215,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "11305:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11297:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11297:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1217,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "11342:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11329:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1216,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11329:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1219,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "11368:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11360:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11360:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "paymentForExtraReceiverValue",
												"nameLocation": "11400:28:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11392:36:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11392:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "gasLimit",
												"nameLocation": "11447:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11439:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11439:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "refundChain",
												"nameLocation": "11473:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11466:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1224,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "11466:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "refundAddress",
												"nameLocation": "11503:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11495:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11495:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "deliveryProviderAddress",
												"nameLocation": "11535:23:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11527:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11527:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "vaaKeys",
												"nameLocation": "11585:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11569:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_VaaKey_$1079_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct VaaKey[]"
												},
												"typeName": {
													"baseType": {
														"id": 1231,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1230,
															"name": "VaaKey",
															"nameLocations": [
																"11569:6:10"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1079,
															"src": "11569:6:10"
														},
														"referencedDeclaration": 1079,
														"src": "11569:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_VaaKey_$1079_storage_ptr",
															"typeString": "struct VaaKey"
														}
													},
													"id": 1232,
													"nodeType": "ArrayTypeName",
													"src": "11569:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_VaaKey_$1079_storage_$dyn_storage_ptr",
														"typeString": "struct VaaKey[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "consistencyLevel",
												"nameLocation": "11609:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11603:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1234,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "11603:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11257:375:10"
									},
									"returnParameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "11666:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "11659:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1237,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "11659:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11658:17:10"
									},
									"scope": 1429,
									"src": "11239:437:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1241,
										"nodeType": "StructuredDocumentation",
										"src": "11684:2540:10",
										"text": " @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\n to relay a payload and external messages specified by `messageKeys` to the address `targetAddress` on chain `targetChain`\n with gas limit `gasLimit` and `msg.value` equal to\n receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\n Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n `targetAddress` must implement the IWormholeReceiver interface\n This function must be called with `msg.value` equal to\n quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue\n Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected\n DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!\n @param targetChain in Wormhole Chain ID format\n @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\n @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\n        (in addition to the `receiverValue` specified)\n @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\n @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n @param refundAddress The address on `refundChain` to deliver any refund to\n @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n @param messageKeys Additional messagess to pass in as parameter in call to `targetAddress`\n @param consistencyLevel Consistency level with which to publish the delivery instructions - see\n        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\n @return sequence sequence number of published VAA containing delivery instructions"
									},
									"functionSelector": "c055120e",
									"id": 1270,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sendToEvm",
									"nameLocation": "14239:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "14266:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14259:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1242,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "14259:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1245,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "14296:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14288:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14288:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "14333:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14320:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1246,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14320:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "14359:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14351:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14351:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "paymentForExtraReceiverValue",
												"nameLocation": "14391:28:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14383:36:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14383:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "gasLimit",
												"nameLocation": "14438:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14430:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14430:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1255,
												"mutability": "mutable",
												"name": "refundChain",
												"nameLocation": "14464:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14457:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1254,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "14457:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "refundAddress",
												"nameLocation": "14494:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14486:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14486:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "deliveryProviderAddress",
												"nameLocation": "14526:23:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14518:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14518:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "messageKeys",
												"nameLocation": "14580:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14560:31:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct MessageKey[]"
												},
												"typeName": {
													"baseType": {
														"id": 1261,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1260,
															"name": "MessageKey",
															"nameLocations": [
																"14560:10:10"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1087,
															"src": "14560:10:10"
														},
														"referencedDeclaration": 1087,
														"src": "14560:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MessageKey_$1087_storage_ptr",
															"typeString": "struct MessageKey"
														}
													},
													"id": 1262,
													"nodeType": "ArrayTypeName",
													"src": "14560:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_storage_$dyn_storage_ptr",
														"typeString": "struct MessageKey[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1265,
												"mutability": "mutable",
												"name": "consistencyLevel",
												"nameLocation": "14608:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14602:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1264,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "14602:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14248:383:10"
									},
									"returnParameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "14665:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "14658:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1267,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "14658:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14657:17:10"
									},
									"scope": 1429,
									"src": "14230:445:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1271,
										"nodeType": "StructuredDocumentation",
										"src": "14683:2323:10",
										"text": " @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\n to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n with `msg.value` equal to\n receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\n Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n `targetAddress` must implement the IWormholeReceiver interface\n This function must be called with `msg.value` equal to\n quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue\n @param targetChain in Wormhole Chain ID format\n @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\n @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\n        (in addition to the `receiverValue` specified)\n @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\n        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\n @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\n @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\n @param consistencyLevel Consistency level with which to publish the delivery instructions - see\n        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\n @return sequence sequence number of published VAA containing delivery instructions"
									},
									"functionSelector": "c81fb7fe",
									"id": 1300,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "17021:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "17043:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17036:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1272,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "17036:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "17073:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17065:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1274,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17065:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1277,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "17110:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17097:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1276,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17097:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "17136:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17128:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17128:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "paymentForExtraReceiverValue",
												"nameLocation": "17168:28:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17160:36:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17160:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1283,
												"mutability": "mutable",
												"name": "encodedExecutionParameters",
												"nameLocation": "17220:26:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17207:39:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1282,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17207:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "refundChain",
												"nameLocation": "17264:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17257:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1284,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "17257:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "refundAddress",
												"nameLocation": "17294:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17286:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1286,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17286:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1289,
												"mutability": "mutable",
												"name": "deliveryProviderAddress",
												"nameLocation": "17326:23:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17318:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17318:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "vaaKeys",
												"nameLocation": "17376:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17360:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_VaaKey_$1079_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct VaaKey[]"
												},
												"typeName": {
													"baseType": {
														"id": 1291,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1290,
															"name": "VaaKey",
															"nameLocations": [
																"17360:6:10"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1079,
															"src": "17360:6:10"
														},
														"referencedDeclaration": 1079,
														"src": "17360:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_VaaKey_$1079_storage_ptr",
															"typeString": "struct VaaKey"
														}
													},
													"id": 1292,
													"nodeType": "ArrayTypeName",
													"src": "17360:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_VaaKey_$1079_storage_$dyn_storage_ptr",
														"typeString": "struct VaaKey[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1295,
												"mutability": "mutable",
												"name": "consistencyLevel",
												"nameLocation": "17400:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17394:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1294,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "17394:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17025:398:10"
									},
									"returnParameters": {
										"id": 1299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1298,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "17457:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "17450:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1297,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "17450:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17449:17:10"
									},
									"scope": 1429,
									"src": "17012:455:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1301,
										"nodeType": "StructuredDocumentation",
										"src": "17475:2590:10",
										"text": " @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\n to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\n with `msg.value` equal to\n receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\n Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\n `targetAddress` must implement the IWormholeReceiver interface\n This function must be called with `msg.value` equal to\n quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue\n Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected\n DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!\n @param targetChain in Wormhole Chain ID format\n @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\n @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\n        (in addition to the `receiverValue` specified)\n @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\n        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\n @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\n @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\n @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n @param messageKeys Additional messagess to pass in as parameter in call to `targetAddress`\n @param consistencyLevel Consistency level with which to publish the delivery instructions - see\n        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\n @return sequence sequence number of published VAA containing delivery instructions"
									},
									"functionSelector": "cee4bda0",
									"id": 1330,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "20080:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1303,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "20102:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20095:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1302,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "20095:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "targetAddress",
												"nameLocation": "20132:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20124:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1304,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "20124:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1307,
												"mutability": "mutable",
												"name": "payload",
												"nameLocation": "20169:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20156:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1306,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "20156:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "20195:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20187:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20187:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "paymentForExtraReceiverValue",
												"nameLocation": "20227:28:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20219:36:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1310,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20219:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1313,
												"mutability": "mutable",
												"name": "encodedExecutionParameters",
												"nameLocation": "20279:26:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20266:39:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1312,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "20266:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "refundChain",
												"nameLocation": "20323:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20316:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1314,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "20316:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "refundAddress",
												"nameLocation": "20353:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20345:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1316,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "20345:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1319,
												"mutability": "mutable",
												"name": "deliveryProviderAddress",
												"nameLocation": "20385:23:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20377:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20377:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "messageKeys",
												"nameLocation": "20439:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20419:31:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct MessageKey[]"
												},
												"typeName": {
													"baseType": {
														"id": 1321,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1320,
															"name": "MessageKey",
															"nameLocations": [
																"20419:10:10"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1087,
															"src": "20419:10:10"
														},
														"referencedDeclaration": 1087,
														"src": "20419:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MessageKey_$1087_storage_ptr",
															"typeString": "struct MessageKey"
														}
													},
													"id": 1322,
													"nodeType": "ArrayTypeName",
													"src": "20419:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_MessageKey_$1087_storage_$dyn_storage_ptr",
														"typeString": "struct MessageKey[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1325,
												"mutability": "mutable",
												"name": "consistencyLevel",
												"nameLocation": "20467:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20461:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1324,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "20461:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20084:406:10"
									},
									"returnParameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "20524:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "20517:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1327,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "20517:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20516:17:10"
									},
									"scope": 1429,
									"src": "20071:463:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1331,
										"nodeType": "StructuredDocumentation",
										"src": "20542:1850:10",
										"text": " @notice Requests a previously published delivery instruction to be redelivered\n (e.g. with a different delivery provider)\n This function must be called with `msg.value` equal to\n quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)\n  @notice *** This will only be able to succeed if the following is true **\n         - newGasLimit >= gas limit of the old instruction\n         - newReceiverValue >= receiver value of the old instruction\n         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\n @param deliveryVaaKey VaaKey identifying the wormhole message containing the\n        previously published delivery instructions\n @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\n @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param newGasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\n        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request\n @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n @return sequence sequence number of published VAA containing redelivery instructions\n @notice *** This will only be able to succeed if the following is true **\n         - newGasLimit >= gas limit of the old instruction\n         - newReceiverValue >= receiver value of the old instruction"
									},
									"functionSelector": "8b0301b1",
									"id": 1347,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "resendToEvm",
									"nameLocation": "22407:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "deliveryVaaKey",
												"nameLocation": "22443:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1347,
												"src": "22429:28:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_VaaKey_$1079_memory_ptr",
													"typeString": "struct VaaKey"
												},
												"typeName": {
													"id": 1333,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1332,
														"name": "VaaKey",
														"nameLocations": [
															"22429:6:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1079,
														"src": "22429:6:10"
													},
													"referencedDeclaration": 1079,
													"src": "22429:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_VaaKey_$1079_storage_ptr",
														"typeString": "struct VaaKey"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1336,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "22475:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1347,
												"src": "22468:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1335,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "22468:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1338,
												"mutability": "mutable",
												"name": "newReceiverValue",
												"nameLocation": "22505:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1347,
												"src": "22497:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1337,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22497:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1340,
												"mutability": "mutable",
												"name": "newGasLimit",
												"nameLocation": "22540:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1347,
												"src": "22532:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22532:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "newDeliveryProviderAddress",
												"nameLocation": "22570:26:10",
												"nodeType": "VariableDeclaration",
												"scope": 1347,
												"src": "22562:34:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "22562:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22418:185:10"
									},
									"returnParameters": {
										"id": 1346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "22637:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1347,
												"src": "22630:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1344,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "22630:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22629:17:10"
									},
									"scope": 1429,
									"src": "22398:249:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1348,
										"nodeType": "StructuredDocumentation",
										"src": "22655:1575:10",
										"text": " @notice Requests a previously published delivery instruction to be redelivered\n This function must be called with `msg.value` equal to\n quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)\n @param deliveryVaaKey VaaKey identifying the wormhole message containing the\n        previously published delivery instructions\n @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\n @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param newEncodedExecutionParameters new encoded information on how to execute delivery that may impact pricing\n        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\n @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n @return sequence sequence number of published VAA containing redelivery instructions\n  @notice *** This will only be able to succeed if the following is true **\n         - (For EVM_V1) newGasLimit >= gas limit of the old instruction\n         - newReceiverValue >= receiver value of the old instruction\n         - (For EVM_V1) newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`"
									},
									"functionSelector": "b686d089",
									"id": 1364,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "resend",
									"nameLocation": "24245:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "deliveryVaaKey",
												"nameLocation": "24276:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "24262:28:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_VaaKey_$1079_memory_ptr",
													"typeString": "struct VaaKey"
												},
												"typeName": {
													"id": 1350,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1349,
														"name": "VaaKey",
														"nameLocations": [
															"24262:6:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1079,
														"src": "24262:6:10"
													},
													"referencedDeclaration": 1079,
													"src": "24262:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_VaaKey_$1079_storage_ptr",
														"typeString": "struct VaaKey"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "24308:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "24301:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1352,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "24301:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "newReceiverValue",
												"nameLocation": "24338:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "24330:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "24330:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "newEncodedExecutionParameters",
												"nameLocation": "24378:29:10",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "24365:42:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1356,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "24365:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "newDeliveryProviderAddress",
												"nameLocation": "24426:26:10",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "24418:34:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "24418:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24251:208:10"
									},
									"returnParameters": {
										"id": 1363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "24493:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "24486:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1361,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "24486:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24485:17:10"
									},
									"scope": 1429,
									"src": "24236:267:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1365,
										"nodeType": "StructuredDocumentation",
										"src": "24511:1142:10",
										"text": " @notice Returns the price to request a relay to chain `targetChain`, using the default delivery provider\n @param targetChain in Wormhole Chain ID format\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param gasLimit gas limit with which to call `targetAddress`.\n @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\n @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\n         if a refundAddress is specified.\n         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a\n         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.\n         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain."
									},
									"functionSelector": "c23ee3c3",
									"id": 1378,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteEVMDeliveryPrice",
									"nameLocation": "25668:21:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "25707:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1378,
												"src": "25700:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1366,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "25700:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1369,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "25737:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1378,
												"src": "25729:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1368,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "25729:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1371,
												"mutability": "mutable",
												"name": "gasLimit",
												"nameLocation": "25769:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1378,
												"src": "25761:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "25761:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "25689:95:10"
									},
									"returnParameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "nativePriceQuote",
												"nameLocation": "25857:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1378,
												"src": "25849:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "25849:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "targetChainRefundPerGasUnused",
												"nameLocation": "25896:29:10",
												"nodeType": "VariableDeclaration",
												"scope": 1378,
												"src": "25888:37:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "25888:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "25834:102:10"
									},
									"scope": 1429,
									"src": "25659:278:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1379,
										"nodeType": "StructuredDocumentation",
										"src": "25945:1277:10",
										"text": " @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\n @param targetChain in Wormhole Chain ID format\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param gasLimit gas limit with which to call `targetAddress`.\n @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\n @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\n         if a refundAddress is specified\n         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a\n         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.\n         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain."
									},
									"functionSelector": "80ebabd0",
									"id": 1394,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteEVMDeliveryPrice",
									"nameLocation": "27237:21:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "27276:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "27269:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1380,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "27269:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1383,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "27306:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "27298:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1382,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "27298:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1385,
												"mutability": "mutable",
												"name": "gasLimit",
												"nameLocation": "27338:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "27330:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1384,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "27330:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1387,
												"mutability": "mutable",
												"name": "deliveryProviderAddress",
												"nameLocation": "27365:23:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "27357:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "27357:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "27258:137:10"
									},
									"returnParameters": {
										"id": 1393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1390,
												"mutability": "mutable",
												"name": "nativePriceQuote",
												"nameLocation": "27468:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "27460:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "27460:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1392,
												"mutability": "mutable",
												"name": "targetChainRefundPerGasUnused",
												"nameLocation": "27507:29:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "27499:37:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "27499:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "27445:102:10"
									},
									"scope": 1429,
									"src": "27228:320:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1395,
										"nodeType": "StructuredDocumentation",
										"src": "27556:1207:10",
										"text": " @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\n @param targetChain in Wormhole Chain ID format\n @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\n @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\n        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\n @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\n @return encodedExecutionInfo encoded information on how the delivery will be executed\n        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`\n             (which is the amount of target chain currency that will be refunded per unit of gas unused,\n              if a refundAddress is specified)"
									},
									"functionSelector": "a79629d8",
									"id": 1410,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteDeliveryPrice",
									"nameLocation": "28778:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1397,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "28814:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "28807:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1396,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "28807:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1399,
												"mutability": "mutable",
												"name": "receiverValue",
												"nameLocation": "28844:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "28836:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "28836:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "encodedExecutionParameters",
												"nameLocation": "28881:26:10",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "28868:39:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1400,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "28868:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "deliveryProviderAddress",
												"nameLocation": "28926:23:10",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "28918:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1402,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28918:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28796:160:10"
									},
									"returnParameters": {
										"id": 1409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "nativePriceQuote",
												"nameLocation": "29015:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "29007:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "29007:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "encodedExecutionInfo",
												"nameLocation": "29046:20:10",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "29033:33:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1407,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "29033:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29006:61:10"
									},
									"scope": 1429,
									"src": "28769:299:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1411,
										"nodeType": "StructuredDocumentation",
										"src": "29076:650:10",
										"text": " @notice Returns the (extra) amount of target chain currency that `targetAddress`\n will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`\n @param targetChain in Wormhole Chain ID format\n @param currentChainAmount The value that `paymentForExtraReceiverValue` will be set to\n @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\n @return targetChainAmount The amount such that if `targetAddress` will be called with `msg.value` equal to\n         receiverValue + targetChainAmount"
									},
									"functionSelector": "2385904a",
									"id": 1422,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteNativeForChain",
									"nameLocation": "29741:19:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "targetChain",
												"nameLocation": "29778:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "29771:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1412,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "29771:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1415,
												"mutability": "mutable",
												"name": "currentChainAmount",
												"nameLocation": "29808:18:10",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "29800:26:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "29800:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1417,
												"mutability": "mutable",
												"name": "deliveryProviderAddress",
												"nameLocation": "29845:23:10",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "29837:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "29837:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29760:115:10"
									},
									"returnParameters": {
										"id": 1421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1420,
												"mutability": "mutable",
												"name": "targetChainAmount",
												"nameLocation": "29907:17:10",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "29899:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "29899:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29898:27:10"
									},
									"scope": 1429,
									"src": "29732:194:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1423,
										"nodeType": "StructuredDocumentation",
										"src": "29934:271:10",
										"text": " @notice Returns the address of the current default delivery provider\n @return deliveryProvider The address of (the default delivery provider)'s contract on this source\n   chain. This must be a contract that implements IDeliveryProvider."
									},
									"functionSelector": "24320c9f",
									"id": 1428,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDefaultDeliveryProvider",
									"nameLocation": "30220:26:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "30246:2:10"
									},
									"returnParameters": {
										"id": 1427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1426,
												"mutability": "mutable",
												"name": "deliveryProvider",
												"nameLocation": "30307:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "30299:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1425,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "30299:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30298:26:10"
									},
									"scope": 1429,
									"src": "30211:114:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1578,
							"src": "2262:28066:10",
							"usedErrors": [],
							"usedEvents": [
								1095
							]
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1431,
										"name": "IWormholeRelayerBase",
										"nameLocations": [
											"30502:20:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1127,
										"src": "30502:20:10"
									},
									"id": 1432,
									"nodeType": "InheritanceSpecifier",
									"src": "30502:20:10"
								}
							],
							"canonicalName": "IWormholeRelayerDelivery",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1430,
								"nodeType": "StructuredDocumentation",
								"src": "30332:130:10",
								"text": " @title IWormholeRelayerDelivery\n @notice The interface to execute deliveries. Only relevant for Delivery Providers"
							},
							"fullyImplemented": false,
							"id": 1479,
							"linearizedBaseContracts": [
								1479,
								1127
							],
							"name": "IWormholeRelayerDelivery",
							"nameLocation": "30474:24:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IWormholeRelayerDelivery.DeliveryStatus",
									"id": 1435,
									"members": [
										{
											"id": 1433,
											"name": "SUCCESS",
											"nameLocation": "30561:7:10",
											"nodeType": "EnumValue",
											"src": "30561:7:10"
										},
										{
											"id": 1434,
											"name": "RECEIVER_FAILURE",
											"nameLocation": "30579:16:10",
											"nodeType": "EnumValue",
											"src": "30579:16:10"
										}
									],
									"name": "DeliveryStatus",
									"nameLocation": "30535:14:10",
									"nodeType": "EnumDefinition",
									"src": "30530:72:10"
								},
								{
									"canonicalName": "IWormholeRelayerDelivery.RefundStatus",
									"id": 1442,
									"members": [
										{
											"id": 1436,
											"name": "REFUND_SENT",
											"nameLocation": "30639:11:10",
											"nodeType": "EnumValue",
											"src": "30639:11:10"
										},
										{
											"id": 1437,
											"name": "REFUND_FAIL",
											"nameLocation": "30661:11:10",
											"nodeType": "EnumValue",
											"src": "30661:11:10"
										},
										{
											"id": 1438,
											"name": "CROSS_CHAIN_REFUND_SENT",
											"nameLocation": "30683:23:10",
											"nodeType": "EnumValue",
											"src": "30683:23:10"
										},
										{
											"id": 1439,
											"name": "CROSS_CHAIN_REFUND_FAIL_PROVIDER_NOT_SUPPORTED",
											"nameLocation": "30717:46:10",
											"nodeType": "EnumValue",
											"src": "30717:46:10"
										},
										{
											"id": 1440,
											"name": "CROSS_CHAIN_REFUND_FAIL_NOT_ENOUGH",
											"nameLocation": "30774:34:10",
											"nodeType": "EnumValue",
											"src": "30774:34:10"
										},
										{
											"id": 1441,
											"name": "NO_REFUND_REQUESTED",
											"nameLocation": "30819:19:10",
											"nodeType": "EnumValue",
											"src": "30819:19:10"
										}
									],
									"name": "RefundStatus",
									"nameLocation": "30615:12:10",
									"nodeType": "EnumDefinition",
									"src": "30610:235:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1443,
										"nodeType": "StructuredDocumentation",
										"src": "30853:1484:10",
										"text": " @custom:member recipientContract - The target contract address\n @custom:member sourceChain - The chain which this delivery was requested from (in wormhole\n     ChainID format)\n @custom:member sequence - The wormhole sequence number of the delivery VAA on the source chain\n     corresponding to this delivery request\n @custom:member deliveryVaaHash - The hash of the delivery VAA corresponding to this delivery\n     request\n @custom:member gasUsed - The amount of gas that was used to call your target contract\n @custom:member status:\n   - RECEIVER_FAILURE, if the target contract reverts\n   - SUCCESS, if the target contract doesn't revert\n @custom:member additionalStatusInfo:\n   - If status is SUCCESS, then this is empty.\n   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the\n       return data (i.e. potentially truncated revert reason information).\n @custom:member refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for\n     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,\n     where a cross chain refund is necessary, or if the default code path is used where no refund is requested (NO_REFUND_REQUESTED)\n @custom:member overridesInfo:\n   - If not an override: empty bytes array\n   - Otherwise: An encoded `DeliveryOverride`"
									},
									"eventSelector": "bccc00b713f54173962e7de6098f643d8ebf53d488d71f4b2a5171496d038f9e",
									"id": 1465,
									"name": "Delivery",
									"nameLocation": "32349:8:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1445,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipientContract",
												"nameLocation": "32384:17:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "32368:33:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1444,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "32368:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1447,
												"indexed": true,
												"mutability": "mutable",
												"name": "sourceChain",
												"nameLocation": "32427:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "32412:26:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1446,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "32412:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1449,
												"indexed": true,
												"mutability": "mutable",
												"name": "sequence",
												"nameLocation": "32464:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "32449:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1448,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "32449:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1451,
												"indexed": false,
												"mutability": "mutable",
												"name": "deliveryVaaHash",
												"nameLocation": "32491:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "32483:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1450,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "32483:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1454,
												"indexed": false,
												"mutability": "mutable",
												"name": "status",
												"nameLocation": "32532:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "32517:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_DeliveryStatus_$1435",
													"typeString": "enum IWormholeRelayerDelivery.DeliveryStatus"
												},
												"typeName": {
													"id": 1453,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1452,
														"name": "DeliveryStatus",
														"nameLocations": [
															"32517:14:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1435,
														"src": "32517:14:10"
													},
													"referencedDeclaration": 1435,
													"src": "32517:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_DeliveryStatus_$1435",
														"typeString": "enum IWormholeRelayerDelivery.DeliveryStatus"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1456,
												"indexed": false,
												"mutability": "mutable",
												"name": "gasUsed",
												"nameLocation": "32557:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "32549:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "32549:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1459,
												"indexed": false,
												"mutability": "mutable",
												"name": "refundStatus",
												"nameLocation": "32588:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "32575:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RefundStatus_$1442",
													"typeString": "enum IWormholeRelayerDelivery.RefundStatus"
												},
												"typeName": {
													"id": 1458,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1457,
														"name": "RefundStatus",
														"nameLocations": [
															"32575:12:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "32575:12:10"
													},
													"referencedDeclaration": 1442,
													"src": "32575:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RefundStatus_$1442",
														"typeString": "enum IWormholeRelayerDelivery.RefundStatus"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1461,
												"indexed": false,
												"mutability": "mutable",
												"name": "additionalStatusInfo",
												"nameLocation": "32617:20:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "32611:26:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1460,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "32611:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"indexed": false,
												"mutability": "mutable",
												"name": "overridesInfo",
												"nameLocation": "32654:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "32648:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1462,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "32648:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "32357:317:10"
									},
									"src": "32343:332:10"
								},
								{
									"documentation": {
										"id": 1466,
										"nodeType": "StructuredDocumentation",
										"src": "32683:1611:10",
										"text": " @notice The delivery provider calls `deliver` to relay messages as described by one delivery instruction\n The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain\n as well as the signed wormhole message with the delivery instructions (the delivery VAA)\n The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met:\n - the delivery VAA has a valid signature\n - the delivery VAA's emitter is one of these WormholeRelayer contracts\n - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund)\n - the instruction's target chain is this chain\n - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)\n @param encodedVMs - An array of signed wormhole messages (all from the same source chain\n     transaction)\n @param encodedDeliveryVAA - Signed wormhole message from the source chain's WormholeRelayer\n     contract with payload being the encoded delivery instruction container\n @param relayerRefundAddress - The address to which any refunds to the delivery provider\n     should be sent\n @param deliveryOverrides - Optional overrides field which must be either an empty bytes array or\n     an encoded DeliveryOverride struct"
									},
									"functionSelector": "a60eb4c8",
									"id": 1478,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deliver",
									"nameLocation": "34309:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1469,
												"mutability": "mutable",
												"name": "encodedVMs",
												"nameLocation": "34342:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "34327:25:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1467,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "34327:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1468,
													"nodeType": "ArrayTypeName",
													"src": "34327:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "encodedDeliveryVAA",
												"nameLocation": "34376:18:10",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "34363:31:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1470,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "34363:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1473,
												"mutability": "mutable",
												"name": "relayerRefundAddress",
												"nameLocation": "34421:20:10",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "34405:36:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1472,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "34405:15:10",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "deliveryOverrides",
												"nameLocation": "34465:17:10",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "34452:30:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1474,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "34452:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34316:173:10"
									},
									"returnParameters": {
										"id": 1477,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "34506:0:10"
									},
									"scope": 1479,
									"src": "34300:207:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1578,
							"src": "30464:4046:10",
							"usedErrors": [],
							"usedEvents": [
								1095,
								1465
							]
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1480,
										"name": "IWormholeRelayerDelivery",
										"nameLocations": [
											"34544:24:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1479,
										"src": "34544:24:10"
									},
									"id": 1481,
									"nodeType": "InheritanceSpecifier",
									"src": "34544:24:10"
								},
								{
									"baseName": {
										"id": 1482,
										"name": "IWormholeRelayerSend",
										"nameLocations": [
											"34570:20:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1429,
										"src": "34570:20:10"
									},
									"id": 1483,
									"nodeType": "InheritanceSpecifier",
									"src": "34570:20:10"
								}
							],
							"canonicalName": "IWormholeRelayer",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1484,
							"linearizedBaseContracts": [
								1484,
								1429,
								1479,
								1127
							],
							"name": "IWormholeRelayer",
							"nameLocation": "34524:16:10",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1578,
							"src": "34514:79:10",
							"usedErrors": [],
							"usedEvents": [
								1095,
								1465
							]
						},
						{
							"constant": true,
							"id": 1487,
							"mutability": "constant",
							"name": "RETURNDATA_TRUNCATION_THRESHOLD",
							"nameLocation": "34964:31:10",
							"nodeType": "VariableDeclaration",
							"scope": 1578,
							"src": "34947:54:10",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 1485,
								"name": "uint256",
								"nodeType": "ElementaryTypeName",
								"src": "34947:7:10",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"hexValue": "313332",
								"id": 1486,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"kind": "number",
								"lValueRequested": false,
								"nodeType": "Literal",
								"src": "34998:3:10",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_132_by_1",
									"typeString": "int_const 132"
								},
								"value": "132"
							},
							"visibility": "internal"
						},
						{
							"errorSelector": "1f89f671",
							"id": 1493,
							"name": "InvalidMsgValue",
							"nameLocation": "35124:15:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1492,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1489,
										"mutability": "mutable",
										"name": "msgValue",
										"nameLocation": "35148:8:10",
										"nodeType": "VariableDeclaration",
										"scope": 1493,
										"src": "35140:16:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 1488,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "35140:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 1491,
										"mutability": "mutable",
										"name": "totalFee",
										"nameLocation": "35166:8:10",
										"nodeType": "VariableDeclaration",
										"scope": 1493,
										"src": "35158:16:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 1490,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "35158:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35139:36:10"
							},
							"src": "35118:58:10"
						},
						{
							"errorSelector": "71ae1330",
							"id": 1495,
							"name": "RequestedGasLimitTooLow",
							"nameLocation": "35186:23:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1494,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "35209:2:10"
							},
							"src": "35180:32:10"
						},
						{
							"errorSelector": "66b69b9d",
							"id": 1501,
							"name": "DeliveryProviderDoesNotSupportTargetChain",
							"nameLocation": "35222:41:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1500,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1497,
										"mutability": "mutable",
										"name": "relayer",
										"nameLocation": "35278:7:10",
										"nodeType": "VariableDeclaration",
										"scope": 1501,
										"src": "35270:15:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"typeName": {
											"id": 1496,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "35270:7:10",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 1499,
										"mutability": "mutable",
										"name": "chainId",
										"nameLocation": "35299:7:10",
										"nodeType": "VariableDeclaration",
										"scope": 1501,
										"src": "35292:14:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint16",
											"typeString": "uint16"
										},
										"typeName": {
											"id": 1498,
											"name": "uint16",
											"nodeType": "ElementaryTypeName",
											"src": "35292:6:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35263:46:10"
							},
							"src": "35216:94:10"
						},
						{
							"errorSelector": "95d64fa0",
							"id": 1503,
							"name": "DeliveryProviderCannotReceivePayment",
							"nameLocation": "35318:36:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1502,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "35354:2:10"
							},
							"src": "35312:45:10"
						},
						{
							"errorSelector": "82273f20",
							"id": 1507,
							"name": "DeliveryProviderDoesNotSupportMessageKeyType",
							"nameLocation": "35365:44:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1506,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1505,
										"mutability": "mutable",
										"name": "keyType",
										"nameLocation": "35416:7:10",
										"nodeType": "VariableDeclaration",
										"scope": 1507,
										"src": "35410:13:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"typeName": {
											"id": 1504,
											"name": "uint8",
											"nodeType": "ElementaryTypeName",
											"src": "35410:5:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35409:15:10"
							},
							"src": "35359:66:10"
						},
						{
							"errorSelector": "20b84ced",
							"id": 1513,
							"name": "ReentrantDelivery",
							"nameLocation": "35524:17:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1512,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1509,
										"mutability": "mutable",
										"name": "msgSender",
										"nameLocation": "35550:9:10",
										"nodeType": "VariableDeclaration",
										"scope": 1513,
										"src": "35542:17:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"typeName": {
											"id": 1508,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "35542:7:10",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 1511,
										"mutability": "mutable",
										"name": "lockedBy",
										"nameLocation": "35569:8:10",
										"nodeType": "VariableDeclaration",
										"scope": 1513,
										"src": "35561:16:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"typeName": {
											"id": 1510,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "35561:7:10",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35541:37:10"
							},
							"src": "35518:61:10"
						},
						{
							"errorSelector": "79cbfdbe",
							"id": 1519,
							"name": "InvalidPayloadId",
							"nameLocation": "35589:16:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1518,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1515,
										"mutability": "mutable",
										"name": "parsed",
										"nameLocation": "35612:6:10",
										"nodeType": "VariableDeclaration",
										"scope": 1519,
										"src": "35606:12:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"typeName": {
											"id": 1514,
											"name": "uint8",
											"nodeType": "ElementaryTypeName",
											"src": "35606:5:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 1517,
										"mutability": "mutable",
										"name": "expected",
										"nameLocation": "35626:8:10",
										"nodeType": "VariableDeclaration",
										"scope": 1519,
										"src": "35620:14:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"typeName": {
											"id": 1516,
											"name": "uint8",
											"nodeType": "ElementaryTypeName",
											"src": "35620:5:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35605:30:10"
							},
							"src": "35583:53:10"
						},
						{
							"errorSelector": "c37906a0",
							"id": 1525,
							"name": "InvalidPayloadLength",
							"nameLocation": "35644:20:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1524,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1521,
										"mutability": "mutable",
										"name": "received",
										"nameLocation": "35673:8:10",
										"nodeType": "VariableDeclaration",
										"scope": 1525,
										"src": "35665:16:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 1520,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "35665:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 1523,
										"mutability": "mutable",
										"name": "expected",
										"nameLocation": "35691:8:10",
										"nodeType": "VariableDeclaration",
										"scope": 1525,
										"src": "35683:16:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 1522,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "35683:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35664:36:10"
							},
							"src": "35638:63:10"
						},
						{
							"errorSelector": "249ede70",
							"id": 1529,
							"name": "InvalidVaaKeyType",
							"nameLocation": "35709:17:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1528,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1527,
										"mutability": "mutable",
										"name": "parsed",
										"nameLocation": "35733:6:10",
										"nodeType": "VariableDeclaration",
										"scope": 1529,
										"src": "35727:12:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"typeName": {
											"id": 1526,
											"name": "uint8",
											"nodeType": "ElementaryTypeName",
											"src": "35727:5:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35726:14:10"
							},
							"src": "35703:38:10"
						},
						{
							"errorSelector": "12d6a5c7",
							"id": 1533,
							"name": "TooManyMessageKeys",
							"nameLocation": "35749:18:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1532,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1531,
										"mutability": "mutable",
										"name": "numMessageKeys",
										"nameLocation": "35776:14:10",
										"nodeType": "VariableDeclaration",
										"scope": 1533,
										"src": "35768:22:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 1530,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "35768:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35767:24:10"
							},
							"src": "35743:49:10"
						},
						{
							"errorSelector": "b72c3b7f",
							"id": 1537,
							"name": "InvalidDeliveryVaa",
							"nameLocation": "35802:18:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1536,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1535,
										"mutability": "mutable",
										"name": "reason",
										"nameLocation": "35828:6:10",
										"nodeType": "VariableDeclaration",
										"scope": 1537,
										"src": "35821:13:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_string_memory_ptr",
											"typeString": "string"
										},
										"typeName": {
											"id": 1534,
											"name": "string",
											"nodeType": "ElementaryTypeName",
											"src": "35821:6:10",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "35820:15:10"
							},
							"src": "35796:40:10"
						},
						{
							"errorSelector": "776c06ce",
							"id": 1545,
							"name": "InvalidEmitter",
							"nameLocation": "35986:14:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1544,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1539,
										"mutability": "mutable",
										"name": "emitter",
										"nameLocation": "36009:7:10",
										"nodeType": "VariableDeclaration",
										"scope": 1545,
										"src": "36001:15:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										},
										"typeName": {
											"id": 1538,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "36001:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 1541,
										"mutability": "mutable",
										"name": "registered",
										"nameLocation": "36026:10:10",
										"nodeType": "VariableDeclaration",
										"scope": 1545,
										"src": "36018:18:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										},
										"typeName": {
											"id": 1540,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "36018:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 1543,
										"mutability": "mutable",
										"name": "chainId",
										"nameLocation": "36045:7:10",
										"nodeType": "VariableDeclaration",
										"scope": 1545,
										"src": "36038:14:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint16",
											"typeString": "uint16"
										},
										"typeName": {
											"id": 1542,
											"name": "uint16",
											"nodeType": "ElementaryTypeName",
											"src": "36038:6:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "36000:53:10"
							},
							"src": "35980:74:10"
						},
						{
							"errorSelector": "65c1f7cd",
							"id": 1551,
							"name": "MessageKeysLengthDoesNotMatchMessagesLength",
							"nameLocation": "36062:43:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1550,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1547,
										"mutability": "mutable",
										"name": "keys",
										"nameLocation": "36114:4:10",
										"nodeType": "VariableDeclaration",
										"scope": 1551,
										"src": "36106:12:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 1546,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "36106:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 1549,
										"mutability": "mutable",
										"name": "vaas",
										"nameLocation": "36128:4:10",
										"nodeType": "VariableDeclaration",
										"scope": 1551,
										"src": "36120:12:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 1548,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "36120:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "36105:28:10"
							},
							"src": "36056:78:10"
						},
						{
							"errorSelector": "eb5e161c",
							"id": 1555,
							"name": "VaaKeysDoNotMatchVaas",
							"nameLocation": "36142:21:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1554,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1553,
										"mutability": "mutable",
										"name": "index",
										"nameLocation": "36170:5:10",
										"nodeType": "VariableDeclaration",
										"scope": 1555,
										"src": "36164:11:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"typeName": {
											"id": 1552,
											"name": "uint8",
											"nodeType": "ElementaryTypeName",
											"src": "36164:5:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "36163:13:10"
							},
							"src": "36136:41:10"
						},
						{
							"errorSelector": "72132d5a",
							"id": 1557,
							"name": "RequesterNotWormholeRelayer",
							"nameLocation": "36374:27:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1556,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "36401:2:10"
							},
							"src": "36368:36:10"
						},
						{
							"errorSelector": "d8215fc9",
							"id": 1561,
							"name": "TargetChainIsNotThisChain",
							"nameLocation": "36514:25:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1560,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1559,
										"mutability": "mutable",
										"name": "targetChain",
										"nameLocation": "36547:11:10",
										"nodeType": "VariableDeclaration",
										"scope": 1561,
										"src": "36540:18:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint16",
											"typeString": "uint16"
										},
										"typeName": {
											"id": 1558,
											"name": "uint16",
											"nodeType": "ElementaryTypeName",
											"src": "36540:6:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "36539:20:10"
							},
							"src": "36508:52:10"
						},
						{
							"errorSelector": "afe343e8",
							"id": 1563,
							"name": "InvalidOverrideGasLimit",
							"nameLocation": "36648:23:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1562,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "36671:2:10"
							},
							"src": "36642:32:10"
						},
						{
							"errorSelector": "e3704808",
							"id": 1565,
							"name": "InvalidOverrideReceiverValue",
							"nameLocation": "36767:28:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1564,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "36795:2:10"
							},
							"src": "36761:37:10"
						},
						{
							"errorSelector": "0cfb7d9e",
							"id": 1567,
							"name": "InvalidOverrideRefundPerGasUnused",
							"nameLocation": "36908:33:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1566,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "36941:2:10"
							},
							"src": "36902:42:10"
						},
						{
							"errorSelector": "02216bc0",
							"id": 1573,
							"name": "InsufficientRelayerFunds",
							"nameLocation": "37093:24:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1572,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1569,
										"mutability": "mutable",
										"name": "msgValue",
										"nameLocation": "37126:8:10",
										"nodeType": "VariableDeclaration",
										"scope": 1573,
										"src": "37118:16:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 1568,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "37118:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 1571,
										"mutability": "mutable",
										"name": "minimum",
										"nameLocation": "37144:7:10",
										"nodeType": "VariableDeclaration",
										"scope": 1573,
										"src": "37136:15:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 1570,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "37136:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "37117:35:10"
							},
							"src": "37087:66:10"
						},
						{
							"errorSelector": "33b960d0",
							"id": 1577,
							"name": "NotAnEvmAddress",
							"nameLocation": "37309:15:10",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1576,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 1575,
										"mutability": "mutable",
										"name": "",
										"nameLocation": "-1:-1:-1",
										"nodeType": "VariableDeclaration",
										"scope": 1577,
										"src": "37325:7:10",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										},
										"typeName": {
											"id": 1574,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "37325:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "37324:9:10"
							},
							"src": "37303:31:10"
						}
					],
					"src": "40:37296:10"
				},
				"id": 10
			}
		}
	}
}